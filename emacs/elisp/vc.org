* 如何为VC添加其他版本控制后台 
VC可以使用任意版本控制系统作为后端。 若想为VC添加一个新的名为SYS的后端，有如下几个步骤:
1. 编写一个名为 ~vc-sys.el~ 的库(这里sys必须为SYS的小写形式)
2. 编写一系列 ~vc-sys~ 开头的函数(这里sys必须为SYS的小写形式)
3. 将符号 ~SYS~ 放入 ~vc-handled-backends~ 中
4. 若 ~(vc-sys-registered FILE)~ 返回非nil值,则表示所有的SYS版本的VC命令都可作用于该文件上.

VC keeps some per-file information in the form of properties (see
vc-file-set/getprop in vc-hooks.el).  The backend-specific functions
do not generally need to be aware of these properties.  For example,
`vc-sys-working-revision' should compute the working revision and
return it; it should not look it up in the property, and it needn't
store it there either.  However, if a backend-specific function does
store a value in a property, that value takes precedence over any
value that the generic code might want to set (check for uses of
the macro `with-vc-properties' in vc.el).

下面列出的函数,都省略了`vc-sys-'前缀. 有些函数是强制需要实现的,有些函数是可选实现的.

* 获取后端属性

** (revision-granularity)

必须实现

该函数返回'file或'repository. 其中

+ file :: 表示后端版本控制系统为每个文件分配一个版本号
+ repository :: 表示后端版本控制系统为每个仓库分配一个版本号

* 状态查询函数

** registered (file)

  Return non-nil if FILE is registered in this backend.  Both this
  function as well as `state' should be careful to fail gracefully
  in the event that the backend executable is absent.  It is
  preferable that this function's *body* is autoloaded, that way only
  calling vc-registered does not cause the backend to be loaded
  (all the vc-FOO-registered functions are called to try to find
  the controlling backend for FILE).

** state (file)

  Return the current version control state of FILE.  For a list of
  possible values, see `vc-state'.  This function should do a full and
  reliable state computation; it is usually called immediately after
  C-x v v.

- dir-status-files (dir files update-function)

  Produce RESULT: a list of lists of the form (FILE VC-STATE EXTRA)
  for FILES in DIR.  If FILES is nil, report on all files in DIR.
  (It is OK, though possibly inefficient, to ignore the FILES argument
  and always report on all files in DIR.)

  If FILES is non-nil, this function should report on all requested
  files, including up-to-date or ignored files.

  EXTRA can be used for backend specific information about FILE.
  If a command needs to be run to compute this list, it should be
  run asynchronously using (current-buffer) as the buffer for the
  command.

  When RESULT is computed, it should be passed back by doing:
  (funcall UPDATE-FUNCTION RESULT nil).  If the backend uses a
  process filter, hence it produces partial results, they can be
  passed back by doing: (funcall UPDATE-FUNCTION RESULT t) and then
  do a (funcall UPDATE-FUNCTION RESULT nil) when all the results
  have been computed.

  To provide more backend specific functionality for `vc-dir'
  the following functions might be needed: `dir-extra-headers',
  `dir-printer', and `extra-dir-menu'.

- dir-extra-headers (dir)

  Return a string that will be added to the *vc-dir* buffer header.

- dir-printer (fileinfo)

  Pretty print the `vc-dir-fileinfo' FILEINFO.
  If a backend needs to show more information than the default FILE
  and STATE in the vc-dir listing, it can store that extra
  information in `vc-dir-fileinfo->extra'.  This function can be
  used to display that extra information in the *vc-dir* buffer.

- status-fileinfo-extra (file)

  Compute `vc-dir-fileinfo->extra' for FILE.

** working-revision (file)

  Return the working revision of FILE.  This is the revision fetched
  by the last checkout or update, not necessarily the same thing as the
  head or tip revision.  Should return "0" for a file added but not yet
  committed.

** checkout-model (files)

  Indicate whether FILES need to be "checked out" before they can be
  edited.  See `vc-checkout-model' for a list of possible values.

- mode-line-string (file)

  If provided, this function should return the VC-specific mode
  line string for FILE.  The returned string should have a
  `help-echo' property which is the text to be displayed as a
  tooltip when the mouse hovers over the VC entry on the mode-line.
  The default implementation deals well with all states that
  `vc-state' can return.

* STATE-CHANGING FUNCTIONS

** create-repo (backend)

  Create an empty repository in the current directory and initialize
  it so VC mode can add files to it.  For file-oriented systems, this
  need do no more than create a subdirectory with the right name.

** register (files &optional comment)

  Register FILES in this backend.  Optionally, an initial
  description of the file, COMMENT, may be specified, but it is not
  guaranteed that the backend will do anything with this.  The
  implementation should pass the value of vc-register-switches to
  the backend command.  (Note: in older versions of VC, this
  command had an optional revision first argument that was
  not used; in still older ones it took a single file argument and
  not a list.)

- responsible-p (file)

  Return non-nil if this backend considers itself "responsible" for
  FILE, which can also be a directory.  This function is used to find
  out what backend to use for registration of new files and for things
  like change log generation.  The default implementation always
  returns nil.

- receive-file (file rev)

  Let this backend "receive" a file that is already registered under
  another backend.  The default implementation simply calls `register'
  for FILE, but it can be overridden to do something more specific,
  e.g. keep revision numbers consistent or choose editing modes for
  FILE that resemble those of the other backend.

- unregister (file)

  Unregister FILE from this backend.  This is only needed if this
  backend may be used as a "more local" backend for temporary editing.

** checkin (files comment &optional rev)

  Commit changes in FILES to this backend. COMMENT is used as a
  check-in comment.  The implementation should pass the value of
  vc-checkin-switches to the backend command.  The optional REV
  revision argument is only supported with some older VCSes, like
  RCS and CVS, and is otherwise silently ignored.

** find-revision (file rev buffer)

  Fetch revision REV of file FILE and put it into BUFFER.
  If REV is the empty string, fetch the head of the trunk.
  The implementation should pass the value of vc-checkout-switches
  to the backend command.

** checkout (file &optional rev)

  Check out revision REV of FILE into the working area.  FILE
  should be writable by the user and if locking is used for FILE, a
  lock should also be set.  If REV is non-nil, that is the revision
  to check out (default is the working revision).  If REV is t,
  that means to check out the head of the current branch; if it is
  the empty string, check out the head of the trunk.  The
  implementation should pass the value of vc-checkout-switches to
  the backend command. The 'editable' argument of older VC versions
  is gone; all files are checked out editable.

** revert (file &optional contents-done)

  Revert FILE back to the working revision.  If optional
  arg CONTENTS-DONE is non-nil, then the contents of FILE have
  already been reverted from a version backup, and this function
  only needs to update the status of FILE within the backend.
  If FILE is in the `added' state it should be returned to the
  `unregistered' state.

- merge-file (file rev1 rev2)

  Merge the changes between REV1 and REV2 into the current working
  file (for non-distributed VCS).  It is expected that with an
  empty first revision this will behave like the merge-news method.

- merge-branch ()

  Merge another branch into the current one, prompting for a
  location to merge from.

- merge-news (file)

  Merge recent changes from the current branch into FILE.
  (for non-distributed VCS).

- pull (prompt)

  Pull "upstream" changes into the current branch (for distributed
  VCS).  If PROMPT is non-nil, or if necessary, prompt for a
  location to pull from.

- steal-lock (file &optional revision)

  Steal any lock on the working revision of FILE, or on REVISION if
  that is provided.  This function is only needed if locking is
  used for files under this backend, and if files can indeed be
  locked by other users.

- modify-change-comment (files rev comment)

  Modify the change comments associated with the files at the
  given revision.  This is optional, many backends do not support it.

- mark-resolved (files)

  Mark conflicts as resolved.  Some VC systems need to run a
  command to mark conflicts as resolved.

- find-admin-dir (file)

  Return the administrative directory of FILE.

* HISTORY FUNCTIONS

** print-log (files buffer &optional shortlog start-revision limit)

  Insert the revision log for FILES into BUFFER.
  If SHORTLOG is true insert a short version of the log.
  If LIMIT is true insert only insert LIMIT log entries.  If the
  backend does not support limiting the number of entries to show
  it should return `limit-unsupported'.
  If START-REVISION is given, then show the log starting from that
  revision ("starting" in the sense of it being the _newest_
  revision shown, rather than the working revision, which is normally
  the case).  Not all backends support this.  At present, this is
  only ever used with LIMIT = 1 (by vc-annotate-show-log-revision-at-line).

** log-outgoing (backend remote-location)

  Insert in BUFFER the revision log for the changes that will be
  sent when performing a push operation to REMOTE-LOCATION.

** log-incoming (backend remote-location)

  Insert in BUFFER the revision log for the changes that will be
  received when performing a pull operation from REMOTE-LOCATION.

- log-view-mode ()

  Mode to use for the output of print-log.  This defaults to
  `log-view-mode' and is expected to be changed (if at all) to a derived
  mode of `log-view-mode'.

- show-log-entry (revision)

  If provided, search the log entry for REVISION in the current buffer,
  and make sure it is displayed in the buffer's window.  The default
  implementation of this function works for RCS-style logs.

- comment-history (file)

  Return a string containing all log entries that were made for FILE.
  This is used for transferring a file from one backend to another,
  retaining comment information.

- update-changelog (files)

  Using recent log entries, create ChangeLog entries for FILES, or for
  all files at or below the default-directory if FILES is nil.  The
  default implementation runs rcs2log, which handles RCS- and
  CVS-style logs.

** diff (files &optional rev1 rev2 buffer async)

  Insert the diff for FILE into BUFFER, or the *vc-diff* buffer if
  BUFFER is nil.  If ASYNC is non-nil, run asynchronously.  If REV1
  and REV2 are non-nil, report differences from REV1 to REV2.  If
  REV1 is nil, use the working revision (as found in the
  repository) as the older revision if REV2 is nil as well;
  otherwise, diff against an empty tree.  If REV2 is nil, use the
  current working-copy contents as the newer revision.  This
  function should pass the value of (vc-switches BACKEND 'diff) to
  the backend command.  It should return a status of either 0 (no
  differences found), or 1 (either non-empty diff or the diff is
  run asynchronously).

- revision-completion-table (files)

  Return a completion table for existing revisions of FILES.
  The default is to not use any completion table.

- annotate-command (file buf &optional rev)

  If this function is provided, it should produce an annotated display
  of FILE in BUF, relative to revision REV.  Annotation means each line
  of FILE displayed is prefixed with version information associated with
  its addition (deleted lines leave no history) and that the text of the
  file is fontified according to age.

- annotate-time ()

  Only required if `annotate-command' is defined for the backend.
  Return the time of the next line of annotation at or after point,
  as a floating point fractional number of days.  The helper
  function `vc-annotate-convert-time' may be useful for converting
  multi-part times as returned by `current-time' and `encode-time'
  to this format.  Return nil if no more lines of annotation appear
  in the buffer.  You can safely assume that point is placed at the
  beginning of each line, starting at `point-min'.  The buffer that
  point is placed in is the Annotate output, as defined by the
  relevant backend.  This function also affects how much of the line
  is fontified; where it leaves point is where fontification begins.

- annotate-current-time ()

  Only required if `annotate-command' is defined for the backend,
  AND you'd like the current time considered to be anything besides
  (vc-annotate-convert-time (current-time)) -- i.e. the current
  time with hours, minutes, and seconds included.  Probably safe to
  ignore.  Return the current-time, in units of fractional days.

- annotate-extract-revision-at-line ()

  Only required if `annotate-command' is defined for the backend.
  Invoked from a buffer in vc-annotate-mode, return the revision
  corresponding to the current line, or nil if there is no revision
  corresponding to the current line.
  If the backend supports annotating through copies and renames,
  and displays a file name and a revision, then return a cons
  (REVISION . FILENAME).

- region-history (FILE BUFFER LFROM LTO)

  Insert into BUFFER the history (log comments and diffs) of the content of
  FILE between lines LFROM and LTO.  This is typically done asynchronously.

- region-history-mode ()

  Major mode to use for the output of `region-history'.

* TAG SYSTEM

- create-tag (dir name branchp)

  Attach the tag NAME to the state of the working copy.  This
  should make sure that files are up-to-date before proceeding with
  the action.  DIR can also be a file and if BRANCHP is specified,
  NAME should be created as a branch and DIR should be checked out
  under this new branch.  The default implementation does not
  support branches but does a sanity check, a tree traversal and
  assigns the tag to each file.

- retrieve-tag (dir name update)

  Retrieve the version tagged by NAME of all registered files at or below DIR.
  If UPDATE is non-nil, then update buffers of any files in the
  tag that are currently visited.  The default implementation
  does a sanity check whether there aren't any uncommitted changes at
  or below DIR, and then performs a tree walk, using the `checkout'
  function to retrieve the corresponding revisions.

* MISCELLANEOUS

- make-version-backups-p (file)

  Return non-nil if unmodified repository revisions of FILE should be
  backed up locally.  If this is done, VC can perform `diff' and
  `revert' operations itself, without calling the backend system.  The
  default implementation always returns nil.

- root (file)

  Return the root of the VC controlled hierarchy for file.

- ignore (file &optional directory)

  Ignore FILE under the VCS of DIRECTORY (default is `default-directory').
  FILE is a file wildcard.
  When called interactively and with a prefix argument, remove FILE
  from ignored files.
  When called from Lisp code, if DIRECTORY is non-nil, the
  repository to use will be deduced by DIRECTORY.

- ignore-completion-table

  Return the completion table for files ignored by the current
  version control system, e.g., the entries in `.gitignore' and
  `.bzrignore'.

- previous-revision (file rev)

  Return the revision number that precedes REV for FILE, or nil if no such
  revision exists.

- next-revision (file rev)

  Return the revision number that follows REV for FILE, or nil if no such
  revision exists.

- log-edit-mode ()

  Turn on the mode used for editing the check in log.  This
  defaults to `log-edit-mode'.  If changed, it should use a mode
  derived from`log-edit-mode'.

- check-headers ()

  Return non-nil if the current buffer contains any version headers.

- delete-file (file)

  Delete FILE and mark it as deleted in the repository.  If this
  function is not provided, the command `vc-delete-file' will
  signal an error.

- rename-file (old new)

  Rename file OLD to NEW, both in the working area and in the
  repository.  If this function is not provided, the renaming
  will be done by (vc-delete-file old) and (vc-register new).

- find-file-hook ()

  Operation called in current buffer when opening a file.  This can
  be used by the backend to setup some local variables it might need.

- extra-menu ()

  Return a menu keymap, the items in the keymap will appear at the
  end of the Version Control menu.  The goal is to allow backends
  to specify extra menu items that appear in the VC menu.  This way
  you can provide menu entries for functionality that is specific
  to your backend and which does not map to any of the VC generic
  concepts.

- extra-dir-menu ()

  Return a menu keymap, the items in the keymap will appear at the
  end of the VC Status menu.  The goal is to allow backends to
  specify extra menu items that appear in the VC Status menu.  This
  makes it possible to provide menu entries for functionality that
  is specific to a backend and which does not map to any of the VC
  generic concepts.

- conflicted-files (dir)

  Return the list of files where conflict resolution is needed in
  the project that contains DIR.
  FIXME: what should it do with non-text conflicts?

* Changes from the pre-25.1 API:

- INCOMPATIBLE CHANGE: The 'editable' optional argument of
  vc-checkout is gone. The upper level assumes that all files are
  checked out editable. This moves closer to emulating modern
  non-locking behavior even on very old VCSes.

- INCOMPATIBLE CHANGE: The vc-register function and its backend
  implementations no longer take a first optional revision
  argument, since on no system since RCS has setting the initial
  revision been even possible, let alone sane.

  INCOMPATIBLE CHANGE: In older versions of the API, vc-diff did
  not take an async-mode flag as a fourth optional argument.  (This
  change eliminated a particularly ugly global.)

- INCOMPATIBLE CHANGE: The backend operation for non-distributed
  VCSes formerly called "merge" is now "merge-file" (to contrast
  with merge-branch), and does its own prompting for revisions.
  (This fixes a layer violation that produced bad behavior under
  SVN.)

- INCOMPATIBLE CHANGE: The old fourth 'default-state' argument of
  vc-dir-status-files is gone; none of the back ends actually used it.

- vc-dir-status is no longer a public method; it has been replaced
  by vc-dir-status-files.

- vc-state-heuristic is no longer a public method (the CVS backend
  retains it as a private one).

- the vc-mistrust-permissions configuration variable is gone; the
  code no longer relies on permissions except in one corner case where
  CVS leaves no alternative (which was not gated by this variable).  The
  only affected back ends were SCCS and RCS.

- vc-stay-local-p and repository-hostname are no longer part
  of the public API. The vc-stay-local configuration variable
  remains but only affects the CVS back end.

- The init-revision function and the default-initial-revision
  variable are gone.  These have't made sense on anything shipped
  since RCS, and using them was a dumb stunt even on RCS.

- workfile-unchanged-p is no longer a public back-end method.  It
  was redundant with vc-state and usually implemented with a trivial
  call to it.  A few older back ends retain versions for internal use in
  their vc-state functions.

- could-register is no longer a public method.  Only vc-cvs ever used it

  The vc-keep-workfiles configuration variable is gone.  Used only by
  the RCS and SCCS backends, it was an invitation to shoot self in foot
  when set to the (non-default) value nil.  The original justification
  for it (saving disk space) is long obsolete.

- The rollback method (implemented by RCS and SCCS only) is gone. See
  the to-do note on uncommit.

- latest-on-branch-p is no longer a public method. It was to be used
  for implementing rollback. RCS keeps its implementation (the only one)
  for internal use.

* Todo:

** New Primitives:

- uncommit: undo last checkin, leave changes in place in the workfile,
  stash the commit comment for re-use.

- deal with push operations.

** Primitives that need changing:

- vc-update/vc-merge should deal with VC systems that don't do
  update/merge on a file basis, but on a whole repository basis.
  vc-update and vc-merge assume the arguments are always files,
  they don't deal with directories.  Make sure the *vc-dir* buffer
  is updated after these operations.
  At least bzr, git and hg should benefit from this.

** Improved branch and tag handling:

- Make sure the *vc-dir* buffer is updated after merge-branch operations.

- add a generic mechanism for remembering the current branch names,
  display the branch name in the mode-line. Replace
  vc-cvs-sticky-tag with that.

- Add a primitives for switching to a branch (creating it if required.

- Add the ability to list tags and branches.

Unify two different versions of the amend capability

- Some back ends (SCCS/RCS/SVN/SRC), have an amend capability that can
  be invoked from log-view.

- The git backend supports amending, but in a different
  way (press `C-c C-e' in log-edit buffer, when making a new commit).

- Second, `log-view-modify-change-comment' doesn't seem to support
  modern backends at all because `log-view-extract-comment'
  unconditionally calls `log-view-current-file'. This should be easy to
  fix.

- Third, doing message editing in log-view might be a natural way to go
  about it, but editing any but the last commit (and even it, if it's
  been pushed) is a dangerous operation in Git, which we shouldn't make
  too easy for users to perform.

  There should be a check that the given comment is not reachable
  from any of the "remote" refs?

** Other

- asynchronous checkin and commit, so you can keep working in other
  buffers while the repo operation happens.

- Direct support for stash/shelve.

- when a file is in `conflict' state, turn on smerge-mode.

- figure out what to do with conflicts that are not caused by the
  file contents, but by metadata or other causes.  Example: File A
  gets renamed to B in one branch and to C in another and you merge
  the two branches.  Or you locally add file FOO and then pull a
  change that also adds a new file FOO, ...

- make it easier to write logs.  Maybe C-x 4 a should add to the log
  buffer, if one is present, instead of adding to the ChangeLog.

- When vc-next-action calls vc-checkin it could pre-fill the
  *vc-log* buffer with some obvious items: the list of files that
  were added, the list of files that were removed.  If the diff is
  available, maybe it could even call something like
  `diff-add-change-log-entries-other-window' to create a detailed
  skeleton for the log...

- most vc-dir backends need more work.  They might need to
  provide custom headers, use the `extra' field and deal with all
  possible VC states.

- add a function that calls vc-dir to `find-directory-functions'.

- vc-diff, vc-annotate, etc. need to deal better with unregistered
  files. Now that unregistered and ignored files are shown in
  vc-dir, it is possible that these commands are called
  for unregistered/ignored files.

- vc-next-action needs work in order to work with multiple
  backends: `vc-state' returns the state for the default backend,
  not for the backend in the current *vc-dir* buffer.

- vc-dir-kill-dir-status-process should not be specific to dir-status,
  it should work for other async commands done through vc-do-command
  as well,

- vc-dir toolbar needs more icons.

- The backends should avoid using `vc-file-setprop' and `vc-file-getprop'.
