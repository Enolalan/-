#+TITLE: Sending-mail
#+AUTHOR: Administrator
#+TAGS: emacs
#+DATE: [2016-12-26 周一 16:55]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

按下 =C-x m= 会打开一个名为 =*unsent mail*= 的buffer,在这个buffer中填入邮件内容和邮件头信息,然后按下 =C-c C-s= 或 =C-c C-c= 来发送邮件.

+ C-x m (compose-mail) :: 创建一封mail
+ C-x 4 m (compose-mail-other-window) :: 在另一个window中创建一封mail
+ C-x 5 m (compose-mail-other-frame) :: 在另一个frame中创建一封mail
+ C-c C-s (message-send) :: 发送当前mail
+ C-c C-c (message-send-and-exit) :: 发送当前mail,并退出当前mail buffer.

你还可以通过多次执行 =C-x m= 来打开多个mail buffer,每个buffer都会有不同的数字作后缀.

若你按下的是 =C-u M-x m=, 则Emacs会切换到上一次编辑的mail buffer,并询问你是否清空该邮件内容. 你可以选择 =no= 不清理,通过这种方法可以快速跳转回上一次编辑的mail.

在创建邮件时会根据 =mail-user-agent= 的值而使用不同的package来编写邮件. 目前可选的值有下面这几个:

+ message-user-agent :: 使用Message-mode编辑邮件
+ sendmail-user-agent :: 使用mail-mode编辑邮件
+ mh-e-user-agent :: 使用Emacs为MH mail提供的界面来编辑邮件
+ gnus-user-agent :: 类似 =message-user-agent=, 但若Gnus正在运行的话,还提供了Gnus的一些功能.

* mail的格式
一个mail buffer大致看起来是如下所示:
#+BEGIN_SRC mail
  To: subotai@example.org
  CC: mongol.soldier@example.net, rms@gnu.org
  Subject: Re: What is best in life?
  From: conan@example.org
  --text follows this line--
  To crush your enemies, see them driven before you, and to
  hear the lamentation of their women.
#+END_SRC

在buffer的最上方是一系列的header域,用于指明电子邮件的接受人,标题等信息. 

=--text follows this lines--= 这一行用于分割mail的header和body. 在其上的是header,在其下的是body.

你可以像编辑普通buffer那样编辑header的内容,但Emacs也提供了一些独有的命令用来编辑header.

而像 =Date= , =Message-Id= 这样的header,一般不会显示出来,这些header的值是在发送邮件时由emacs自动填写的.

* mail header说明

header域的格式是这样的: 行首以header的域名(不区分大小写)开头,后面接着一个冒号,再后面是一个可选的空格,最后是这个域的值.

理论上,你可以随意创建header域,但某些header域有其约定俗成的意义:

+ From :: 该域指定了邮件发送者是谁. 它的默认值与 =user-full-name= 或 =user-mail-address= 的值有关. 而它的格式由变量 =mail-from-style= 决定.
+ To :: 邮件要发送给谁,可以指定多个地址,每个地址之间用逗号隔开
+ Subject :: 邮件的标题
+ CC :: 抄送人
+ BCC :: 密送人,这部分的地址不会在邮件的haader中被记录
+ FCC :: 该域指定的是一个文件路径. Emacs会将邮件内容以mbox的格式(或babyl格式)添加到该文件中. 若需要指定多个文件,则需要有多个FCC域,每个域一个文件
+ Reply-to :: 指定对方回复的地址,当你的 =From= 地址无法接受回复时特别有用
+ Mail-reply-to :: 与 =Reply-to= 的作用相同,但优先级更高. 之所以有这个header域是因为某些mailing list会自动设置 =Reply-to= 域
+ Mail-followup-to :: 设置follow-up message的默认接收方(可以有多个接收方),当你回复mailing list中的消息又不希望该回复广播给你自己时很有用
+ In-reply-to ::  被回复消息的标识符. 当你回复一封邮件时,Emacs会自动帮你填入的.
+ References :: 前一个相关消息的标识符(??),Emacs也会自动帮你填入

** mail-from-style变量
该变量决定了 =From= 域的格式,它支持以下几种值:

+ nil :: 只包含一个邮件地址: =king@grassland.com=
+ parens :: 邮件地址 (用户名称): =king@grassland.com (Elvis Parsley)=
+ angles :: 用户名称 <邮件地址>: =Elvis Parsley <king@grassland.com>=
+ 其他值 :: 大多数时候使用 =angles= 格式,但若用户名称或邮件地址中包括 =<>= 而不包括 =()= 的话,使用 =parens= 格式.

** mail-default-headers变量
该变量的值为一个字符串,当创建新邮件时,会将该字符串插入作为默认的header内容.

例如你可以为每个消息都添加一个 =Reply-to= 和 =FCC= 头:
#+BEGIN_SRC emacs-lisp
  (setq mail-default-headers
        "Reply-to: lujun9972@gmail.com\nFCC: ~/Mail/sent")
#+END_SRC

* mail address的别名
一个别名可以代表一个或多个邮件地址.

别名的定义保存在一个文件中,该文件由变量 =mail-personal-alias-file= 指定,默认为 =~/.mailrc=. 文件的格式如下:
#+BEGIN_SRC text
  alias 别名 邮件地址
  或
  alias 别名 邮件地址1 邮件地址2 ...
  或
  source FILENAME
#+END_SRC

注意到当别名表示多个邮件地址时,各邮件地址之间用空格分割,而不是用逗号. 也因此,若邮件地址中带有空格,需要用引号将之括起来,像这样:
#+BEGIN_SRC text
  alias jsmith "John Q. Smith <none@example.com>"
#+END_SRC

而 =source= 命令则可以引用其他的别名文件.

定义好别名文件后,在 =To=, =From=, =CC=, =BCC= 以及 =Reply-to= 这些域中输入别名后会自动扩展成邮件地址.

但若想在其他域中也插入别名对应的邮件地址,则需要手工执行命令 =M-x mail-abbrev-insert-alias= 


* 编辑mail时的命令
编辑邮件时的major mode为Message mode. 它提供了一些以 =C-c= 为前缀的命令.

** 发送邮件相关命令

发送邮件的命令只有两个:

+ C-c C-s (message-send) :: 发送当前mail
+ C-c C-c (message-send-and-exit) :: 发送当前mail,并退出当前mail buffer.
     
但若变量 =message-kill-buffer-on-exit= 为 =t= 时,则使用 =C-c C-c= 退出buffer的同时还会kill掉该buffer.

当发送邮件时,同时会触发 =message-send-hook=.

而变量 =send-amil-function= 决定了邮件的发送方式,它可以有以下几个值:

+ sendmail-query-once :: 第一次发送邮件时咨询你要选择哪种发送方式,之后就用这种方式发送后面的邮件.
+ smtpmail-send-it :: 使用外部邮件服务商提供的SMTP邮件服务器来发送邮件. smtp的信息可以存入变量 =smtpmail-smtp-server= 和文件 =~/.authinfo= 中. 详情可以查看 =Emacs SMTP Library= 的说明
+ sendmail-send-it :: 使用外部默认的邮件发送程序来发送,一般来说改程序为 =sendmail=
+ mailclient-send-it :: 使用外部的邮件客户端来发送邮件
+ feedmail-send0it :: 类似 =sendmail-send-it=,但允许你延迟一段时间稍候发送. 详情参见文件 =feedmail.el= 中的注释.

你可以通过设置 =sendmail-coding-system= 来指定邮件发送的编码,但若该指定的编码无法支持邮件中的某些字符,则Emacs还是会提示你选择另一个编码格式.

** 编辑header域的相关命令

+ C-c C-f C-t (message-goto-to) :: 跳到 =To= header域
+ C-c C-f C-s (message-goto-subject) :: 跳到 =Subject= header域
+ C-c C-f C-c (message-goto-cc) :: 跳到 =CC= header域
+ C-c C-f C-b (message-goto-bcc) :: 跳到 =BCC= header域
+ C-c C-f C-r (message-goto-reply-to) :: 跳到 =Reply-To= header域
+ C-c C-f C-f (message-goto-followup-to) :: 跳到 =Mail-Followu-To= header域
+ C-c C-f C-w (message-goto-fcc) :: 添加一个新的 =FCC= header域
+ C-c C-b (message-goto-body) :: 跳到邮件的消息体的开头位置
+ <TAB> (message-table) :: 尝试补全当前邮件地址,在 =To=, =CC= 或 =BCC= 域中有用.

** 引用邮件
‘C-c C-y’
     Yank the selected message from the mail reader, as a citation
     (‘message-yank-original’).
‘C-c C-q’
     Fill each paragraph cited from another message
     (‘message-fill-yanked-message’).

   You can use the command ‘C-c C-y’ (‘message-yank-original’) to “cite”
a message that you are replying to.  This inserts the text of that
message into the mail buffer.  This command works only if the mail
buffer is invoked from a mail reader running in Emacs, such as Rmail.

   By default, Emacs inserts the string ‘>’ in front of each line of the
cited text; this prefix string is specified by the variable
‘message-yank-prefix’.  If you call ‘message-yank-original’ with a
prefix argument, the citation prefix is not inserted.

   After using ‘C-c C-y’, you can type ‘C-c C-q’
(‘message-fill-yanked-message’) to fill the paragraphs of the cited
message.  One use of ‘C-c C-q’ fills all such paragraphs, each one
individually.  To fill a single paragraph of the quoted message, use
‘M-q’.  If filling does not automatically handle the type of citation
prefix you use, try setting the fill prefix explicitly.  *Note
Filling::.

   You can customize mail citation through the hook
‘mail-citation-hook’.  For example, you can use the Supercite package,
which provides more flexible citation (*note (sc)Introduction::).


** 其他命令

+ C-c C-a (mml-attach-file) :: 为邮件添加附件. 该命令只在message mode下有效,它会依次提示输入附件路径,类型,描述以及整合方式.
+ mail-add-attachment :: 为邮件添加附件. 该命令在mail mode下有效, 它会提示你输入附件路径,并自动判断附件类型及整合方式. 但需要你手工输入附件描述.
+ ispell-message :: 作拼写检查,它会很智能地不检查邮件引用部分的内容
+ C-c C-w (message-insert-signature) :: 插入邮件签名


* 为每个邮件添加签名
变量 =message-signature= 的值决定了Emacs如何处理你的邮件签名, 它支持以下几种值:

+ t :: 会从 =message-signature-file= 指定的文件中读取并插入邮件签名,默认该文件为 =~/.signature=
+ 字符串 :: 该字符串就是邮件签名,直接插入
+ nil :: Emacs不会帮你自动插入邮件签名,需要手工执行 =C-c C-w= 才能插入
     
不过如果你是在mail mode下写邮件的话,则需要使用 =mail-signature= 和 =mail-signature-file= 代替

按惯例,签名一般是以 =--= 开头的,因此若你设置的签名没有该前缀的话, Emacs会自动昂你添加该前缀.

使用函数 =(fortune-file &optional FILE)= 可以使用fortune程序为你声称一个签名, 你可以为每个邮件插入不同的fortune cookie message:
#+BEGIN_SRC emacs-lisp
  (add-hook 'mail-setup-hook 'fortune-to-signature)
#+END_SRC

* Hooks说明

当你运行 =C-x m= 时,首先会进入message-mode并因此触发 =text-mode-hook= 和 =message-mode-hook=.

随后Emacs调用 =message-setup= 函数来插入默认的内容,并在插入默认内容后触发 =message-setup-hook=.

而当发送邮件时,同时会触发 =message-send-hook=.
