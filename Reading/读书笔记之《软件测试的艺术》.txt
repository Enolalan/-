1、关于软件测试的最为重要的实用信息，即一系列心理和经济学问题
2、软件测试需要保证软件没有其不该有的功能
3、应避免测试用例用后立即放弃，除非软件本身就是一次性的软件
4、精确定义出预期的输入和结果后，使用计算机来做判断
5、测试的目标仅仅是找出错误来，而不是找出改正的方法
6、软件测试也包括人工测试方法
7、对着历来常见的编码错误列表分析程序，错误列表在很大程度上都是独立于编程语言的。
8、代码检查时配一名程序员新手是有好处的，可以给出新颖的不带偏见的观点。
四、测试用例
1、推荐的步骤是先使用黑盒测试方法来设计测试用例，然后视情况需要使用白盒测试方法来设计补充的测试用例
2、条件满足准则不一定满足判定覆盖准则。
3、多重条件覆盖准则（测试所有可能的条件结果的组合）同时满足判定覆盖准则，条件覆盖准则以及判定/条件覆盖准则
4、边界值测试指南
a、如果输入条件（或结果空间）规定了一个输入值的范围，那么正对范围的边界设计有效测试用例，正对刚刚越界的情况设计无效输入测试用例。
b、如果输入条件（或结果空间）规定了输入值的数量，那么应针对最小数量输入值、最大数量输入值设计有效测试用例，以及比最小数量少一个，比最大数量多一个的情况设计测试用例。
c、检查结果空间的边界很重要，因为输入范围的边界并不总是能代表输出范围的边界情况
d、如果程序的输入或输出是一个有序序列，则应特别注意该序列的第一个和最后一个元素
5、使用因果图生成测试用例时采用的过程：
a、将规格说明分解为可执行的片段，因为结果图不善于处理较大的规格说明
b、确定规格说明中的因果关系。所谓“因”是指一个明确的输入条件或输入条件的等价类。所谓“果”是指一个输出条件或系统转换。
c、通过阅读规格说明，同时标识出描述“因”和“果”的文字和句子，将因和果确定出来，并对每个因和果赋予一个唯一的编号。并将其转换为连接因果关系的布尔图
d、给图加上注解符号，说明由于语法或环境的限制不能联系起来的因和果
e、通过仔细地追踪途中的状态变化情况，将因果图转换成一个有限项的判定表，表中的每一列代表一个测试用例
f、将判定表中的列转换成测试用例
g、因果图方法是一个根据条件的组合而生成测试用例的系统性方法。
6、综合各种方法设计测试用例
a、如果规格说明中包含输入条件组合的情况，应首先使用因果图分析方法。
b、在任何情况下都应使用边界值分析方法
c、设计测试用例时，一定要设计有效等价类和无效等价类
d、使用错误猜测技术增加更多的测试用例。
e、针对测试用例集检查程序的逻辑结构。
五、模块测试
1、模块测试总体上是面向白盒测试，故测试需要两类信息：模块的规格说明和模块的源代码。
2、模块测试的测试用例的设计过程为：使用一种或多种白盒测试方法分析模块的逻辑结构，然后使用黑盒测试方法对照模块的规格说明以补充测试用例。
3、无论采用哪种逻辑覆盖方法，第一步都是要列举出程序的所有条件判断。若判断较少，可以选择多重条件覆盖准则。该准则要求设计出足够多的测试用例，以便将每个判断中的所有可能的条件组合至少触发一次。
4、集成测试方法有两种：
a、先独立地测试每个模块，然后再将这些模块组装成完整的程序
b、先将下一步要测试的模块组装到测试完成的模块集合中，然后再进行测试。这种方法叫做增量测试，该方法的一个关键问题是我们究竟从程序的顶部开始，还是从底部开始进行测试。
c、采用增量测试时，优先将关键模块，容易发生错误的失败和IO模块添加进来
六、更高级的测试
1、软件开发的流程一般为:需求-》目标-》外部规格说明-》系统设计-》程序结构设计-》模块接口规格说明-》代码
2、假定大多数软件错误都来自于信息处理中的故障，那么现在有三个补充的方法来预测或识别这些错误
a、我们可以使软件开发过程更加精密，以防其中出现很多错误。
b、可以在开发流程的每个阶段结束时引入一个独立的验证过程，在进入下一个阶段之前经可能多地发现问题。
c、对每个不同的开发阶段采用不同的测试方法
3、我们应该能够在开发过程和测试过程之间建立起一对一的联系
a、需求-》验收测试
b、目标-》系统测试
c、外部规格说明-》功能测试
d、系统设计、程序结构设计-》集成测试
e、模块接口规格说明-》模块测试
4、系统测试并未是测试整个系统或程序功能的过程，因为有了功能测试，这样会显得多余。系统测试的目的为：将系统或程序与其初始目标进行比较。也即外部规格说明与客户实际需求之间的不同点。
a、能力测试：判断目标文档 提及的每一项能力是否都已实现。
b、容量测试：使程序经受大容量数据的检验。容量测试的目的是为了证明程序不能处理目标文档中规定的数据容量
c、强度测试：使程序承受高负荷或强度的校验。即在很短的时间间隔内达到数据或操作的数量峰值
d、易用性测试：视图发现人为因素或易用性的问题。一定要注意在准确性极为重要的环境里，如网上银行系统，输入中是否有足够的冗余信息。
e、安全性测试：设计测试用例来突破程序安全检查的过程。
f、性能测试：特定负载和配置环境下程序的响应时间和吞吐率
g、存储测试：
h、配置测试：不同硬件，软件搭配上，软件所体现出的兼容性
i、兼容性/配置/转换测试：新系统与旧系统的兼容性测试
j、安装测试：软件安装过程是否过于复杂
k、可靠性测试：平均故障间隔时间（MTBF），使用断言作为判断软件中不存在错误的依据。
l、可恢复性测试：证明系统不能从程序错误、硬件失效和数据错误中恢复过来。
m、适用性测试：定义了系统提供的服务辅助功能，包括存储转存程序或诊断程序、调试明显问题的平均时间、维护过程以及内部业务文档的质量等。
n、文档测试：检查用户文档的正确性和清晰性
o、过程测试：软件并不是完全自动化的，包含了很多人员操作过程。需要对所有已规定的人工过程进行测试。
p、系统测试至少应由很少受开发机构左右的独立人群来执行。
4、若测试大型软件系统，可能需要运用项目管理的方式对测试进行管理。
5、有三类较为有用的测试结束准则
a、基于各类准则和方式产生的所有测试用例最终都是不成功的
b、发现了指定数量的错误后结束测试。
c、将单位时间内发现的错误数量做成统计曲线，根据统计曲线的形状来判断是否结束测试。一般当发现错误率明显下降时，意味着可以结束测试了。
七、调试
1、根据数据推测原因
2、列举各种原因，再根据症状排除原因
3、回溯法调试：从结果逆向推理程序 
4、测试法调试：使用发现错误的测试实例，进行少许更改，用来调试之用，尽量确定错误的位置
5、调试时应注意纠正错误本身，而不仅是其症状
6、永远不要假设为纠正错误而增加到程序中的代码是正确的。这说明所有的修改都需要经过回归测试。
7、在设计阶段使用的任何规程、方法和形式都同样适用于错误修改阶段
8、修改错误时最好能记录下错误的信息，方便以后进行错误分析.记录的错误信息一般包括：
a、错误出现的源头和发生时间
b、谁制造的错误（不是为了惩罚，而是为了培训）
c、错误发生的原因（与a有什么不同？？）
d、如何避免错误的出现
e、反省为什么错误没有早些发现。
f、思考该如何更早第发现错误
八、极限测试
1、XP模型高度依赖模块的单元和验收测试。总的来说，对每个无论多小的递增的代码变更，都必须进行单元测试，以确保代码库满足其规格说明的要求。事实上，测试在XP中的地位如此重要，以至于需要首先创建单元（模块）测试和验收测试，然后才创建代码库。
2、极限测试方法强调连续测试。其由两种类型的测试组成：单元测试和验收测试。
3、极限单元测试有两个简单规则：所有代码模块在编码开始之前必须设计好单元测试用例，在产品发布之前必须通过单元测试。
4、基线测试还要求在开始程序编码之前，根据程序的规格说明设计测试配件。
