#+TITLE: linux-unix设计思想
#+AUTHOR: lujun9972
#+TAGS: Reading
#+DATE: [2016-11-26 六 17:43]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

* UNIX哲学概述
** 小即是美
+ 小程序易于理解
+ 小程序易于维护
+ 小程序消耗的资源少
+ 小程序容易与其他工具结合
** 每个程序只完成一件事情
+ 通过集中精力对应单一任务,程序可以减少冗余代码,避免不必要的资源开销,不必要的复杂度.
** 尽快建立原型
+ 变化不可避免
+ 原型的建立是学习的过程
+ 尽早建立原型能减低风险
+ 
** 程序的可移植性高于程序的效率
+ 硬件的发展会弥补程序的效率不足
+ 可移植性能让程序的使用面更广,也就增加了程序的价值
+ 如果程序运行速度还可以接受,那就不要花太多时间去优化程序
+ 与硬件或平台的紧密结合,意味着当该硬件或平台变得没落时,软件的价值会大大下降
+ 可移植性的软件延长了软件的使用寿命,从而减少了用户培训的需求
** 以纯文本文件来存储数据
+ 纯文本保证了数据的可移植性
+ 文本文件易于阅读和编辑
** 充分复用其他软件和模块
+ 良好的程序员编写优秀代码,优秀的程序员借用优秀代码
+ 允许他人使用你的代码能发挥软件杠杆效应
+ 将一切自动化
** 使用shell脚本来复用其他软件和增加可移植性
+ shell脚本的可移植性要高于C语言
+ shell脚本可以快速的通过复用其他软件来完成自己的工作
** 避免强制要求用户手工输入数据
+ 交互式程序要处理人类的各种输入会使的规模庞大且难以编写
+ 交互式程序难以与其他程序结合
** 让每一个程序都成为过滤器
+ 所有软件程序的最基本特性就是,它们只修改而不创造数据
* Unix文化十准则
+ 允许用户定制环境
+ 尽量使操作系统内核小而轻巧
+ 使用小写字母,并尽量保持简洁
+ 信息充分电子化
+ 只输出必要的信息
+ 将任务尽可能的并行化
+ 通过组合小程序完成大任务
+ 满足于90%的解决方案. 百分百的完成任务太困难,完成90%的目标会更有效率,更节省成本
+ 包容,不封闭
+ 层次化思考
* Unix开发人员编写软件的过程
1. 编写一份简短的功能规格文件
2. 编写软件
3. 使用迭代的软件测试/重现编写代码的开发过程,直至完成全部功能
4. 如果有必要的话,再撰写一份详细文档.
