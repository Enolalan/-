                            effective_stl
                            =============

Author: 
Date: 2013-05-15 14:21:15 中国标准时间


Table of Contents
=================
1 容器
    1.1 仔细选择容器
    1.2 小心写"与容器类型无关"的代码
    1.3 使容器里对象的拷贝操作轻量且正确
    1.4 用empty来代替检查size()是否为0
    1.5 尽量使用区间成员函数来代替它们的单元素兄弟
    1.6 警惕C++最令人恼怒的解析
    1.7 当使用new的指针的容器时,记得在销毁容器后delete那些指针
    1.8 从容器中删除元素时,仔细选择不同的策略
    1.9 注意allocator的协定和约束
    1.10 理解自定义allocator的正确用法
    1.11 对STL容器的线程安全性的期待现实一点
2 vector和string
    2.1 尽量使用vector和string来代替动态分配的数组
    2.2 使用reserve来避免不必要的重新分配
    2.3 小心string实现的多样性
    2.4 如何将vector和string的数据传给遗留的API
    2.5 使用"交换技巧"来修正过剩容量
    2.6 避免使用vector<bool>
3 关联容器
    3.1 了解相等和等价的区别
    3.2 为指针的关联容器指定比较类型
    3.3 永远让比较函数相等的值返回false
    3.4 避免原地修改set和multiset的键
    3.5 考虑用有序vector代替关联容器
    3.6 当关乎效率时,应该在map::operator[]和map-insert之间仔细选择
    3.7 熟悉非标准散列容器
4 迭代器
    4.1 尽量用iterator代替const_iterator,reverse_iterator和const_reverse_iterator
    4.2 用distance和advance把const_iterator转化为iterator
    4.3 了解如何通过reverse_iterator的base得到iterator
    4.4 需要一个一个字符输入时考虑使用istreambuf_iterator
5 算法
    5.1 确保目标区间足够大或者在算法执行时可以增加大小
    5.2 选择合适的排序算法
    5.3 如果你真的想删除东西的话,就在类似remove的算法后接上erase
    5.4 堤防在指针的容器上使用类似remove的算法
    5.5 注意哪个算法需要有序区间
    5.6 通过mismatch或lexicographical比较实现简单的忽略大小写字符串比较
    5.7 了解copy_if的正确实现
    5.8 用accumulate或for_each来获取自定义的区间统计信息
6 仿函数
    6.1 把仿函数类设计为可被用于值传递
    6.2 用纯函数做判断式
    6.3 堤防在指针的容器上使用类似remove的算法
    6.4 注意哪个算法需要有序区间
    6.5 通过mismatch或lexicographical比较实现简单的忽略大小写字符串比较
    6.6 了解copy_if的正确实现
    6.7 用accumulate或for_each来获取自定义的区间统计信息
7 使用STL编程
    7.1 考虑使用函数对象代替函数作为算法的参数
    7.2 堤防在指针的容器上使用类似remove的算法
    7.3 注意哪个算法需要有序区间
    7.4 通过mismatch或lexicographical比较实现简单的忽略大小写字符串比较
    7.5 了解copy_if的正确实现
    7.6 用accumulate或for_each来获取自定义的区间统计信息


1 容器 
-------

1.1 仔细选择容器 
=================
   1. C++中的容器回顾
      * 标准STL序列容器:
        vector、string、deque和list。 
      * 标准STL关联容器:
        set、multiset、map和multimap。
      * 非标准序列容器:
        slist(slist是一个单向链表)和rope(rope本质上是一个重型字符串)
      * 非标准关联容器:
        hash_set、hash_multiset、hash_map和hash_multimap。
      * 几种标准非STL容器:
        数组、bitset、valarray、stack、queue和priority_queue。
   2. 连续内容容器和基于节点的容器的区别
      * 连续内容容器(也叫基于数组的容器)在一个或多个(动态分配)的内存块中保持它们的元素.
        连续内存容器包括vector,string和depue
      * 基于节点的容器在每个内存块（动态分配）中只保存一个元素。
        基于节点的容器包括list,slist,所有的标准关联容器(一般实现是用平衡树实现的)和非标准的散列容器(不同的基于节点的实现)
   3. 选用何种容器的标准
      * 你关心元素在容器中的顺序吗？
        如果不，散列容器就是可行的选择。否则，你要避免使用散列容器。 
      * 你需要哪一类迭代器？
        如果必须是随机访问迭代器，在技术上你就只能限于vector、deque和string，但你也可能会考虑rope。
        如果需要双向迭代器，你就用不了slist和散列容器的一般实现
      * 容器中的数据的内存布局需要兼容C吗？
        如果是，你就只能用vector
      * 你介意如果容器的底层使用了引用计数吗？
        如果是，你就得避开string，因为很多string的实现是用引用计数。你也不能用rope，因为权威的rope实现是基于引用计数的。
        于是你得重新审核你的string，你可以考虑使用vector<char>。 
      * 你需要插入和删除的事务性语义吗？也就是说，你需要有可靠地回退插入和删除的能力吗？
        如果是，你就需要使用基于节点的容器。如果你需要多元素插入（比如，以范围的方式）的事务性语义，你就应该选择list，因为list是唯一提供多元素插入事务性语义的标准容器。
      * 你要把迭代器、指针和引用的失效次数减到最少吗？
        如果是，你就应该使用基于节点的容器，因为在这些容器上进行插入和删除不会使迭代器、指针和引用失效（除非它们指向你删除的元素）。
        一般来说，在连续内存容器上插入和删除会使所有指向容器的迭代器、指针和引用失效。
      * 你需要具有有以下特性的序列容器吗：1）可以使用随机访问迭代器；2）只要没有删除而且插入只发生在容器结尾，指针和引用的数据就不会失效？
        这个一个非常特殊的情况，但如果你遇到这种情况，deque就是你梦想的容器。
        有趣的是，当插入只在容器结尾时，deque的迭代器也可能会失效，deque是唯一一个“在迭代器失效时不会使它的指针和引用失效”的标准STL容器。

1.2 小心写"与容器类型无关"的代码 
=================================
   1. 写既要和序列容器又要和关联容器一起工作的代码并没有什么意义.
      因为很多成员函数只存在于其中一类容器中.不同的容器是不同的，而且它们的优点和缺点有重大不同。它们并不被设计成可互换的，而且你做不了什么包装的工作。
   2. nultimap不存在operator[]
   3. 若存在改变容器类型的可能.
      可以使用typedef封装容器类型.
      也可以新建一个类,在类中定义一个隐藏的容器对象.通过类的接口限制容器特殊信息可见性的数量

1.3 使容器里对象的拷贝操作轻量且正确 
=====================================
   1. 当你从容器中获取一个对象时,你所得到的对象不是容器里的那个对象.而是拷贝.
      当你向容器中添加一个对象,进入容器的是你指定的对象的拷贝.
      拷进去，拷出来。这就是STL的方式.
   2. 在容器中插入删除操作或使用排序算法等会移动容器元素的操作,也会引发元素的拷贝.
   3. 把一个派生类对象插入基类对象的容器几乎总是错的,因为对象在拷贝入容器时会产生分隔

1.4 用empty来代替检查size()是否为0 
===================================
   1. 你应该首选empty的构造，而且理由很简单：对于所有的标准容器，empty是一个常数时间的操作，但对于一些list实现，size花费线性时间。

1.5 尽量使用区间成员函数来代替它们的单元素兄弟 
===============================================
   1. 尽量使用区间成员函数代替它们的单元素兄弟的理由。
      * 一般来说使用区间成员函数可以输入更少的代码。 
      * 区间成员函数会导致代码更清晰更直接了当。 
      * 当处理标准序列容器时，应用单元素成员函数比完成同样目的的区间成员函数需要更多地内存分配，更频繁地拷贝对象，而且/或者造成多余操作.
        1) 第一种税在于没有必要的函数调用。
           把numValues个元素插入v，每次一个，自然会花费你numValues次调用insert。
           而区间成员函数只需一次调用开销
        2) 无效率地把v中的现有元素移动到它们最终插入后的位置的开销。
           每次调用insert来增加一个新元素到v，插入点以上的每个元素都必须向上移动一次来为新元素腾出空间。这就移动了numValues次.
           而区间成员函数只需一次移动开销
        3) 插入数据时可会会有内存分配的开销.
           多次插入数据可能会有多次内存分配的开销.
           区间分配使得只需要分配一次内存
   2. string和vector在元素数目减少时,不会自动缩减内存分配

1.6 警惕C++最令人恼怒的解析 
============================
   1. 几乎任何东西都可能被分析成函数声明.


  //假设你有一个int的文件，你想要把那些int拷贝到一个list中。这看起来像是一个合理的方式：
  ifstream dataFile("ints.dat");
  list<int> data(istream_iterator<int>(dataFile),   // 警告！这完成的并不
  istream_iterator<int>());         // 是像你想象的那样

      事实上,这声明了一个函数data，它的返回类型是list<int>。这个函数data带有两个参数：
      第一个参数叫做dataFile。它的类型是istream_iterator<int>。dataFile左右的括号是多余的而且被忽略。 
      第二个参数没有名字。它的类型是指向一个没有参数而且返回istream_iterator<int>的函数的指针。 
      正确的做法是


  ifstream dataFile("ints.dat");
  istream_iterator<int> dataBegin(dataFile);
  istream_iterator<int> dataEnd;
  list<int> data(dataBegin, dataEnd);

1.7 当使用new的指针的容器时,记得在销毁容器后delete那些指针 
===========================================================
   1. auto_ptr在C++标准中时禁止插入容器的,虽然有些编译器允许容器中插入auto_ptr,但这是不可移植的.
   2. 由于auto_ptr复制方面的特性,在调用容器的方法后,可能会使原元素设为NULL

1.8 从容器中删除元素时,仔细选择不同的策略 
==========================================
   1. 去除一个容器中有特定值的所有对象: 
      * 如果容器是vector、string或deque，使用erase-remove惯用法。


  c.erase(remove(c.begin(), c.end(), 1963),       // 当c是vector、string
          c.end());                               // 或deque时，
                                          // erase-remove惯用法
                                          // 是去除特定值的元素
                                          // 的最佳方法

      * 如果容器是list，使用list::remove。
      * 如果容器是标准关联容器，使用它的erase成员函数。
   2. 去除一个容器中满足一个特定判定式的所有对象:
      * 如果容器是vector、string或deque，使用erase-remove_if惯用法。
      * 如果容器是list，使用list::remove_if。
      * 如果容器是标准关联容器，使用remove_copy_if和swap，或写一个循环来遍历容器元素，当你把迭代器传给erase时记得后置递增它。
        要注意,关联容器中删除一个元素后,指向该元素的iterator会失效,故采用后置递增.在iterator被删除前递增,并将递增前的值传给erase
   3. 在循环内做某些事情(除了删除对象之外):
      * 如果容器是标准序列容器，写一个循环来遍历容器元素，每当调用erase时记得都用它的返回值更新你的迭代器。
        要注意,序列容器中删除一个元素后,指向该元素的iterator及之后的所有迭代器都会失效,但erase会返回一个iterator，指向被删除元素的后一个元素.
      * 如果容器是标准关联容器，写一个循环来遍历容器元素，当你把迭代器传给erase时记得后置递增它。

1.9 注意allocator的协定和约束 
==============================
   看不懂

1.10 理解自定义allocator的正确用法 
===================================
   看不懂

1.11 对STL容器的线程安全性的期待现实一点 
=========================================
   1. STL容器对多线程的支持为
      * 多个读取者是安全的:
        多线程可能同时读取一个容器的内容，这将正确地执行。当然，在读取时不能有任何写入者操作这个容器。 
      * 对不同容器的多个写入者是安全的:
        多线程可以同时写不同的容器。 

2 vector和string 
-----------------

2.1 尽量使用vector和string来代替动态分配的数组 
===============================================
   1. string可能使用了引用计数,这时在多线程环境下你可能发现避免分配和拷贝所节省下的时间都花费在后台并发控制上了.(string本身实现了并发控制,可以支持多线程,但效率会降低)
   2. 若不想使用string的引用计数,则有三个替代方法
      * 看看你的库实现是否可以关闭引用计数，通常是通过改变预处理变量的值。当然那是不可移植的，但使工作变得可能，值得研究。
      * 寻找或开发一个不使用引用计数的string实现（或部分实现）替代品。
      * 考虑使用vector<char>来代替string，vector实现不允许使用引用计数，所以隐藏的多线程性能问题不会出现了。

2.2 使用reserve来避免不必要的重新分配 
======================================
   1. resize和reserve的区别
      * resize会强制把容器容量改为n,当参数比当前size()少时,容器尾部的元素会被销毁.
      * 当reserve的参数比当前size()少时,vector会忽略它什么都不做,string可能把容量改为size()和n中的最大数,它不会销毁元素

2.3 小心string实现的多样性 
===========================
   1. 每个string实现都容纳了下面的信息:
      * 字符串的大小，也就是它包含的字符的数目。
      * 容纳字符串字符的内存容量。
      * 这个字符串的值，也就是，构成这个字符串的字符。
   2. 一个string可能容纳:
      * 它的配置器的拷贝。
      * 值的引用计数。

2.4 如何将vector和string的数据传给遗留的API 
============================================
   1. 如果你有一个vector对象v，而你需要得到一个指向v中数据的指针，以使得它可以被当作一个数组，只要使用&v[ 0 ]就可以了(前提是vector不为空,否则产生一个指向根本就不存在的东西的指针)
   2. 类似从vector上获取指向内部数据的指针的方法，对string不是可靠的，因为:
      * string中的数据并没有保证被存储在独立的一块连续内存中.
      * string的内部表示形式并没承诺以一个'\0'字符结束。
   3. string的c_str方法,在字符长度为0时,返回一个指向'\0'的指针
   4. vector承诺了与数组具有相同的潜在内存分布
      因此C风格API把数据和其他类型的容器之间相互传递时,可以通过vector中转

2.5 使用"交换技巧"来修正过剩容量 
=================================
   1. 当你想对vector和string进行“收缩到合适”时，就考虑“交换技巧”。


  vector<Contestant>(contestants).swap(contestants);
  /*说明
  表达式vector<Contestant>(contestants)建立一个临时vector，它是contestants的一份拷贝：vector的拷贝构造函数做了这个工作。
  但是，vector的拷贝构造函数只分配拷贝的元素需要的内存，所以这个临时vector没有多余的容量。
  然后我们让临时vector和contestants交换数据，这时我们完成了，contestants只有临时变量的修整过的容量，而这个临时变量则持有了曾经在contestants中的发胀的容量。
  在这里（这个语句结尾），临时vector被销毁，因此释放了以前contestants使用的内存。瞧！收缩到合适。
  */

2.6 避免使用vector<bool> 
=========================
   1. vector<bool>其实它不是一个STL容器,而且它不容纳bool
   2. vector<boo>::operator[]返回一个对象，其行为类似于比特的引用，也称为代理对象.
   3. 当需要vector<bool>时,标准库提供了两个替代品
      * deque<bool>
        deque提供了几乎所有vector所提供的（唯一值得注意的是reserve和capacity），而deque<bool>是一个STL容器，它保存真正的bool值。当然，deque内部内存不是连续的。所以不能传递deque<bool>中的数据给一个希望得到bool数组的C API
      * bitset  

3 关联容器 
-----------

3.1 了解相等和等价的区别 
=========================
   1. find对“相同”的定义是相等，基于operator==。set::insert对“相同”的定义是等价，通常基于operator<(!w1<w2 && !w2<w1)。
   2. 操作上来说，相等的概念是基于operator==的
      等价是基于在一个有序区间中对象值的相对位置,两个对象x和y如果在关联容器c的排序顺序中没有哪个排在另一个之前，那么它们关于c使用的排序顺序有等价的值。
   3. 每个标准关联容器通过它的key_comp成员函数来访问排序判断式，所以如果下式求值为真，两个对象x和y关于一个关联容器c的排序标准有等价的值：


  !c.key_comp()(x, y) && !c.key_comp()(y, x)                // 在c的排序顺序中
                                            // 如果x在y之前它非真，
                                            // 同时在c的排序顺序中
                                            // 如果y在x之前它非真

3.2 为指针的关联容器指定比较类型 
=================================
   1. 无论何时你建立一个指针的标准关联容器，你必须记住容器会以指针的值排序。这基本上不是你想要的，所以你几乎总是需要建立自己的仿函数类作为比较类型。
      通常对于T*,你需要定义自己的比较仿函数类less<T*>,并在定义关联容器时指定这个仿函数:


  struct StringPtrLess:
    public binary_function<const string*,           // 使用这个基类
                            const string*,          // 的理由参见条款40
                            bool> {
    bool operator()(const string *ps1, const string *ps2) const
    {
            return *ps1 < *ps2;
    }
  };
  然后你可以使用StringPtrLess作为ssp的比较类型：
  
  typedef set<string*, StringPtrLess> StringPtrSet;
  StringPtrSet ssp;                                 // 建立字符串的集合，
                                            // 按照StringPtrLess定义的顺序排序
  
  ...                                               // 和前面一样插入
                                            // 同样四个字符串

3.3 永远让比较函数相等的值返回false 
====================================
   1. 如果让比较函数对相等的值返回true,那么会有什么后果?
      由于关联容器是用!compare(w1,w2) && !compare(w2,w1) 来判断w1和w2是否相等的,而若compare返回true,那么该比较结果就为false,那么就能过插入多个相同的值进入关联容器,这回破坏关联容器!!
   2. 从技术上说，用于排序关联容器的比较函数必须在它们所比较的对象上定义一个“严格的弱序化(strict weak ordering)”。
      而任何一个定义了严格的弱序化的函数都必须在传入相同的值的两个拷贝时返回false。

3.4 避免原地修改set和multiset的键 
==================================
   1. 正如所有标准关联容器，set和multiset保持它们的元素有序，这些容器的正确行为依赖于它们保持有序。 如果你改了关联容器里的一个元素的值（例如，把10变为1000），新值可能不在正确的位置，而且那将破坏容器的有序性。
   2. 如果你改变set或multiset里的元素， 你必须确保不改变一个键部分――影响容器有序性的元素部分。
   3. 如果你要总是可以工作而且总是安全地改变set、multiset、map或multimap里的元素，按五个简单的步骤去做：
      * 定位你想要改变的容器元素。如果你不确定最好的方法，条款45提供了关于怎样进行适当搜寻的指导。 
      * 拷贝一份要被修改的元素。对map或multimap而言，确定不要把副本的第一个元素声明为const。毕竟，你想要改变它！
      * 修改副本，使它有你想要在容器里的值。
      * 从容器里删除元素，通常通过调用erase（参见条款9）。
      * 把新值插入容器。如果新元素在容器的排序顺序中的位置正好相同或相邻于删除的元素，使用insert的“提示”形式把插入的效率从对数时间改进到分摊的常数时间。使用你从第一步获得的迭代器作为提示。


  EmpIDSet se;                                    // 同前，se是一个以ID号
                                          // 排序的雇员set
  Employee selectedID;                            // 同前，selectedID是一个带有
                                          // 需要ID号的雇员
  ...
  EmpIDSet::iterator i =
  se.find(selectedID);                    // 第一步：找到要改变的元素
  if (i!=se.end()){
      Employee e(*i);                             // 第二步：拷贝这个元素
      se.erase(i++);                              // 第三步：删除这个元素；
                                          // 自增这个迭代器以
                                          // 保持它有效（参见条款9）
      e.setTitle("Corporate Deity");              // 第四步：修改这个副本
      se.insert(i, e);                            // 第五步：插入新值；提示它的位置
                                          // 和原先元素的一样
  }

3.5 考虑用有序vector代替关联容器 
=================================
   1. 对于多数应用，被认为是常数时间查找的散列容器要好于保证了对数时间查找的set、map和它们的multi同事。
   2. 标准关联容器的典型实现是平衡二叉查找树,
      一个平衡二叉查找树是一个对插入、删除和查找的混合操作优化的数据结构,它比较适合插入、删除和查找都是混合在一起的操作。
      一般来说，没有办法预测对树的下一个操作是什么。
   3. 在实际应用中,有些应该的操作只是两步:1) 建立:插入和删除数据.2) 查找:查找数据.
      一个vector可能比一个关联容器能提供更高的性能（时间和空间上都是）。但不是任意的vector都会，只有有序vector。
   4. 当使用vector来模拟map<K, V>时，保存在vector中数据的类型将是pair<K, V>，而不是pair<const K, V>。
      因为当你对vector排序时，它的元素的值将会通过赋值移动，那意味着pair的两个组件都必须是可赋值的。

3.6 当关乎效率时,应该在map::operator[]和map-insert之间仔细选择 
===============================================================
   1. 对于map操作,当“增加”被执行时，insert比operator[]更高效。
      当我们做更新时，情形正好相反.

3.7 熟悉非标准散列容器 
=======================
   1. 在标准C++库里没有任何散列表
   2. SGI设计的hash_container中一个值得注意的方面是使用equal_to作为默认比较函数。这违背标准关联容器的约定――默认比较函数是less
      对于散列容器来说，这不是一个不合理的决定，因为散列关联容器，不像它们在标准中的（通常基于树）兄弟，不需要保持有序。

4 迭代器 
---------
  现标准STL容器提供了四种不同的迭代器:
  * iterator
  * const_iterator
  * reverse_iterator
  * const_reverse_iterator

4.1 尽量用iterator代替const_iterator,reverse_iterator和const_reverse_iterator 
==============================================================================
   1. 尽量使用iterator取代const或者reverse类型的迭代器的原因为:
      * insert和erase的一些版本要求iterator。
        如果你需要调用这些函数，你就必须产生iterator，而不能用const或reverse iterators。
      * 不可能把const_iterator隐式转换成iterator.
        从一个const_iterator产生一个iterator的技术并不普遍适用，而且不保证高效。
      * 从reverse_iterator转换而来的iterator在转换之后可能需要相应的调整.

4.2 用distance和advance把const_iterator转化为iterator 
======================================================
   1. 使用const_cast无法从const_iterator转化为iterator.
      对于这些容器而言，iterator和const_iterator是完全不同的类.
   2. 如果你得到一个const_iterator并且可以访问它所指向的容器,那么有一种安全的,可移植的方法获取它所对应的iterator
      1) 将iterator指向容器的起始位置.
         Container::iterator itr = container.begin();
      2) 用distance()算出const_iterator离iterator的偏移量.
         Container::difference_type offSet = distance<Container::const_iterator>(itr,constItr); //这里由于distance要求两个iterator类型一致,故需要显式指明distance调用的模板参数类型.
      3) 用advance()把iterator向前移和const_iterator距离容器起始位置的偏移量一样的位置.
         advance(itr,offSet);

4.3 了解如何通过reverse_iterator的base得到iterator 
===================================================
   1. 调用reverse_iterator的base成员函数可以产生"对应的"iterator
      * 要实现在一个reverse_iterator ri指出的位置上插入新元素，在ri.base()指向的位置插入就行了。
        对于insert操作而言，ri和ri.base()是等价的，而且ri.base()真的是ri对应的iterator。 
      * 要实现在一个reverse_iterator ri指出的位置上删除元素，就应该删除ri.base()的前一个元素。
        对于删除操作而言，ri和ri.base()并不等价，而且ri.base()不是ri对应的iterator.
        (++ri).base才是ri对应的iterator。

4.4 需要一个一个字符输入时考虑使用istreambuf_iterator 
======================================================
   1. istream_iterators默认情况不能读取空格.
      因为它是使用operator>>函数来进行真的读取，而且operator>>函数在默认情况下忽略空格
   2. istream_iterators的效率比istreambuf_iterator效率低
      istream_iterator所依靠的operator>>函数进行的是格式化输入,这意味着每次你调用的时候它们都必须做大量工作.

5 算法 
-------

5.1 确保目标区间足够大或者在算法执行时可以增加大小 
===================================================
   1. 在算法中,要往Container中插入新数据,需要使用插入迭代器（比如，从back_inserter、front_inserter或inserter返回的迭代器之一）。
   2. reserve只增加容器的容量:容器的大小仍然没有改变。
      即使调用完reserve，当你想要让容器把新元素加入到vector或string时，你也必须对算法使用插入迭代器.


  vector<int> values;                               // 同上
  vector<int> results;
  ...
  results.reserve(results.size() + values.size());  // 同上
  transform(values.begin(), values.end(),           // 写入transmogrify的结果
            results.end(),                  // 到未初始化的内存
            transmogrify);                  // 行为未定义！
  /*
  在这段代码中，transform愉快地试图对results尾部的原始的、未初始化的内存赋值。
  通常，这会造成运行期错误，因为赋值只在两个对象之间操作时有意义，而不是在一个对象和一块原始的比特之间。
  即使这段代码碰巧作了你想要它做的事情，results也不会知道transform在它的未使用容量上“创造”的新“对象”。
  直到results知道之前，它的大小在调用transform后仍然和原来一样。
  同样的，它的end迭代器仍和调用transform前指向同样的位置。
  结论呢？使用reserve而没有用插入迭代器会在算法内部导致未定义行为，也会弄乱容器。
  */

   3. 但有时候你要覆盖现有容器的元素而不是插入新的。当这种情况时，你不需要插入迭代器，但你仍然需要按照本条款的建议来确保你的目的区间足够大。
      可以使用resize来确保容器中有足够的元素
      *注意:resize和reserve之间的区别*

5.2 选择合适的排序算法 
=======================
   1. partial_sort(itrBeg,itrSortEnd,itrEnd)
      对[itrBeg,itrEnd)之间的元素进行排序,但只有[itrBeg,itrEnd]内的元素处于有序状态.
      适用于从整个序列中抽取最好的前N个元素进行排序
   2. nth_element(itrBeg,itrNth,itrEnd)
      对区间[itrBeg,itrEnd)进行排序,保证itrNth之前的所有元素都小于itrNth,itrNth之后的元素都大于itrNth
      适用于从整个序列中抽取最好的前N个元素,但不用进行排序.
      也可用来找出排在第n位的元素
   3. stable_sort(itrBegin,itrEnd)
      排序时,相等元素的位置不变----此为稳定性
   4. stable_partition/partition(itrBegin,itrEnd,bool判别函数)
      返回一个iterator,在这个itr之前所有判别函数返回true,在itr之后所有的判别函数是false
   5. 唯一我们可能会但不能使用sort、stable_sort、partial_sort或nth_element的容器是list
      但list通过提供sort成员函数做了一些补偿。
   6. 算法sort、stable_sort、partial_sort和nth_element需要随机访问迭代器
      而partition和stable_partition只需要双向迭代器

5.3 如果你真的想删除东西的话,就在类似remove的算法后接上erase 
=============================================================
   1. remove不做什么?
      remove接收指定它操作的元素区间的一对迭代器.它不接收一个容器.
      而唯一从容器中除去一个元素的方法是在那个容器上调用一个成员函数,而且因为remove无法知道它正在操作的容器,所以remove不可能从一个容器中除去元素.
      也就是说从一个容器中remove元素不会改变容器中元素的个数.
   2. remove做了什么?
      remove移动指定区间中的元素直到所有"不删除的"元素在区间的开头(相对位置和原来它们的一样).
      它返回一个指向最后一个"不删除的"元素的迭代器的下一个位置.返回值是区间的"新逻辑终点".
   3. remove与partition的区别
      一般来说，调用完remove后，从区间中删除的值可能是也可能不在区间中继续存在.(返回的迭代器所指的元素及后面的元素无意义了)
      而partition则保留所有的值不丢失

5.4 堤防在指针的容器上使用类似remove的算法 
===========================================
   1. 对指针的容器上使用remove算法,被删除的指针元素会被覆盖但是却不被删除,这就造成资源泄漏.
   2. 对于计数引用的智能指针,可以安全地使用remove算法.

5.5 注意哪个算法需要有序区间 
=============================
   1. 只能操作有序数据的算法表:
      * binary_search
      * lower_bound
      * upper_bound
      * equal_range
      * set_union       
      * set_intersection
      * set_difference
      * set_symmetric_difference
      * merge
      * inplace_merge
      * includes
   2. 下面的算法一般用于有序区间，虽然它们不要求：
      * unique
      * unique_copy
   3. unique从一个区间除去元素的方式和remove一样，也就是说它只是区分出不除去的元素和要删除的数据,而并不能真正进行删除操作.
   4. 注意区间的排序方法和算法的排序方法要保持一致.
      例如binary_search默认为升续排列,就不能用于降续排列的区间中.

5.6 通过mismatch或lexicographical比较实现简单的忽略大小写字符串比较 
====================================================================

5.7 了解copy_if的正确实现 
==========================
   1. 不正确的实现:


  template<typename InputIterator,                          // 一个不很正确的
                    typename OutputIterator,                // copy_if实现
                    typename Predicate>
  OutputIterator copy_if(InputIterator begin,
                            InputIterator end,
                            OutputIterator destBegin, Predicate p)
  {
          return remove_copy_if(begin, end, destBegin, not1(p));
  }

      然而


  not1不能直接应用于一个函数指针，函数指针必须先传给ptr_fun。
  要调用这个copy_if实现，你必须传递的不仅是一个函数对象，而且是一个可适配的函数对象。
  这够简单了，但是想要成为STL算法用户的人应该不必这样。
  标准STL算法从来不要求它们的仿函数是可适配的，copy_if也不应该要求。
  上面的实现是好的，但不够好。

   2. 正确的实现为


  template<typename InputIterator,                          // 一个copy_if的
                    typename OutputIterator,                // 正确实现
                    typename Predicate>
  OutputIterator copy_if(InputIterator begin,
                            InputIterator end,
                            OutputIterator destBegin,
                            Predicate p) {
           while (begin != end) {
                   if (p(*begin))*destBegin++ = *begin;
                   ++begin;
           }
  
           return destBegin;
   }

5.8 用accumulate或for_each来获取自定义的区间统计信息 
=====================================================
   1. accumulate不存在于orithm>。取而代之的是，它和其他三个“数值算法”都在<numeric>中。（那三个其它的算法是inner_product、adjacent_difference和partial_sum。）
   2. accumulate存在两种形式。
      * 带有一对迭代器和初始值的形式可以返回初始值加由迭代器划分出的区间中值的和
      * accumulate的另一种形式，带有一个初始值,迭代器区间与一个任意的统计函数，算法会把初值与一个元素作为统计函数的两个参数,并将结果作为下一个元素的初值,重复调用统计元素直到迭代器结束
   3. accumulate直接返回那些我们想要的统计值，而for_each返回一个函数对象

6 仿函数 
---------

6.1 把仿函数类设计为可被用于值传递 
===================================
   1. 函数对象类似于函数指针,STL的习惯是当传给函数和从函数返回时函数对象是通过值传递的
   2. 如果函数对象是引用传递，有些STL算法的实现甚至不能编译
   3. 因为函数对象以值传递和返回，你的任务就是确保当那么传递(也就是拷贝)时你的函数对象行为良好.这暗示了两个东西:
      * 你的函数对象应该很小,否则它们的拷贝会很昂贵.
      * 你的函数对象必须单态(也就是非多态)――它们不能用虚函数.那是因为派生类对象以值传递代入基类类型的参数会造成切割问题.
   4. 然而多态对于仿函数来说也是很有用处的,另外如果仿函数需要保留的状态太多也必然照成仿函数过大.这时需要一种曲线的方式.
      这时可以带着你要放进你的仿函数类的数据和/或多态，把它们移到另一个类中。然后给你的仿函数一个指向这个新类的指针。
      通过指针指向一个实现类的方式,结果是仿函数类是小而单态的，但可以访问大量状态而且行为多态。
      最重要的东西是使用这种技术的仿函数类必须支持合理方式的拷贝

6.2 用纯函数做判断式 
=====================
   1. 纯函数是返回值只依赖于参数的函数.
   2. STL算法可能会拷贝仿函数,这样可能存在仿函数的多个副本,并且各个副本的状态可能不一致,若仿函数的判断结果与状态有关,则算法产生的结果未知.

6.3 堤防在指针的容器上使用类似remove的算法 
===========================================
   1. 对指针的容器上使用remove算法,被删除的指针元素会被覆盖但是却不被删除,这就造成资源泄漏.
   2. 对于计数引用的智能指针,可以安全地使用remove算法.

6.4 注意哪个算法需要有序区间 
=============================
   1. 只能操作有序数据的算法表:
      * binary_search
      * lower_bound
      * upper_bound
      * equal_range
      * set_union       
      * set_intersection
      * set_difference
      * set_symmetric_difference
      * merge
      * inplace_merge
      * includes
   2. 下面的算法一般用于有序区间，虽然它们不要求：
      * unique
      * unique_copy
   3. unique从一个区间除去元素的方式和remove一样，也就是说它只是区分出不除去的元素和要删除的数据,而并不能真正进行删除操作.
   4. 注意区间的排序方法和算法的排序方法要保持一致.
      例如binary_search默认为升续排列,就不能用于降续排列的区间中.

6.5 通过mismatch或lexicographical比较实现简单的忽略大小写字符串比较 
====================================================================

6.6 了解copy_if的正确实现 
==========================
   1. 不正确的实现:


  template<typename InputIterator,                          // 一个不很正确的
                    typename OutputIterator,                // copy_if实现
                    typename Predicate>
  OutputIterator copy_if(InputIterator begin,
                            InputIterator end,
                            OutputIterator destBegin, Predicate p)
  {
          return remove_copy_if(begin, end, destBegin, not1(p));
  }

      然而


  not1不能直接应用于一个函数指针，函数指针必须先传给ptr_fun。
  要调用这个copy_if实现，你必须传递的不仅是一个函数对象，而且是一个可适配的函数对象。
  这够简单了，但是想要成为STL算法用户的人应该不必这样。
  标准STL算法从来不要求它们的仿函数是可适配的，copy_if也不应该要求。
  上面的实现是好的，但不够好。

   2. 正确的实现为


  template<typename InputIterator,                          // 一个copy_if的
                    typename OutputIterator,                // 正确实现
                    typename Predicate>
  OutputIterator copy_if(InputIterator begin,
                            InputIterator end,
                            OutputIterator destBegin,
                            Predicate p) {
           while (begin != end) {
                   if (p(*begin))*destBegin++ = *begin;
                   ++begin;
           }
  
           return destBegin;
   }

6.7 用accumulate或for_each来获取自定义的区间统计信息 
=====================================================
   1. accumulate不存在于orithm>。取而代之的是，它和其他三个“数值算法”都在<numeric>中。（那三个其它的算法是inner_product、adjacent_difference和partial_sum。）
   2. accumulate存在两种形式。
      * 带有一对迭代器和初始值的形式可以返回初始值加由迭代器划分出的区间中值的和
      * accumulate的另一种形式，带有一个初始值,迭代器区间与一个任意的统计函数，算法会把初值与一个元素作为统计函数的两个参数,并将结果作为下一个元素的初值,重复调用统计元素直到迭代器结束
   3. accumulate直接返回那些我们想要的统计值，而for_each返回一个函数对象

7 使用STL编程 
--------------

7.1 考虑使用函数对象代替函数作为算法的参数 
===========================================
   1. 把STL函数对象――化装成函数的对象――传递给算法所产生的代码一般比传递真的函数高效。
   2. 另一个用函数对象代替函数的原因是它们可以帮助你避免细微的语言陷阱。

7.2 堤防在指针的容器上使用类似remove的算法 
===========================================
   1. 对指针的容器上使用remove算法,被删除的指针元素会被覆盖但是却不被删除,这就造成资源泄漏.
   2. 对于计数引用的智能指针,可以安全地使用remove算法.

7.3 注意哪个算法需要有序区间 
=============================
   1. 只能操作有序数据的算法表:
      * binary_search
      * lower_bound
      * upper_bound
      * equal_range
      * set_union       
      * set_intersection
      * set_difference
      * set_symmetric_difference
      * merge
      * inplace_merge
      * includes
   2. 下面的算法一般用于有序区间，虽然它们不要求：
      * unique
      * unique_copy
   3. unique从一个区间除去元素的方式和remove一样，也就是说它只是区分出不除去的元素和要删除的数据,而并不能真正进行删除操作.
   4. 注意区间的排序方法和算法的排序方法要保持一致.
      例如binary_search默认为升续排列,就不能用于降续排列的区间中.

7.4 通过mismatch或lexicographical比较实现简单的忽略大小写字符串比较 
====================================================================

7.5 了解copy_if的正确实现 
==========================
   1. 不正确的实现:


  template<typename InputIterator,                          // 一个不很正确的
                    typename OutputIterator,                // copy_if实现
                    typename Predicate>
  OutputIterator copy_if(InputIterator begin,
                            InputIterator end,
                            OutputIterator destBegin, Predicate p)
  {
          return remove_copy_if(begin, end, destBegin, not1(p));
  }

      然而


  not1不能直接应用于一个函数指针，函数指针必须先传给ptr_fun。
  要调用这个copy_if实现，你必须传递的不仅是一个函数对象，而且是一个可适配的函数对象。
  这够简单了，但是想要成为STL算法用户的人应该不必这样。
  标准STL算法从来不要求它们的仿函数是可适配的，copy_if也不应该要求。
  上面的实现是好的，但不够好。

   2. 正确的实现为


  template<typename InputIterator,                          // 一个copy_if的
                    typename OutputIterator,                // 正确实现
                    typename Predicate>
  OutputIterator copy_if(InputIterator begin,
                            InputIterator end,
                            OutputIterator destBegin,
                            Predicate p) {
           while (begin != end) {
                   if (p(*begin))*destBegin++ = *begin;
                   ++begin;
           }
  
           return destBegin;
   }

7.6 用accumulate或for_each来获取自定义的区间统计信息 
=====================================================
   1. accumulate不存在于orithm>。取而代之的是，它和其他三个“数值算法”都在<numeric>中。（那三个其它的算法是inner_product、adjacent_difference和partial_sum。）
   2. accumulate存在两种形式。
      * 带有一对迭代器和初始值的形式可以返回初始值加由迭代器划分出的区间中值的和
      * accumulate的另一种形式，带有一个初始值,迭代器区间与一个任意的统计函数，算法会把初值与一个元素作为统计函数的两个参数,并将结果作为下一个元素的初值,重复调用统计元素直到迭代器结束
   3. accumulate直接返回那些我们想要的统计值，而for_each返回一个函数对象
