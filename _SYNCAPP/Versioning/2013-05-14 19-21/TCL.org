* 变量
** 字符串
   1. Tcl要处理的数据只有一种-字符串.TCL将变量值以字符串形式进行存储,不关心它的实际使用类型
   2. 通过$符号,可以引用变量的值
** 引用
   1. upvar命令
      upvar [level]   <otherVar1>  <myVar1>   [<otherVar2> <myVar2> ... ] 
      * upvar命令将 myVar1定义为 otherVar1的一个引用（reference），otherVar是有 level指定的本过程调用栈中的向上 level层的变量。
      * level有两种表示方式。当 level为一个整数值时，表示从当前作用域向全局作用域上溯到level层作用域。level为 1时，代表调用过程作用域.如果 level是一个"#"跟一个整数，则表示从全局作用域向当前作用域下溯。 level为#0，则表示全局作用域
** 数组
   Tcl中的数组类似map的概念,键值可以是任意的字符串
   1. 数组的定义与格式
      * 数组索引是由()来制定的,每个数组元素变量名的格式是"数组名(索引值)".
	数组元素可以象使用普通变量一样来使用.例如也是用set命令来定义和赋值,用info exist来检测是否存在,使用incr来递增,使用lappend来追加列表元素.
	#+BEGIN_SRC tcl
	%set arr(1) 10 
	%incr arr(1) 
	=>11 
	#+END_SRC
	Tcl并没有直接支持多远数组的格式，使用者自己可以定义所谓的多维数组
	#+BEGIN_SRC tcl
	% set arr(0,0) 100 
	% set arr(0,1) 200 
	% parray arr 
	=>   arr(0,0) = 100 
	     arr(0,1) = 200 
	#+END_SRC
      * 将一个已经定义的普通变量当作数组变量使用或者将已定义的数组变量当作普通变量赋值是错误的:
	#+BEGIN_SRC tcl
	% set arr 10              ;#定义了一个普通变量 
	=>10 
	% set arr(a) 5           ;#试图将普通变量当作数组使用时出错 
	=> can't set "arr(a)": variable isn't array 
	% unset arr             ;#取消变量定义 
	% set arr(a)  5          ;#ok 
	=> 5 
	% set arr 10            ;#试图赋值给数组变量时出错 
	=> can't set "arr": variable is array 
	#+END_SRC
      * set <arrName>(<index>) value
	数组元素可以用set命令来定义和赋值
      * unset <arrName>(<index>)
	可以使用unset命令来取消一个数组变量定义
      * array set <arrName> {<index1 value1> <index2 value2>...}
	这个命令在定义数组的同时可以定义其元素和元素值。需要注意元素索引(index-n)与元素值(valun-n)要成对输入，否则会出错。
	用命令 array set arrName “”可以定义一个空数组。 
      * set <val> <$arrName(index)>
	用普通变量值的获取方法——替换操作来获取数组元素值
      * set val $<arrName>($<index>) / set ${<arrName>}(<index>) <val> 
	数组名和数组元素都可以是变量
	#+BEGIN_SRC tcl
	%set name Arr 
	=> Arr 
	%set ${name}("ABC") abc 
	=> abc 
	% puts $Arr("ABC") 
	=> abc 
	% set a "ABC"
	=> ABC
	% puts $Arr($a)
	=> abc
	#+END_SRC
** 特殊变量
   1. 错误变量
      *. errorInfo
	 错误信息
      *. errorCode
	 错误代码
   2. 命令行变量
      * argc
	命令行参数的数目
      * argv0
	脚本名
      * argv
	命令行参数列表
   3. 环境变量数值
      * env
	env是一个数值,包含了所有的全局环境变量
	#+BEGIN_SRC tcl
	puts $env(PATH)      #显示环境变量$PATH的值
	#+END_SRC
* 过程与作用域
** 过程
   1. proc : 过程定义命令
      proc <procName> {<parm1 parm2...>} {
      body
      }
      #+BEGIN_SRC tcl
      % proc Test { a {b 7} {str  "Hello world"} } { 
            puts "$str" 
            return [expr $a * $b ] 
       	} 
       % Test 10            ;#只输入非默认参数 a的值 
       =>Hello world 
           70 
      #+END_SRC
      * 过程的输入参数可以有默认值。默认值由{默认参数名 默认值}指定。
      * 如果参数列表中最后一个参数是 args的话，则过程可以接收可变数目的输入参数。
       	#+BEGIN_SRC tcl
       	%proc vParam {args} {               ;#定义一个只接收可变数目参数的过程。 
	    puts "input values are : $args" 
	 } 
	  
	 % vParam            ;#没有给定任何参数值时 
	 => input values are : 
	 % vParam 1 "Hello" 2 3 "End"        ;#给定一组任意值 
	 => input values are : 1 Hello 2 3 End 
       	#+END_SRC
      * 用户定义的过程可以保存在单独的一个 Tcl文件中，然后用 source命令将此过程调用到脚本中。
      * 在过程中可以用::来直接引用全局变量
	#+BEGIN_SRC tcl
	proc test {} { 
	    puts “The value of global variable var1 is $::var1 
	} 
	 
	% set  var1 20 
	=>20 
	%test 
	=> The value of global variable var1 is 20 
	#+END_SRC
** 作用域
   1. 默认情况下,过程具有全局作用域.
   2. 过程的定义可以嵌套,低层定义的过程只有在上层过程被执行后才能生效.
   3. 在所有过程之外定义的变量为外部变量，即全局变量，它的作用域为从开始定义到执行结束，除非中间有显式取消其定义。
   4. 在一个过程体内定义的变量为内部变量，即局部变量，局部变量的作用域只限于过程内部使用，
   5. 全局变量在过程内部不会自动可见，需要通过 global <global_var>命令来事先声明.
   6. 在过程定义中的输入、输出参数列表中的参数为过程的内部参数。
   7. 全局变量的定义不一定要在过程外完成，可以在任何一个过程中用global完成
   8. 你不能在定义完成一个局部变量后再用 global命令使用同名的全局参数，这会出错。
** 命名空间
   名字空间为命令和变量提供了新的作用域。一个名字空间就是一个变量和命令的集合
   1. 创建命名空间
      namespace eval <spaceName>{
      body
      }
      #+BEGIN_SRC tcl
      namespace eval  Counter { 
          namespace export bump      #出口bump过程,使得改过程可以在命名空间外使用
          variable num 0             #声明num为命名空间的变量 
      
          proc bump {} { 
              variable num 
              retrun [ incr num] 
          } 
      } 
      #+END_SRC
      * 名字空间的定义是动态的，你可以在需要的时候对名字空间的内容进行更改，也同样是使用namespace eval命令.
      * 名字空间可以嵌套，一个被嵌套在父名字空间的名字空间可以与外部隔离的。
   2. 命名空间的定义
      1) 声明/定义命名空间里的变量
	variable name [<value>] [<name value] ... [name value] 
	* 若value没有,则仅为声明变量,需要在后面用set命令算是定义变量,这时候变量才正式被创建.
	* 若没有用variable声明变量为命名空间的变量,则要么使用同名的全局变量,要么自动创建为命名空间变量
      2) namespace export <procName> / namespace import [-force] <procName>
	 * 在名字空间内，可以用命令 namespace export将命令出口,然后在名字空间之外就可以用 namespace import命令将特定名字空间的命令进口。从名字空间进口命令后，该命令就为本级名字空间的一个命令而存在，可不用使用::限定符而直接使用进口命令。
	 * namespace export和namespace import必须相辅相成,即只能import命名空间export的过程
	 * 只能export/import过程,不能export/import变量
	 * 如果要进口相同名字的过程,可以用import -force来强制输入,则原来的命令被覆盖
	 * 只有出口的过程才能出现在索引文件pkgIndex.tcl中
	   #+BEGIN_SRC tcl
	   % namespace eval Counter { 
	           ;#将过程 dump输出 
	          namespace export dump 
	          proc dump {} { 
	            puts "I'm Counter's dump" 
	          } 
	        
	          proc test {} { 
	            puts "I'm Counter's test" 
	          } 
	     variable procList [info proc]     ;#保存本名字空间中的过程列表  
	   } 
	   % namespace import Counter::dump      ;#进口命令 
	   % namespace import Counter::dump      ;#命令已经存在，不能重复进口 
	   => can't import command "dump": already exists 
	   % namespace import -force Counter::dump  ;#强制输入重复名称的过程，本名字 
	   ;#空间原来的过程被覆盖 
	   % namespace import Counter::test         
	   % test               ;#test并没有被输出！只有export的过程才能import! 
	   => invalid command name "test" 
	   % Counter::test            ;#使用::来调用 test 
	   => I'm Counter's test 
	   % dump              ;#dump则可直接调用 
	   => I'm Counter's dump 
	   % set index [lsearch [info proc] dump] 
	   => 5               ;#dump已经为全局过程 
	   % puts $Counter::procList        ;#在 Counter内能“看到”的过程 
	   => test dump 
	   % namespace forget dump       ;#取消命令进口 
	   % set index [lsearch [info command] dump] 
	   => -1             ;#进口命令已经被取消 
	   #+END_SRC
      3) namespace forget <procName>
	 取消指定的进口命令
   3. namespace 的命令汇总
      * namespace origin <命令名/过程名>
	查看命令定义的命名空间
      * namespace current
	返回当前名字空间，全局变量为:: 
      * namespace children [<name>] [<pat>]
	返回本名字空间中嵌套名字空间列表。pat为string match模式，用来限制返回内容 
      * namespace code <script>
      * namespace delete <name> [<name>...]
	删除名字空间的变量和命令
      * namespace eval <namespaceName> <cmd> [<args>...]
	如果名字空间 nameapaceName不存在，则创建之。如果有多个参数，则会象 eval命令那样来处理。 
      * namespace export [- clear] [<pat1>...<patN>]
	将命令添加到输出列表。如果没有指定模式，就返 回输出列表 
      * namespace forget <pat> [<pat> ... ]
	取消名字进口
      * namespace import [-force] <pat> [<pat>...]
	进口命令 
      * namespace inscope <name> <cmd> [<args>...] 
      * namespace origin <cmd>
	返回 cmd的定义/原始名字空间
      * namespace parent [<name>]
	返回父名字空间名
      * namespace qualifiers <name>
	返回 name中最后一个::之前的内容，如::a::b::c中的::a::b 
      * namespace which [<flag>] <name>
	返回 name的全限定路径。-flag为-command、-variable或-namespace中的一个 
      * namespace tail <name>
	返回 name中最后::的组成，如::a::b中的 b
   4. 使用命名空间中的变量和过程
      命名空间::变量名 / 命名空间::过程名
* 操作符
  1. 对于嵌套的$,只进行一次取值操作,这叫做替换操作.例如
     #+BEGIN_SRC tcl
     set foo oo
     set dollar foo
     puts $$dollar             #输出$foo,而不是oo
     #+END_SRC
  2. []完成命令的替换,用[]将一条命令括起来,命令执行完成后,返回结果.例如
     #+BEGIN_SRC tcl
     set c [expr 5 * 10]       #c的值为50
     #+END_SRC
  3. ""和{}都能用来表示字符串,但是""中会发生替换,而{}中不会发生替换.例如
     #+BEGIN_SRC tcl
     %puts stdout "The length of \"$s \"is [string length $s]"  ;# “string length” 命令是计算字符串长度,用反斜杠”\”来引用特殊字符
     =>The length of hello is 5      
     %puts stdout {The length of $s is [string length $s]} 
     =>The length of $s is [string length $s]     ;#替换操作被阻止 
     #+END_SRC
  4. \的作用是引用特殊字符,续行
** 逻辑和数学运算符
   5. -           减
   6. +           加
   7. ~           比特反
   8. !           逻辑非
   9. *           乘
   10. /          除
   11. %          取余
   12. <<         左移
   13. >>         右移
   14. <          小于
   15. <=         小于等于
   16. >          大于
   17. >=         大于等于
   18. ==         等于
   19. !=         不等于
   20. &          比特与
   21. ^          *比特异或*
   22. |          比特或
   23. &&         逻辑与
   24. ||         逻辑或
   25. x?y:z      三重操作符
* Tcl命令
  1. Tcl基本语法
     * command arg1 arg2...
     * 命令可以单独一行,也可以放在同一行,以;分隔
  2. 注释
     *　注释以＃开始
** Tcl命令说明
*** 其他命令
    * puts [-nonewline] [<channelld>] <字符串>
      输出<字符串>到<channelld>
      -nonewline选项告诉puts不输出回车换行
      如果输出一段有空格的文本,需要用""或{}括起来
    * source tcl文件名
      执行tcl文件
    * set <varName> [<value>]
      赋值命令
      set命令也可以只跟变量而无变量值,若变量已经定义,则返回变量值,效果和puts类似.如果变量不存在,则返回错误信息.
    * unset <varname>
      取消变量定义
    * incr <varName> [<step>]
      incr命令根据指定的步长来增加或减少<varName>的值
      #+BEGIN_SRC tcl
      %set a 10 ; incr a  
      =>a=11 
      %set a 10 ; incr a  –1  
      => a=9
      #+END_SRC
    * append <varName> [<value>]
      将value加到varName尾部,从而形成新的字符串
    * format spec value1 value2...
      format和C语言中的printf和sprintf类似,根据spec的说明来格式化字符串,次命令不会改变被操作字符串的内容
    * scan <string> <format> [<var1> <var2> ...]
      scan将string分解为多个var.
      scan的格式描述几乎与format相同,但不用%u格式.%c的作用也和format的相反,是将ASCII转换为整数
      如果scan命令中,没有指定输出变量,则它不返回成功转换个数,而是返回成功转换的结果.例如
      #+BEGIN_SRC tcl
      %set num [scan "abcABC"  "%c%c "  var1 var2] 
      => 2 
      %puts "$var1  $var2" 
      => 97  98 
      % set num [scan  "abcABC"  "%c%c" ] 
      => 97 98   
      %puts $num 
      => 97 98   ;#忘记指定输出变量的结果 
      ;#格式描述说明要扫描小写的a到z区间的连续字符,用到了花括号表明是一个集合 
      % scan "abcABC" {%[a-z]} res   
      => 1 
      % puts $res 
      => abc 
      % scan "ABCabc" {%[A-b]} res 
      => 1 
      % puts $res 
      => ABCab 
      % scan "ABCab" {%[^a-b]} res 
      =>1           ;#匹配非 a到 b的字符 
      % puts $res 
      =>ABC 
      % scan ABCab {%2[^a-b]} res 
      =>1             ;#照样可以指定匹配字符数 
      % puts $res 
      =>AB 
      #+END_SRC
    * binary format <spec> <value1> [<value2>...<valuen>]/ binary scan <str> <spec> <var1> [<var2>...<varn>]
      binary format 就是将数值根据规定模式对 Tcl的普通数据进行二进制压缩
      binary scan作用相反，是从二进制数值恢复 Tcl普通数据
      spec为格式描述字符串。 格式描述模板包含类型关键字和记数值（type  count）两个部分。
      #+BEGIN_EXAMPLE
      类型  说明 
      a    包含 count个字符的字符串。在 binary format中以空字符作为补白 
      A    和 a功能相同，只不过使用空格符而不是空字符作为补白。 
      b    长度为 count的二进制字符串，以 0和 1组成，按照从低到高的 bit位顺序排列 
      B    长度为 count的二进制字符串，以 0和 1组成，按照从高到低的 bit位顺序排列 
      h    长度为 count的十六进制字符串，按照从低到高的字节顺序组成 
      H    长度为 count的十六进制字符串，按照从高到低的字节顺序组成 
      c    一个 8位字符编码。binary scan中会从字符串中将字符转换为对应整数 
      s    字节顺序为 little-endian的 16位整数。count用于指定重复特性 
      S    字节顺序为 big-endian的 16位整数。count用于指定重复特性 
      i    字节顺序为 little-endian的 32位整数。count用于指定重复特性 
      I    字节顺序为 big-endian的 32位整数。count用于指定重复特性 
      f    本机格式的单精度浮点数。count用于指定重复特性 
      d    本机格式的双精度浮点数。count用于指定重复特性 
      x    使用 binary format放置 count个空字节。使用 binary scan 跳过 count个字节 
      X    回退 count个字节 
      @    跳到由 count指定的绝对位置。如果 count为*则跳到末尾 
      #+END_EXAMPLE
      #+BEGIN_SRC tcl
      %set b [binary format "s" 25664]        
      => @d          ;#整数 25664 以十六进制表示为 6440H。 “s”为格式说明 
      ;#符，按照由低到高字节顺序存储。 
      %  puts $b                 ;#数值被压缩为两个字节，输出的结果为两个压缩字节对 
      => @d         ;#应的两个字符，@的 ASCII码为 40H，d的 ASCII码为 64H 
      %  binary scan $b "s"   var 
      => 1          ;#返回转换成功的次数 
      % puts $var                 ;#binary scan 从二进制数 b中将数值恢复并存入变量
      var 
      => 25664 

      % binary scan 1 c var             ;#从字符1中恢复数值。字符1的ASCII 码=31H，31H对应十 
      =>1            ;#进制整数为 49 
      % puts $var 
      => 49 
      ;(1) #获得一个字母对应的整数值 
      % binary scan "abc" "c" var1             
      =>1 
      % puts $var1       
      => 97     ;#字母 a对应的整数值 
      ;(2)#获得字符串中多个字母对应的整数值，并保存到同一列表中或
      % binary scan "abcd" "c3" val 
      =>1         ;#根据模板成功完成一次转换 
      % puts $vala        ;#结果保存到一个变量中，以空格间隔 
      =>97 98 99 
      %binary scan "abcd" "ccc" vala valb valc 
      =>3                                ;#分三次进行，一次一个字符 
      % puts "$vala $valb $valc" 
      => 97 98 99 
      ;#(3)将一个 8位二进制数（0，1组成）转换成对应字符 
      % binary format B8 01001001          ;#十六进制为 49H 
      => I   
      #+END_SRC tcl
      注意：用 binary format压缩的字符串，需要在同一系统上用 binary scan来恢复。不同系统上的 binary字符串可能处理的方式有所不同。 
    * subst <string>
      subst命令在字符串中搜索方括号、美元符号和反斜杠，并对其进行替换操作，而对其他数不做处理。字符串内部的花括号对这种替换操作不阻止。 
      #+BEGIN_SRC
      % subst { a=$a sum=[expr 1 + 2]} 
      => a=foo bar sum=3 
      % subst { a={$a} sum={[expr 1 + 2]}} 
      => a={foo bar} sum={3}  ;#数据内部的花括号不阻止替换 
      #+END_SRC
    * rename <oldFuncName> <newFuncName>
      rename命令可以用来更改命令名，这些命令包括 TCL自带的内建命令和读者自己定义的过程。
      如果新命令名 newFuncName 是空字符串{}，则 rename命令此时的作用是取消一个命令
    * eval <tcl内建命令或过程> [<命令参数1>...<命令参数n>]
      eval命令按照 concat风格将输入参数连接成命令字符串，然后调用 tcl_Eval来完成命令计算和执行。
      如果成功，eval命令就返回被执行命令的返回值，如果命令字符串有错误，则返回错误信息。
    * uplevel [<level>] <command> [<命令参数1>...<命令参数n>]
      uplevel命令和 eval命令相似，不同的一点是，uplevel命令不仅仅可以在当前的过程中计算 TCL命令，而且可以在不同的作用域中计算 TCL命令
      level的含义和eval命令相同
*** string操作
    * string bytelength <str>  
      返回用于存储字符串的字节数。 
    * string compare  [-nocase] [-length <len>] <str1> <str2> 
      根据词典顺序比较字符串。-nocase选项表示大小写无关。-length选项表示只比较指定长度的开头部分字符。如果字符串相同就返回0(str1=str2)，如果str1的顺序比str2靠前就返回-1（str1<str2），其他情况返回1(str1>str2)。 
    * string equal [-nocase] <str1> <str2>
      比较字符串，相同返回1，否则返回0。
    * string first <str1> <str2>  
      返回在str2中str1第一次出现的索引位置，如果没有找到则返回-1
    * string index <str> <index>  
      返回指定位置的字符。index号从0开始。如果index为end则返回最后一个字符。 
    * string is <class> [-strict] [-failindex <varname>] <str> 
      判断字符串的类型，如果是指定类型就返回1。它对于进行参数输入合法性检查非常有效
      如果使用了-strict则表示不匹配空字符，否则总是匹配的。
      如果指定了failindex则将string中非class的字符索引赋给varname变量。详细的字符类见后面的介绍（表 4-7）。 
      #+BEGIN_EXAMPLE
      <class>的参数说明为
      字符类  说明 
      alnum  任何字母或数字字符 
      alpha  任何字母字符 
      ascii  任何具有 7位字符编码的字符（即，小于 128） 
      boolean  0，1，true，false（不分大小写） 
      control  字符编码小于 32而又不是 NULL的字符 
      digit  任何数字字符 
      double  有效浮点数 
      false  0，false（不分大小写） 
      graph  不包含空格字符在内的任何打印字符 
      integer  有效整数 
      lower  全为小写的字符串 
      print  alnum 的同义词 
      punct  任何标点符号 
      space  空格符、制表符、换行符、回车、垂直制表、退格符 
      true  1、true（不分大小写） 
      upper  全为大写的字符串 
      wordchar  字母、数字和下划线 
      xdigit  有效的十六进制数字 
      #+END_EXAMPLE
    * string last <str1> <str2>  
      返回str2在str1最后一次出现的位置索引。没有搜索到就返回-1。
    * string length <str>  
      返回str中的字符个数
    * string map [-nocase] <charMap> <str> 
      返回根据charMap中输入、输出列表将str中的字符进行映射后而产生的新字符串。
      #+BEGIN_SRC tcl
      %string map {f p d l} "food" 
      =>pool 
      输入和输出项可不止一个字符而且不要求长度相同： 
      %string map {f pp d ll oo a} "food" 
      =>ppall 
      #+END_SRC
    * string match <pattern> <str>  
      如果str匹配pattern就返回1，否则返回0。使用的是通配风格的匹配。参见本节的“字符串的匹配”部分。
      string match支持匹配字符集。字符集要用花括号括起来以便 Tcl正确理解方括号内是匹配模式而不是嵌套的命令。另一种方法可将模式放置在一个变量中： 
      #+BEGIN_SRC tcl
      %string match {[ab]*} bell 
      =>1 
      #+END_SRC
      如果需要匹配字符串中的* 和?时，就要在其前面用反斜杠标明： 
      #+BEGIN_SRC tcl
      %string match {*\?} "who are u?" 
      =>1
      #+END_SRC
      这种情况下，要用花括号将模式括起来，否则 Tcl解释器还会进行反斜杠替换（花括号有阻止替换操作的作用），如果不用花括号，就要用两个反斜杠以便 Tcl解释器进行反斜杠替换从而将两个反斜杠替换成一个: 
      #+BEGIN_SRC tcl
      %string match *\a "who a" 
      => 0   ;#”\a”被进行了替换操作（振铃） 
      %string match *\\a "who a" 
      => 1 
      #+END_SRC
    * string range <str> <index1> <index2>
      返回str中从index1到index2之间的字符串。
      替换不改变原来字符串变量的值，只是返回更改后的新字符串
    * string repeat <str> <count>  
      返回将str重复count次的字符串。
    * string replace  <str> <first> <last> [newstr] 
      将从first开始到 last结束的一段字符串替换为newstr字符串。如果newstr 没有，则这部分字符串内容会被删除。 
    * string tolower <str> [first] [last] 
      将指定范围的字符转化为小写格式。
    * string totile <str> [first] [last]
      通过将第一个字符替换为Unicode的标题型字符或大写形式，而其余的替换为小写形式的方法将str转换为开始字母大写形式。可以用参数指定操作范围。 
    * string  toupper <string> [first] [last] 
      将指定范围的字符转化为大写形式。 
    * string trim <str> [chars]
      从str两端删除chars中指定的字符。chars默认为空字符。
    * string trimleft <str> [chars]
      从str开头删除chars中指定的字符。chars默认为空字符。
    * string trimright <str> [chars]
      从str结尾删除chars中指定的字符。chars默认为空字符。
    * string wordend <str> <index>
      返回str中在索引位置index包含字符的单词之后的字符的索引位置。
      string wordstart <str> <index>
      返回str中在索引位置index包含字符的单词中第一个字符的索引位置。 
*** TCL列表操作
    列表是具有特殊解释的字符串,列表可应用在诸如foreach这样的以列表为变元的循环命令中,也应用于构建eval命令的延迟命令字符串
    * list <arg1> <arg2> ...
      创建一个列表.
      一个列表可以包含子列表,即列表可以嵌套
      #+BEGIN_SRC tcl
      % set l1 [list Sun Mon Tues] 
      =>Sun Mon Tues              ;#列表 l1 含有三个元素 
      % set l2 [list $l1 Wed] 
      => {Sun Mon Tues} Wed        ;#列表 l2中含有两个元素。第一个元素用花括号括起来。
      #+END_SRC
   * lindex <list>  <index>
     返回列表 list中的第 index个元素（element）值, 列表索引从0开始计数
   * llength <list>
     计算列表 list元素个数
   * lrange <list> <index1> <index2>
     返回指定范围内（从 index1到 index2）的元素,可以以end或end-<n>作为索引
     #+BEGIN_SRC
     % lrange {1 2 3 {4 5} 6} 2 end 
     => 3 {4 5} 6 
     #+END_SRC
   * lappend <list> <arg1> <arg2> ...
     将新元素追加到原来列表 list后组成新的列表
   * linsert <list> <index> <arg1> <arg2> ...
     将新元素插入到 list中位于 index元素之前的位置上.
     如果索引为 0或者更小，则元素就会被添加到最前面。
     如果索引值大于或者等于列表长度，则元素被追加到列表尾部。
     其他情况元素被添加到指定位置之前
   * lreplace <list> <index1> <index2> <arg1> <arg2> ...
     替换指定范围的元素 
   * lsearch [<mode>] <list> <value>
     根据匹配模式 mode，查找list中与value匹配的元素位置索引。成功就返回正确的元素索引，否则返回-1。
     lsearch支持通配符格式，但可以使用-exact选项将其屏蔽而进行精确匹配。
     mode一般为-exact、-glob和-regexp.默认为-glob。
     #+BEGIN_SRC tcl
     % set l1 [list This  is one list] 
     => This is one list 
     % set index [lsearch $l1 l*] 
     => 3 
     % set index [lsearch -exact $l1 l*] 
     -1 
     % set index [lsearch -exact $l1 list] 
     3 
     #+END_SRC
   * lsort [<switches>] <list>
     lsort命令实现对列表的排序。排序操作不影响原表，而是返回排序之后的新表。 
     排序的方式有多种选择，可以通过-ascii、-dictionary 、–integer、-real来指定基本排序类型，然后使用-increasing、decreasing指定排列方式，默认为-ascii、-increasing 。
     要注意 ASCII排序时使用字符编码；而 dictionary排序方式整合大小写，并将包含的数字以数值大小来处理。 
   * concat <list1> <list2> ...
     连接多个列表内容成一个列表
   * join <list> <joinChars>
     以 joinChars为分隔符将列表中的元素合并在一起
     #+BEGIN_SRC tcl
     %join {1 {2 3} {4 5 6}} : 
     => 1:2 3:4 5 6 
     #+END_SRC
   * split <string> <splitChars>
     以 splitChars中的字符作为分隔符将字符串分解为列表元素。 
     split 的默认分割符为空白符，包括空格符、制表符和换行符。
     如果分割符在字符串开始位置，或者有多个分割符相连，那么 split命令就会产生空列表元素，并用{}表示，分割符并不被合并。 
     若打算将字符串的每个字符都区分开，即将每个字符都分割成列表元素，可以将分割符指定为空字符串{}
*** 数组操作命令
    * array exists <arr>
      判断 arr是否为数组变量，是返回 1
    * array get <arr>  [pattern]
      返回一个包含交替出现索引、元素值的列表。
      pattern选择匹配索引。如果不指定 pattern，返回所有的元素索引和值。 
    * array names  <arr> [pattern]
      返回索引的列表
      pattern选择匹配索引。如果不指定 pattern，返回所有的元素索引。 
    * array  set  <arr> <list>
      初始化数组
    * array  size  <arr>
      数组大小
    * array  startsearch  <arr>
      返回用于 arr进行搜索的搜索标记
    * array  nextelement <arr> <索引标记>
      返回下一个元素值，如果已在尾部的话，返回空串 
    * array donesearch <arr> <索引标记>
      结束有 index标识的搜索
    * parray <arr>
      打印出 arr的所有元素变量名和元素值
*** 正则表达式命令
    * regexp  [<switches>]   <正则表达式exp>  <string>   [<matchvar>]  [<subMatchVar> ...<subMatchVar>]
     * regexp匹配正则表达式与字符串
     * regex命令比较string是否与正则表达式exp匹配,匹配则返回1,否则返回0
     * matchVar保存了匹配exp的字符串,而subMatchVar一次存放了()子模式匹配的子字符串
     * switches的命令开关包括
       #+BEGIN_SRC EXAMPLE
       -nocase    exp中的小写字符可以匹配 string中的大写和小写字符 
       -indices   返回界定 string中匹配区间起始、结束的索引数值。否则返回匹配区间内字符串本身 
       -expanded  使用扩展正则表达式语法 
       -line      等价于同时指定-lineanchor和-linestop 
       -lineanchor  将^和$的行为改为面向行的方式 
       -linestop  将匹配方式改变成和字符类不匹配换行符 
       -about     适用于调试，返回有关模式的信息而不是试图与输入进行匹配 
       -all       让正则表达式在 string中匹配所有的匹配子字符串，返回匹配次数，而且将最后一次匹配结果存入匹配变量 
       -inline    将原来存放在匹配变量中的值以列表的形式返回，如果同时使用了-all，则返回所有满足匹配结果的值的列表。 
       -start <index>  用 index指定 exp在 string中起始匹配位置。如果使用了-indices，返回的索引是从输入字符串 string的绝对起始位置算起而不是从 index指定位置算起 
       --  结束选项，如果表达式以-开始， 则需先用此选项 
       #+END_SRC
    * regsub [switches] <正则表达式exp> <被替换字符串> <替换字符串> <替换后的字符串变量>
      * regsub命令基于正则表达式完成字符串匹配和替换。
*** clock命令
    * clock clicks  [-milliseconds]
      返回有赖于系统的高分辨率整型时间值。可以指定以毫秒为单位。 
    * clock format <clockValue>  [-format <string>]  [-gmt <boolean>] 
      将整型时间值转换为人们可读格式。这个clockValue可能是clock seconds、clock scan或者是带 atime、 mtime或 ctime选项的 file命令返回的时间值。
      format后面的 string给出了具体的格式化格式。
      如果 使用了-gmt选项，则其后跟一布尔型值。如果是true，表明时间值格式化为格林威治标准时间，如果是false，则格式化为本地时区时间。
      #+BEGIN_EXAMPLE
      clock format的域描述符 
      域描述符  说明 
      %%   Insert a %.  
      %a   Abbreviated weekday name (Mon, Tue, etc.).  
      %A   Full weekday name (Monday, Tuesday, etc.).  
      %b   Abbreviated month name (Jan, Feb, etc.).  
      %B   Full month name. 
      %c   Locale specific date and time.  
      %d   Day of month (01 - 31). 
      %I   Hour in 12-hour format (00 - 12). 
      %j   Day of year (001 - 366). 
      %m   Month number (01 - 12). 
      %M   Minute (00 - 59). 
      %p   AM/PM indicator. 
      %S   Seconds (00 - 59). 
      %U   Week of year (00 - 52), Sunday is the first day of the week.  
      %w   Weekday number (Sunday = 0). 
      %W   Week of year (00 - 52), Monday is the first day of the week.  
      %x   Locale specific date format. 
      %X   Locale specific time format. 
      %y   Year without century (00 - 99).  
      %Y   Year with century (e.g. 1990) 
      %Z  Time zone name. 

      clock format特定于 UNIX系统的域描述符 
      %D   Date as %m/%d/%y. 
      %e  Day of month (1 - 31), no leading zeros. 
      %h   Abbreviated month name. 
      %n  Insert a newline.  
      %r  Time as %I:%M:%S %p. 
      %R  Time as %H:%M. 
      %t  Insert a tab. 
      %T  Time as %H:%M:%S.  
      #+END_EXAMPLE

    * clock scan <dateString> [-base <clockVal>] [-gmt boolean] 
      将给定的日期字符串转换为以秒为单位的时钟值（见clock seconds）。
      如果指定-base，则以整型时钟值clockVal为基准来计算.
    * clock seconds
      返回以秒为单位的整型时钟值。
*** info命令
    info命令允许tcl程序从tcl解释器中获得相关当前解释器状态的信息
    * info args <procedure>
      过程 procedure的参数名列表
    * info body <procedure>
      过程 procedure的（执行命令体的）内容
    * info cmdcount  
      已经执行的命令数
    * info commands [<pattern>]
      列出所有命令，或与 pattern匹配的命令。命令包括 Tcl内建命令和过程 
    * info complete <command>
      测试 command是否是一条完整命令，是则返回真
    * info default <proc> <arg> <var>
      测试过程 proc的参数 arg是否有默认值，有则返回 1并将默认值保存到 var 中 
    * info exists <variable>
      测试变量 variable是否存在
    * info globals [<pattern>]
      返回所有全局变量或者与 pattern匹配的全局变量列表
    * info hostname
      返回当前主机名
    * info level
      当前过程调用的层次，全局作用域为 0
      用 info leval命令可以控制带有循环嵌套调用过程的循环层次数。例如
      #+BEGIN_SRC tcl
      proc fact {val} { 
 	  set level [info level] 
 	  puts "Current level: $level  val: $val" 

 	  if {$level == $val} {return $val;}     
 	  set num [expr $val -$level]          ;#将 val的值减去当前 level的值 
 	  return [expr $num * [factorial $val]]    ;#循环调用 
      } 
      #+END_SRC
    * info level <number>
      返回指定层次的命令及其参数的列表
    * info library
      Tcl库目录路径名
    * info loaded [<interp>]
      加载到解释器 interp中的库的列表
    * info locals [<pattern>]
      返回全部局部变量或与 pattern匹配的局部变量列表
    * info nameofexecutable
      返回当前程序文件名（如 wish8.3，tclsh等）
    * info patchlevel
      Tcl 的补丁级别 
    * info procs  [<pattern>]
      返回所有 Tcl过程或与 pattern匹配的过程名列表 
    * info script
      正在处理的脚本名，如一个.tcl文件正在被 source命令
*** trace命令
    trace命令用于变量操作跟踪,它注册一条命令到一个变量,只要这个变量发生指定的变化(读,写,复位)时,注册命令就会被调用来进行相关的处理.
   * trace variable <varName> <operations> <command>
     1. operations为变量操作选项，为下列选项的一个或者多个： 
	-  r   代表只读 
	-  w   代表只写 
	-  u    代表复位或 unset操作 
	   operations 说明当变量发生这些动作时，命令就会被调用。 
     2. command为注册命令，它必须能够接收三个参数（。当变量发生 operations中的某一个动作的时候，command就会执行： 
	command var1 var2 var3 
	其中，var1代表变量名或者数组名。
	var2是数组元素索引，如果跟踪的是普通变量（非数组变量），或者跟踪的数组被设置为复位跟踪且数组已经被复位，则此参数为空。
	var3是跟踪的动作，即满足 options定义的某个选项对应动作。 
	#+BEGIN_SRC tcl
	;# STEP1. Define two trace procedure 
	proc traceP1 {args} { 
	   puts "---Enter proc traceP1---" 
	   puts " There are [llength $args] input variables for trace command" 
	   puts "The input three variables' value are:" 
	   set varName [lindex $args 0] 
	   set index   [lindex $args 1] 
	   set action  [lindex $args 2] 
	   puts " varName: $varName   \n index: $index   \n action:  $action" 
	   puts "---Proc traceP1 end---" 
	 } 
	  
	 proc traceP2 {varName arrIndex  op} { 
	     puts "---Enter proc traceP2---" 
	     switch -exact -- $op { 
	       w  {set option "setted";  } 
	       r  {set option "read"} 
	       u  {set option "unsetted"} 
	 } 
	#+END_SRC
     3.  可以多次调用 trace variable为同一变量注册多条命令，这些命令会在指定条件满足时顺次执行。
   * trace vdelete <varName> <operations> <command>
     删除用 trace variable为变量所作的一条注册命令
   * trace vinfo
     返回变量跟踪设置的信息
     #+BEGIN_SRC tcl
     % trace vinfo a 
     =>{r traceP2} {rwu traceP1} 
     #+END_SRC
*** 文件操作命令
      在 TCL中，所有的数据都以 ASCII字符串形式保存，这意味着当读取一个二进制文件时可能产生不可预料的结果。
    * open <fileName> [<access>] [<permission>] 
      打开文件或者管道，返回文件描述符 fileID 
      #+BEGIN_EXAMPLE
      表 13-2 open命令的 acess变量说明 
      变量值  说明 
      r  打开文件用于只读。文件必须存在 
      r+  打开文件用于读和写。文件必须存在 
      w  打开文件用于只写。文件存在时则覆盖原来的内容，否则先创建文件 
      w+  打开文件用于写和读。文件存在时则覆盖原来的内容，否则先创建文件 
      a  打开文件用于写。新输入数据被追加到文件末尾 
      a+  打开文件用于读和写。新输入数据被追加到文件末尾 
      #+END_EXAMPLE
      #+BEGIN_EXAMPLE
      permission 是一个八进制整数，用于设置文件的访问权限，默认为 rw-rw-rw(0666)。
      #+END_EXAMPLE
      在使用 open命令打开文件的时候，应该使用 catch命令来捕获错误信息。这样会使代码更安全。 当调用成功时，文件描述符被保存到 catch的变量中，否则catch变量保存错误信息。
    * puts [-nonewline] <fileID> <str>
      向文件描述符写入字符串。
    * gets  <fileID> <varName>
      读取一行字符，丢弃行换行符
      对 gets命令，无法区分空行和文件结束 EOF，所以在使用此命令读文件时，需要用 eof命令来判断文件 EOF 
    * close <fileID>
      关闭文件，将缓存的内容 flush出 
    * read [-nonewline] <fileID>
      读取剩余的字节并返回字符串，如果设置了-nonewline，则丢弃最后的换行符 
    * read  <fileID> <numBytes>
      读取 numBytes指定个数的字节，返回字符串
      seek  <fileID> <offset> [<origin>]
      设置读写定位偏移量。如果操作权限是”a”，则不能将写偏移设置到文件结尾之前，但可以将偏移设置到文件开始用于读。
      origin可以是”start”、”current”或”end”。 
    * tell <fileID>
      返回访问指针偏移量（10进制字符串）
    * flush <fileID>
      输出通道缓存中的输出数据
    * eof <fileID>
      检查文件结束。如果返回 1表示到了文件结尾，否则返回 0 
*** 文件系统信息命令
    * glob [<switches>] pattern [...<patternN>]
      返回一个与搜索模式匹配的文件列表,glob支持通配符
      #+BEGIN_EXAMPLE
      switches选项有： 
      -nocomplain   当返回空列表时，glob不报错，不用此选项时，glob会在返回空列表时报错 
      -directory directory在指定的目录中搜索。如 glob –directory e:\masm e1.tcl 
      -path pathVar   在指定路径内搜索。不可以和-directory同时使用。 
      --     结束 switches 
      #+END_EXAMPLE
    * file atime <name>
      返回十进制字符串形式的最后一次访问(access)时间 
    * file attributes <name> [<option>] [<value>] ... 
      查询或设置文件属性 
    * file copy [-force] <source> <destination>
      拷贝文件或目录 
    * file delete [-force] <name>
      删除文件
    * file dirname <name>
      返回文件所在目录
    * file executable <name>
      测试文件可执行属性，可执行返回 1，否则返回 0 
    * file exists <name>
      测试文件是否存在，存在返回 1，否则返回 0 
    * file extension <name>
      返回文件扩展名 
    * file isdirectory <name>
      测试文件是否为目录，是返回 1，否则返回 0
    * file isfile <name>
      如果 name不是目录、符号连接和设备文件的话，返回 1，否则返回 0（测试是否为普通文件） 
    * file join <path> <path> ...
      将路径名的各部分连接起来形成一个新路径 
    * file lstat <name> <var>
      将链接（link）名的属性读入 var 
    * file mkdir <name>
      创建目录 
    * file mtime <name>
      返回文件最后一次修改时间（从 1970年 1月 1日开始到被修改一刻经过的以十进制数表示的秒数） 
    * file nativename <name>
      返回 name的本机平台版本
    * file owned <name>
      测试是否为文件 master，如果是则返回 1，否则返回 0 
    * file  pathtype <name>
      测试路径类别，为 relative、absolute或 driverelative 
    * file readable <name>
      测试文件的可读权限，有则返回 1，否则返回 0
    * file readlink  <name>
      返回通过符号链接指向文件名。如果 name 不是链接标识或者不可读则返回错误。注意和硬链接区别。 
    * file rename [–force] <old> <new>
      更名 
    * file rootname <name>
      返回不带扩展名的文件名 
    * file size <name>
      返回文件字节数
    * file split <name>
      将 name分解成各个路径组成部分
    * file stat <name> <var>
      将文件的属性读出，存入数组 var中。
      #+BEGIN_EXAMPLE
      file stat 命令数组元素 
      元素  说明 
      atime  最后一次访问时间，以秒计算，从 1970年 1月 1日 0时算起 
      ctime  最后一次属性修改时间 
      dev  设备标识符 
      gid  属组 
      ino  文件编号（即 i节点号） 
      mode  权限位 
      mtime  最后一次修改时间 
      nlink  文件链接或目录引用记数 
      size  字节数 
      type  类型：file、directory、characterSpecial、blockSpecial、fifl、link 或
      socket 
      uid  属主的用户 ID 
      #+END_EXAMPLE
    * file tail <name>
      返回最后一个路径组成部分
      file type  <name>
      返回类型标识，有 
      file: 普通文件 
      directory: 目录 
      characterSpecial： 面向字符的设备 
      blockSpecial： 面向块的设备 
      fifo：  有名管道 
      link： 符号链接 
      socket:  有名套接字 
   * file writable  <name>
     如果有可写权限则返回 1，否则返回 0 
*** 程序调用命令
    * open |<command> [<pattern>]
      这里的open和打开文件的命令一样,当文件名变量的第一个字符是|时,open将剩余部分当成是一个程序并用exec运行,而输入,输出被重定向到文件描述符.
      管道可以被子程序打开用于只读,只写或者读写.
      如果一个文件被作为管道打开,这个管道会被缓存,需要只写flushi命令强制传送给子进程
    * exec [<switches> <command>]
      将一个程序作为子进程运行
    * pid [<管道fd]>
      若不接管道fd,则返回当前经常
* tcl函数
** 数学函数
   通过命令expr可以实现对数学表达式的分析与计算:expr 数学函数(参数)
   1. abs(arg)
      取绝对值
   2. acos(arg)
      反余弦
   3. asin(arg)
      反正弦
   4. atan(arg)
      反正切
   5. atan2  
      比值取反正切   
   6. ceil(arg)  
      返回不小于 arg值的整数值
   7. cos(arg)
      余弦
   8. cosh(arg) 
      双曲余弦
   9. double(arg) 
      转换双精度
   10. exp(arg) 
       exp运算（e的幂）
   11. floor(arg)
       向上取整
   12. fmod  
       取余（结果为浮点型）
   13. hypot(x,y) 
       根据直角三角形两直边长度计算出斜边长度 
   14. int(arg) 
       取整
   15. log(arg) 
       自然对数
   16. log10(arg) 
       以十为底的对数
   17. pow  
       幂运算
   18. rand()
       取 0 到 1 之间的随机实数数(无输入参数)
   19. round(arg)
       四舍五入取整数
   20. sin(arg)
   21. sinh(arg)
   22. sqrt(arg)
       求二次根
   23. srand(arg) 
       以整数 arg 为随机数生成器的种子产生随机数
   24. tan(arg)
   25. tanh(arg)
* tcl控制结构命令
  1. if/else命令
     if {<测试表达式>} {
     <body1>
     } elseif {测试表达式}{
     <body2>
     } else {测试表达式} {
     <body3>
     }
     #+BEGIN_SRC tcl
     %set x hello        
     % if {![string compare $x hell]} { 
     puts "String is hell" 
     } elseif ![string compare $x hel] { 
     puts "String is hel" 
     } elseif ![string compare $x hello] { 
     puts "String is hello" 
     } else { puts "Error input string!"} 
     =>String is hello 
     #例子中 if的表达式用花括号括了起来，而 elseif的表达式却没有花括号，这两种表达方法都可以，但用花括号的时候条件命令语句执行得更有效率。 
     #+END_SRC
     * 语法中用以界定过程体的 *花括号一定要和 if命令在同一行上* ！因为对 Tcl来讲，换行符就是命令结束符,但当在一个花括号体内或者一个双引号体内换行的时候，解释器不认为是命令的结束.
     * 如果 if后面还有 else/elseif命令，则要留意 else/elseif的位置。else/elseif要跟在 if执行命令体的后面一个花括号后，不能分行，要有空格间隔花括号和 else /elseif。
     * 花括号括起的表达式、执行命令体或者其他内容相当于变量存在，所以 *前后与其他命令元素之前要有空格* ，否则 Tcl会返回语法错误。
     * 表达式支持变量替换和命令替换.
     * 表达式的计算结果如果是"true","yes"和非零值就判断为真，如果结果是"false","no"和零则判断为假。
  2. for命令
     for {<start语句>} {<测试语句>} {<next语句>} {
     body
     }
     #+BEGIN_SRC tcl
     %for { set i 0 } { $i <10 } { incr i 2 } { 
      if { $i == 4} { 
      continue   ;#如果是 4，则不打印 
     } 
     puts "i =  $i" 
     if {$i >= 6} { 
     break 
     }  
     } 
     =>   i = 0 
     i = 2 
     i = 6 
     #+END_SRC
     * break命令立刻从循环体退出
     * continue忽略后面的循环体内容执行下一个循环
  3. foreach <var> <list> {proc body}
     遍历列表各项，逐次将各元素值存入 var中并执行proc body。相当于一个循环控制语句。
     #+BEGIN_SRC tcl
     set l1 "This is one list"    #list不过是一种特殊格式的string
     %foreach elem $l1 { 
     puts "---$elem---" 
     } 
     => ---This--- 
        ---is--- 
        ---one--- 
        ---list--- 
     #+END_SRC
     foreach 命令还可以同时对多个列表进行操作，而且还可以同时操作同一列表的多个元素。
     如果在最后一次循环之前就遍历完了某个列表，则与之对应的循环变量就会以空字符串来赋值。 
     #+BEGIN_SRC tcl
     foreach {x1 x2} {Orange Blue Red Green Black} x3 {Right Left Up Down} { 
     puts [format "x1=%8s  x2=%8s x3=%8s" $x1 $x2 $x3] 
     } 
     =>   x1=  Orange  x2=      Blue x3=    Right 
          x1=        Red  x2=   Green x3=      Left 
          x1=      Black  x2=             x3=       Up 
          x1=                x2=            x3=    Down 
     #+END_SRC
  4. while命令
     while {测试语句} {
     body
     }
     #+BEGIN_SRC tcl
     % set i 3 
     %while {$i > 0} { 
     puts "Current index is $i." 
     incr i –1 
     } 
     =>    Current index is 3. 
           Current index is 2. 
           Current index is 1. 
     #+END_SRC
  5. switch命令
     switch [option] string { 
     pattern-1 {body1} 
     pattern-2 {body2} 
     ... 
     pattern-n {bodyn} 
     }
     #+BEGIN_SRC tcl
     %set result TRUE 
     %switch -exact -- $result { 
     # Comment1: This comment will confuses  switch command  
     "TRUE"  { 
     # Comment2: This comment is ok 
     puts "TRUE" 
     } 
     "FALSE" {     
     puts "FALSE" 
     } 
     "UNKNOW" - 
     default  { puts "UNKNOW or unkown value"} 
     } 
     =>TRUE 
     #“UNKNOW 和 default处理过程相同。
     #上面的第一个注释语句（Comment1）被 switch当成一个匹配项，匹配内容是”#”，而随后的注释语句会被当成命令体。
     #+END_SRC
     * option主要有:
       -exact   用精确匹配（默认）； 
       -glob    用 glob格式行模式匹配； 
       -regexp  用 正则表达式模式匹配； 
       --       标记选项结束或者说明不用选项。 
     * 如果项邻的两个或者多个 pattern-x的执行命令体是一样的，则可以只写出最后的一个执行命令体，而前面的执行命令体可以省略，并用"-"号来替代.
     * 最后一个option一定是"--",这个选项不可缺少!
     * 可以使用default匹配命令体来处理无法匹配模式。当其他模式都不匹配时，default命令体就会被执行。
     * 对于 switch执行命令体 内的注释一定要小心。Tcl语法器处理的注释应该和命令处于同一层次，即一个注释要占用一个命令的位置。这样就限制了在 switch体内注释的位置。比如你不能将一条注释放在和 pattern-n同一级别的位置，那样 switch命令就会将此条注释也当成一个匹配模式来解释，这有可能引起意想不到的错误。所以，如果打算在switch体内写注释的话，最好将注释放在相应的某个匹配模式的命令体 body-n内。 
  6. catch命令
     catch { <命令体> } [<result>] 
     #+BEGIN_SRC tcl
     % set status [catch { puts "The value of y is $y"} res ] 
     =>1         ;#因为用了未定义的变量 y而出错 
     % if {$status} { 
     puts "Command faild. Error Info: $res" 
     } 
     =>Command faild. Error Info: can't read "y": no such variable 
     
     % proc test {} { 
     return OK 
     } 
     % set status [catch {test} res] 
     => 0 
     % puts $res  ;#catch命令还可以捕获函数返回值 
     => OK 
     #+END_SRC
     * catch会捕获命令体执行时的错误.
     * result用来保存命令正常执行时返回的结果,或是出错时的错误信息
     * 如果有错,catch会返回1,无错则返回0
     * 命令体需要用花括号括起来.
  7. error命令
     error <message_string> [<info>] [<error_code>]
     #+BEGIN_SRC tcl
     #定义一个函数 foo，返回一条错误： 
      proc foo {} { 
      error "1.Function foo report error"  "2.Some error in function foo" 20 
        
      foo          ;#运行 foo函数 
      > 1.Function foo report error 
        catch {foo} str 
      >1          ;#用 catch捕获错误信息，error输出的错误信息被保存在了 str
        
       puts $res 
      > 1.Function foo report error 
       puts $errorInfo         ;#显示 errorInfo内的内容 
      > Some error in function foo 
           (procedure "foo" line 1) 
           invoked from within 
      foo"                               ;#errorInfo 中给出了详细的出错报告，每条执行错误的 
      #命令都会引起 errorInfo的内容被改写 
       puts $errorCode  ;#显示 errorCode的值，为 error报告的 code值 
      > 20 

       puts $a             ;#执行一条错误命令：试图输出一个没有定义变量的值 
      > can't read "a": no such variable  ;#返回的错误信息 
       puts $errorInfo 
      >can't read "a": no such variable 
            while executing 
      puts $a" 
       p uts $errorCode 
      > NONE 
     #+END_SRC
     * message_string是错误信息字符串
     * info变元用于初始化全局变量 errorInfo，如果 info没有提供，则 error自身初始化 errorInfo。
     * 变元 code指定了一个机器可读的错误信息，会被存储在全局变量 errorCode中，默认为 NONE。 
  8. return命令
     return [-code <code选项>] [-errorinfo <info>] [-errorcode <errorcode>] <str>
     * -code的选项值是 ok、error、return、break、continue，也可以是一个整数。默认为 ok 
     * -code error选项使 return命令功能和 error非常相似。此时-errorcode选项设置全局变量errorCode.
     * -errorinfo选项为 errorInfo提供辅助信息。
  9. exit命令
     exit [<代表退出状态的整数数值>]
     * exit命令用来终止脚本的执行。exit会终止并退出整个运行脚本的进程（退出 Tcl shell）,用时要小心。如果在退时提供了一个整数数值，则它代表退出状态。 
* 跟踪与调试命令
* 套接字与事件驱动编程
** 套接字编程
   目前TCl只支持TCP协议的套接字编程
   1. socket [<options>] <host> <port>
      #+BEGIN_EXAMPLE
      Client端 socket命令是“socket ?option? host port”。其中的选项 option可以有如下几个： 
      -  myaddr addr   Addr是客户端的网络主机名或者 IP地址。这个参数对有多个网络接口的客户端比较有用。如果不用这个选项，则客户端的 IP地址就由系统软件决定。 
      -  myport port     Port是客户端用来标识连接的 TCP接口号，如果不指定，则此端口号由系统随机生成。 
      -  -async            此选项表示客户端套接字异步进行连接。这意味着调用 socket命令会立即返回，套接字会被创建但不会立即与 server连接。打开到服务器的连接可能会花费很长时间，如果不用本选项，则 socket在执行的时候会被阻塞直到连接完成或失败。如果使用了本选项则 socket命令不会被阻塞，建立连接的过程会在后台进行。如果 在连接建立之前就进行读写操作，且套接字处于阻塞模式，则操作会被阻塞。 
      #+END_EXAMPLE
   2. socket -server <command> [<options>] <port>
      #+BEGIN_EXAMPLE
      在建立连接通道的时候，会自动调用 command命令，并将三个额外参数传递给
      command:新的通道标识号、客户端主机名或 IP地址、客户端端口号。 
      socket命令成功时返回新通道的标识符。 
      options为额外选项，有： 
         -  myaddr addr   server端的网络主机名或者 IP地址，对有多个网络端口的 server
      比较有用。 
      port 为服务 TCP端口号。 
      #+END_EXAMPLE
      服务器侦听套接字通道不能被用来进行读写操作，它只用来接受新的客户端连接请求。当接收到 client的连接请求时（在 client主机上用 socket命令），server就会给此 client创建新的套接字通道。而这些新的套接字可以进行读写操作。
      当侦听套接字通道被关闭(用 close命令)时，server就不能再接收新的连接请求，但先前已经建立的套接字不受影响。所以要断开与某一客户端的连接，就要单独进行一次关闭与客户端的那条套接字通道.
   3. fconfigure 配置套接字
      fconfigure命令用来设置或查询IO通道的属性
      * fconfigure <channelId>
	显示channelId通道的所有属性
      * fconfigure <channelId> <name>
	显示channelId通道的指定属性
      * fconfigure <channelId> <name> <value> [<name> <value>...] 
	设置channelId通道的属性
	#+BEGIN_EXAMPLE
	fconfigure控制的 I/O通道属性 
	属性  说明 
	-blocking boolen  设置 I/O通道阻塞模式：0为非阻塞，1为阻塞 
	-buffering newValue  设置缓冲模式：none、line或 full。如果是 full，则 I/O将缓冲输出数据直到 buffer变满或者调用 flush输出缓冲数据；如果是 line，则遇到换行符时自动调用 flush输出缓冲数据；如果是 none，则每个输出操作的结果会被立即输出。 
	-buffersize newSize  设置缓冲大小（字节）。newSize为整数，范围为10~100万（字节） 
	-encoding name  字符编码格式。 
	-eofchar   char  特殊输入文件结束符，DOS为 Control-z(\0x1a)，其他为空。 
	-eofchar  {inChar outChar}  同上。对读-写通道，指定双向的文件结束符 
	-translation  mode  行结束符翻译。在 Tcl中，一行的结束总是用\n标识，但对实际的文件和设备，不同的平台可能有不同的行结束标识。mode包含：auto(自动)、lf(换行)、cr(回车)、crlf(回车换行)、 binary(二进制） 
	-translation  {inMode outMode} 同上。适用于读-写双向通道 
	-mode   mode  只适用于串行设备，格式：baud、parity、data、stop 
	-peername  只适用于套接字，远端主机的 IP地址 
	-peerport  只适用于套接字，远端主机的端口号 
	#+END_EXAMPLE
** 事件驱动
   1. after命令
      after命令用来设置在一段时间延迟之后执行的命令.
      * after <ms>
        等待 ms时间。ms单位是 millisecond毫秒，下同。 
      * after <ms> [<script script script ...>]
        将各 script 连接成一条命令并在 ms毫秒后执行。
        连接script 的处理方式同 concat命令，这与 eval命令相同。
        after命令成功后，返回一个标识符，可以供 after cancel使用。
      * after cancel <id>
        将原来安排的延迟执行的命令取消。id为上条 after命令返回的标识符，标识是那个命令要被取消。
        如果此时命令已经在执行，本命令则不起作用。 
      * after cancel <script script script ... >
        这取消原延迟执行命令。 
      * after idle <script script script ...> 
        用空格分割符将各 script 连成一条命令，等下次空闲的时刻执行。
        after命令返回命令标识符。 
      * after info [<id>]
        返回待执行事件的信息。如果没有 id参数，则返回所有命令句柄列表
   2. fileevent命令
      fileevent命令为IO通道注册一条命令,当通道变为可读或可写时执行该命令.
      * fileevent <channelId> readable [<script>] / fileevent <channelId> writable [<script>]
	使用fileevent，服务程序就可以在通道上有数据可读时才调用 gets和 read读取数据，从而避免被阻塞在该通道上。 
	channelId是打开通道的标识符，象前面的 open或 socket命令返回值。
	对于一个 I/O通道，至多有一个可读处理程序和可写处理程序，如果已经用 fileevent命令注册了一个处理程序之后再次注册一个的话，原来的注册程序就会被覆盖。
        如果 fileevent命令中没有 script 参数，则命令返回当前已经注册的命令，若没有注册命令则返回空字符串。
	用 fileevent注册的命令只有在通道关闭的时候才被注销，而没有象 after delete那样的 fileevent命令来显式注销命令，所以及时关闭通道非常重要！
   3. vwait <varName>
      vwait会阻塞程序,直到变量varName被其他事件句柄设置,vwait才返回,程序继续执行.
      这里varName应该是一个全局变量.(否则没法被其他事件句柄设置)
