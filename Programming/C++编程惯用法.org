#+TITLE: C++编程惯用法
#+AUTHOR: DarkSun
#+EMAIL: lujun9972@gmail.com
#+OPTIONS: H3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t

* 类
** 赋值
*** operator=的返回值
    1. 赋值操作符应该返回一个被赋值对象的常量引用
       * 用户可以写出a=b=c这样的代码
       * 用户不能写出(a=b)=c这样的代码
*** 
** 操作符重载：成员或非成员
   1. 如果操作符被实现为一个成员函数，那么我们就无法对第一个（最左边）操作符进行隐式类型转换。
*** 一元操作符
    1. 在可能的情况下，最好将一元操作符实现为成员函数。因为隐式转换会使得代码难以被维护和被理解。
*** = [] () ->
    1. 根据C++语言定义来说。这四种操作符必须被实现为成员函数，实现为非成员的尝试会造成编译期错误。
*** 其他的二元操作符
    1. 对于其他的二元操作符来说，是否将它们实现为成员函数取决于我们是否需要对左操作数进行隐式转换。
    2. 对于赋值类操作符来说（例如+=），我们希望的是禁止对坐操作数进行隐式转换。
    3. 对于那些非赋值类操作符来说，禁止对左操作数进行隐式转换但却允许对右操作数进行隐式转换同样让人困惑。
    4. 当两个操作数都是操作的输入，并且没有一个会受到操作的影响，那么我们最好将该操作符定义为一个非成员函数。这样可以确保在有隐式转换的条件下，这两个操作数都可以以同样的方式来进行操作。
** const
   1. 将某件事声明为const（或者是指向const的指针或者引用）会引起额外的编译器检查，但它不会导致编译器产生额外的代码。
*** 常量参数和常量指针
    1. 将一个未命名的临时对象作为一个非常量指针传递给函数是非法的。
    2. 声明一个指向常量的指针，只能保证数据不会通过指针来改变，而不能保证数据不被改变
*** 常量成员函数
    1. 虽然我们不能传递一个临时变量到非常量引用参数，但我们可以合法地在一个临时对象上调用一个非常量成员函数。
    2. 为了在一个常量成员函数中对数据成员进行修改，我们必须使用类型转换来去除该成员的常良性。在C++中，这样不但合法，而且只要类中带有一个构造函数，它的行为就正确。
** 静态对象的构造
   1. 对于同一个编译单元中出现的静态对象，它们的初始化顺序和它们在代码中出现的顺序是一致的。它们的析构顺序和它们的构造顺序正好相反。
   2. 不同文件中的初始化顺序是未定义的，例如
      #+BEGIN_SRC C++
      extern String default_name;
      String default_src_file(default_name+".");  //我们无法保证default_name会早于default_src_file被创建！！
      #+END_SRC
      对于上面的问题，并没有一个简单的解决方法，如果我们有着一个依赖于定义在（其他文件中静态对象）的静态对象，我们就应该试着将这两个对象放在同一个文件中，如果我们做不到这一点我们就不得不将初始化操作延迟到main函数被执行时才执行它们。
   3. 我们应该避免在一个给定的头文件中初始化对象，因为它会造成每个包含该文件的编译单元都拥有这份初始化代码。
* 句柄
  1. 句柄是一个指向C++对象的类指针，它通常也就是一个普通的指针，也可能是某个C++对象，它用来提供和指针一致的功能。
  2. 句柄的好处有
    * 我们可以在实现中用尺寸大小固定的对象来表示尺寸大小不定的值
    * 我们可以在运行时绑定而不是编译时绑定的方式来处理对象
    * 对于实现的改变通常只会引起一次重新链接而不是重新编译
    * 我们可以对他人隐藏对象的实现
* 继承
** is-a关系
*** 私有、保护以及公有继承
    1. 用户不能隐式地将一个指向派生类的指针转化为指向似有基类的指针
    2. 可以隐式地将一个指向派生类的指针转化为一个指向保护型基类的指针
    3. 我们在派生类中需要重写基类中的虚函数，但又不希望对基类的使用暴露于公用接口中。如果被重写的函数是析构函数是，最简单（也是唯一）的做法就是使用似有继承
** 有关继承的细节和陷阱
*** 没有被继承的东西
    1. 构造函数、析构函数、赋值操作符、和被隐藏的成员函数（与父类函数有相同的名称但参数列表不同的成员函数）不会被子类继承
*** 在构造函数和析构函数中调用虚函数
    1. 当我们在析构函数和构造函数中调用虚函数时，被调用的会是正在被构造的那个基类中的成员函数（当构造函数正在创建派生类中的基类部分时，被构造的对象被视为基类的一个对象）。
    2. 只有在构造和析构的过程中调用虚函数才会导致这种特殊的行为出现。
       其他情况下（即使是再构造函数或析构函数中调用它时，）虚函数的行为是正常的
       #+BEGIN_SRC C++
       Base::Base(){
           debug_print(); //调用Base::debug_print()
	   Base *bp = new Derived;
	   bp->debug_print();  //调用的是Derived::debug_print()
       }
       #+END_SRC
* 多重继承
  1. 指向虚基类的指针转化为指向任意派生类的指针这个做法是合法的。
  2. 当多个基类中都包含同样名字的成员，并且我们在派生类中使用该成员时，编译器会从多个名字中挑选出最合适的那个名字。
     如，当B是D（直接或间接）基类时，D::x在解析过程中就要优于B::x
     如果没有一个名字优先于其他的名字，我们就会得到一个编译期错误。
** 一些有关多重继承的细节问题
*** 基类见的初始化
    1. 在类声明中有关基类出现的顺序决定了如下三件事：
       * 派生类中的基类部分的构造顺序和它们在声明（而不是在构造函数的定义中）中出现的顺序一致（虚基类例外）
       * 派生类中的基类部分将会以它们被构造的顺序相反顺序被析构
       * 该顺序可以对存储空间的布局细节产生影响，但它不应该影响到程序的作用。
    2. 虚基类的初始化顺序
       虚基类的初始化是在最外层的派生类中进行的，若最外层的派生类中没有明确初始化虚基类，则会调用虚基类的缺省构造函数。
       中间的派生类中并不会初始化虚基类。
* 考虑继承的设计
  1. 将一个基类改为虚基类的变化很大：它会对所有继承自它的派生类都产生一个强制要求--在构造函数中明确地初始化它
  2. C++提供了几种不同的机制来允许基类改变整个对象的状态：
     * 基类可以调用在派生类中被重写的虚函数
     * 基类可以声明operator new和operator delete成员函数，当派生类对象被创建和删除时我们会调用到它们。
* 模板
** 一些有关模板的细节
   1. 我们根本没有办法让同一个模板类所产生的实例类相互成为友类。(*这个有待商讨,例如下面的例子*)
      #+BEGIN_SRC C++
      template<class T>
      class f;

      template<class T>
      class friends
      {
      public:
          int getfId(f<T> af)
          {
              return af.id;
          }

      };
      template<class T>
      class f
      {
          friend friends<T>;
          int id;
      public:
          void setId(int i)
          {
              id = i;
          }
      };
      int main()
      {
          f<int> af;
          af.setId(123);
          friends<int> afr;
          cout<<afr.getfId(af);
      }
      #+END_SRC
   2. 版本实例化的过程，根据编译器的不同而不同。
** 模板函数
   1. 对于模板参数来说，不存在隐式的类型转换。
   2. 我们无法在非模板的函数中调用模板函数。
* 重用
** 健壮性
   1. 断言
      * 在assert中，对于可以正确运行的操作来说，其操作数不能有任何的副作用，否则定义NDEBUG会使该副作用被跳过执行
   2. 避免使用固定大小的数组
   3. 为程序提供调试版本
      通过使用调试版本中大量且广泛的检测，我们就可以尽可能早地发现程序中的错误。
   4. Linton法则
      函数中不应该将指向其引用参数的指针保存在函数返回后还可以访问到的地址中。如果需要这么做的话，我们就应该使用指针参数。
      如果我们在调用函数时使用了引用参数，程序员会认为它的值会在函数调用过程中被修改，但若值的改变发生在函数返回之后，这就不可理解了。
** 内存管理
   1. 使用构造函数和析构函数来管理内存
   2. 使用计数器的智能指针
   3. 通过记录所有的指针和对象来实现的垃圾收集机制（类似java的机制）
   4. Arena
      在程序中每个对象都是在arena中创建，在后期，当arena被清空时，所有在arena中的对象都会被删除。
      arena是一个对象，该对象存储了一个作用域内所有新分配的对象指针，该函数的析构函数中，对这些对象进行删除操作。
** 传递参数给operator new
   1. placement语法
      * 通过在紧接者new关键字后使用括号列表，用户可以向operator new传递参数
	void* a = new(parm) A;
      * 这些参数被防止在隐藏的第一个（类型为size_t,用来指示要分配的字节数）参数后。
   2. 
