#+TITLE: ruby中的方法
#+AUTHOR: Administrator
#+OPTIONS: ^:{}

* 方法
Ruby是一种纯粹的面向对象语言，因此可以认为Ruby中没有函数，只有方法。所有看起来没有关联对象的全局方法，Ruby都会隐式地定义为Object对象的私有方法。

定义方法的格式为
#+BEGIN_SRC ruby
  def 方法名(参数列表)
    方法body
  end

  # 括号可以省略

  def 方法名 参数列表
    方法body
  end
#+END_SRC

其中,当把def语句放在一个class语句中时,这些方法成为class语句定义类的成员方法.

当方法名为“对象.方法“时，表示定义的方法，只对指定对象有效。这样定义的方法叫“单键方法”

** TODO 方法名
习惯上方法名以小写字母打头，格式为"xxx_yyy_zzz".

方法名还可以以`=',`?'和`!'结尾。

`='结尾的方法表示这个方法为一个赋值方法,可以运用赋值句法来调用(暂时没看到)

`?'结尾的方法 *一般* 表示该方法用于判断真伪,在Ruby中,出来nil和false外,任何其他值都为真.

`!'结尾的方法 *一般* 表示该方法在调用时必须十分小心. 它通常会改变传入的参数对象的内部状态.

方法名还有可能是某个操作符,例如`+',`-',`*',`/',`[]' . 类似C++中的操作符重载

** 参数列表
参数列表之间的参数，以`,'分隔
*** 普通参数
若某参数的格式为`单独的一个变量名称',则该参数为普通参数,在调用方法时,该参数必须赋实参
*** 可选参数
若某参数的格式为`变量名称=默认值',则该参数为可选参数,当调用方法时,该参数可以不赋实参,这时改变量的值为默认值. 

*这里的默认值不是必须为常量,可以为任意的表达式!*

可选参数的位置 *必须连续在一起*,推荐在所有普通参数后面
*** TODO 可变参数
若某参数的格式为`*变量名',则该参数为可变参数. 可变参数的值一定为一个数组,该数组包含了调用方法时实参列表中的0个到多个的实参.

一个方法定义中的可变参数最多只能有一个. 它必须放在带有默认值参数的后面,其后可以再指定普通参数, _但该普通参数仍然必须放在&打头的参数之前(不是很明白这句话的意思)_
*** TODO 代码块参数（不是很清楚）
代码块参数的格式为`&变量名',这个参数为一个Proc对象,指向传给方法的代码块. 

指向的代码块不能通过yield语句调用,而需要通过Proc对象的call方法来调用
** 方法返回值

默认情况下，方法最后执行的那条语句的返回值为方法的返回值

但也可以使用return语句提前返回一个值。 

需要注意的是，通过return语句，Ruby方法可以返回多值。这些值会被组合成一个数组，并将该数组返回。

返回多值的情况一般与并行赋值相互配合。例如
#+BEGIN_SRC ruby
  def plus_minus(a,b)
    return a+b,a-b
  end

  p,m = plus_minus(2,1)
  # p = 3,m=1
#+END_SRC
* 方法调用

Ruby中方法的调用格式为
#+BEGIN_SRC ruby
  对象.方法(实际参数列表)

  # 也可以省略括号

  对象.方法 实际参数列表          # 当实际参数超过一个时，不推荐这种格式
#+END_SRC

当对象为Object时，可以省略`对象.',即直接使用
#+BEGIN_SRC ruby
  方法(参数列表)
#+END_SRC
** 给方法传递数组参数
在方法定义时,我们可以使用可变参数来将多个实参放入一个数组. 相应的,我们可以将一个数组中的元素拆分开来作为多个实参来调用方法. 格式为
#+BEGIN_SRC ruby
  对象.方法(...,*参数数组,...)
#+END_SRC
* 方法的递归调用
Ruby支持方法的递归调用,即方法body中可以再调用该方法. 例如
#+BEGIN_SRC ruby
  def say_hello count=1
    if count<11
      puts "hello recursion #{count}!"
      return say_hello count+1
    end
  end

  say_hello
#+END_SRC

上面的定义一个名为`say_hello'的全局方法,它带有一个名为`count'的可选参数,该可选参数的默认值为1.
当不带参数调用该`say_hello'方法是,参数`count'值为1,该方法显示输出"hello recursiion "和参数count的值,并使用`count+1'作为实参递归调用`say_hello',直到参数`count'的值到达11为止

* 方法别名

使用alias可以为一个方法指定另一个方法名次。
#+BEGIN_SRC ruby
  alias 别名 原始方法名
#+END_SRC

* 取消方法定义
使用undef可以取消def定义的方法。但不能取消def定义的单键方法。
#+BEGIN_SRC ruby
  undef 方法名
#+END_SRC

但实际应用中，一般不实用undef,更多的情况是使用def语句重新定义个方法。
