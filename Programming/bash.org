#+TITLE: bash
#+AUTHOR: lujun9972
#+TAGS: Programming
#+DATE: [2016-11-28 一 23:06]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

* set
set是shell的一个内部命令,它能处理很多事情.

当没有参数时,set给出环境变量的值.

set还能重置基本参数,如$1,$2的值. 如 =set 1 2= 就将$1设置成1,$2设置成2.

* trap
trap会捕获信号并执行相应的命令序列. 并且trap在执行完相应命令序列后又会回到断点继续执行下面的命令.

trap可以用于保护程序不会由于连接中断造成的挂断信号而中断.
#+BEGIN_SRC sh
  (trap '' 1;long-running-command) &
#+END_SRC

事实上,使用trap能实现我们自己的nohup程序:
#+BEGIN_SRC sh
  trap "" 1 15
  if test -t 2>&1
  then
      echo "Sending output to 'nohup.out'"
      exec nice -5 $* >>nohup.out 2>&1
  else
      exec nice -5 $* 2>&1
  fi
#+END_SRC
* getopts
getopts的使用方法为:
#+BEGIN_SRC sh
  getopts option_string variable [args]
#+END_SRC
+ 其中 =option_string= 中每个字母表示一个选项,选项之前不带 =-=

+ getopts查看所有以连字符开头的参数,将其视为选项,如果输入选项,将把这与option_string对比,如果匹配发现,将 =variable= 的值设置为该选项. 如果不匹配发现,则variable的值为 =?=

  假设有这么一个脚本
  #+BEGIN_SRC sh :exports both :results org
    cat > /tmp/test.sh <<'EOF'
    #!/bin/bash

    HELP=false
    FILE=false

    while getopts hf OPTION
    do
        case $OPTION in
            h)HELP=true
              echo "HELP is $HELP"
              ;;
            f)FILE=true
              echo "FILE is $FILE"
              ;;
            ,*)echo "OPTION is $OPTION"
        esac
    done
    EOF

    chmod +x /tmp/test.sh

    echo "选项分来写"
    /tmp/test.sh -h -f
    echo "选项合并起来写"
    /tmp/test.sh -hf
    echo "未知的选项"
    /tmp/test.sh -h -p
  #+END_SRC

  #+RESULTS:
  #+BEGIN_SRC org
  选项分来写
  HELP is true
  FILE is true
  选项合并起来写
  HELP is true
  FILE is true
  未知的选项
  HELP is true
  OPTION is ?
  #+END_SRC

+ 如果需要为选项指定一个值,那么需要在 =option_string= 中放一个冒号到选项后面. 此时使用变量OPTARG来保存该参数值.

  例如:
  #+BEGIN_SRC sh :exports both :results org
    cat > /tmp/test.sh <<'EOF'
        #!/bin/bash

        HELP=false
        FILE=false

        while getopts hf: OPTION
        do
            case $OPTION in
                h)HELP=true
                  echo "HELP is $HELP"
                  ;;
                f)FILE=$OPTARG
                  echo "FILE is $FILE"
                  ;;
            esac
        done
    EOF

    chmod +x /tmp/test.sh

    echo "选项f必须取值"
    /tmp/test.sh -h -f /etc/passwd
  #+END_SRC

  #+RESULTS:
  #+BEGIN_SRC org
  选项f必须取值
  HELP is true
  FILE is /etc/passwd
  #+END_SRC

+ 若在 =option_string= 中的某选项后加了 =:=,但实际执行时没有给该选项带参数则会返回一个错误信息.

  但是你可以用自己的反馈信息屏蔽它,方法是

  1. 将冒号放在option_string开始部分

  2. 在case中用?作为匹配捕获错误

  例如:
  #+BEGIN_SRC sh :exports both :results org
    cat >/tmp/test.sh <<'EOF'
    while getopts :af: OPTION
    do
        case $OPTION in
            a)echo "a means ALL"
              ;;
            f)echo "FILE is $OPTARG"
              ;;
            ?)echo "Usage: $0 [-a] [-f file]"
               ;;
        esac
    done
    EOF

    chmod +x /tmp/test.sh

    echo "给f带上参数"
    /tmp/test.sh -a -f /etc/passwd

    echo "f不带参数"
    /tmp/test.sh -a -f
  #+END_SRC

  #+RESULTS:
  #+BEGIN_SRC org
  给f带上参数
  a means ALL
  FILE is /etc/passwd
  f不带参数
  a means ALL
  Usage: /tmp/test.sh [-a] [-f file]
  #+END_SRC

* --
对于linux来说, =--= 是一个特殊字符,用于表示选项列表的结束,后面的命令行参数都被认为是普通参数.

* 用exec进行永久重定向 
如果脚本中有大量数据需要重定向,那么重定向每条语句会显得很麻烦. 
这种情况可以用 =exec= 命令告诉shell在命令执行期间重定向某个特定符号描述符.

例如
#+BEGIN_SRC sh
  exec 1>testout                  # 把stdout重定向到testout文件中
  exec 2>testerr                  # 把stderr重定向到testerr文件中
  exec 0<testin                   # 把stdin重定向到testin文件
#+END_SRC

在shell中不仅仅局限于这3个默认的文件描述符.
shell最多可以又9个打开的文件描述符. 其他6个3~8的文件描述符均可用作输入或输出重定向

例如
#+BEGIN_SRC sh
  exec 3>test3                    # 创建一个输出文件描述符
  echo "should be in test3" >&3   # 将stdout重定向到3这个描述符,也就是test3文件中
#+END_SRC

如果要恢复已经重定向的文件描述符,你需要分配另一个文件描述符来保存原文件描述符的指向. 像这样:
#+BEGIN_SRC sh
  exec 3>&1                       # 用文件描述符3指向屏幕
  exec 1>test                     # 将stdout指向test文件
  echo "should be in test"
  exec 1>&3                       # 将stdout又指向屏幕
#+END_SRC

如果需要关闭文件描述符,则将它重定向特殊符号 =&-= 即可
#+BEGIN_SRC sh
  exec 3> test
  echo "should in test" >&3
  exec 3>&-                       # 关闭文件描述符3
  echo "will cause an error" >&3  # 将会提示3 Bad file descriptor
#+END_SRC
* 执行数学运算
** expr命令
expr能够识别少量的数字和字符串操作符.

#+TABLE: expr命令操作符
| 操作符                   | 描述                                                        |
|--------------------------+-------------------------------------------------------------|
| ARG1   \vert ARG2        | 如果ARG1既不是null也不是0,则返回ARG1,否则返回ARG2           |
| ARG1 & ARG2              | 如果没有参数是null或0,返回ARG1,否则返回0                    |
| ARG1 < ARG2              | 如果ARG1小于ARG2,返回1,否则返回0                            |
| ARG1 <= ARG2             | 如果ARG1小于或等于ARG2,返回1,否则返回0                      |
| ARG1 = ARG2              | 如果ARG1等于ARG2,返回1,否则返回0                            |
| ARG1 != ARG2             | 如果ARG1不等于ARG2,返回1,否则返回0                          |
| ARG1 >= ARG2             | 如果ARG1大于等于ARG2,返回1,否则返回0                        |
| ARG1 > ARG2              | 如果ARG1大于ARG2,返回1,否则返回0                            |
| ARG1 + ARG2              | 和运算                                                      |
| ARG1 - ARG2              | 减运算                                                      |
| ARG1 * ARG2              | 乘运算                                                      |
| ARG1 / ARG2              | 除运算                                                      |
| ARG1 % ARG2              | 求余运算                                                    |
| STRING : REGEXP          | 如果REGEXP匹配到了STRING中的某个模式,返回该模式匹配         |
| match STRING REGEP       | 如果REGEXP匹配到了STRING中的某个模式,返回该模式匹配         |
| substr STRING POS LENGTH | 返回起始位置为POS(1开始计算),长度为STRING个字符串的子字符串 |
| index STRING CHARS       | 返回STRING中找到CHARS字符串的位置,否则返回0                 |
| length STRING            | 返回字符串STRING的字符长度                                  |
| + TOKEN                  | 将TOKEN解释成字符串,即使TOKEN为关键字                       |
| (EXPRESSION)             | 返回计算式EXPRESSION的值                                           |
** 使用方括号
在bash中,将一个数学运算结果赋值给某个变量可以使用 =var = $[EXPRESSION]= 来进行.

#+BEGIN_SRC sh :exports both :results org :shebang "#!/bin/bash"
  for op in + - \* /
  do
      echo $[3 ${op} 2]
  done
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
5
1
6
1
#+END_SRC

从上面结果中可以看出, 这种方式只能支持整数运算.
** 浮点运算
最常见的方案是使用bc进行运算. 其基本格式为 =var = $(echo "设置;计算表达式" | bc)=

bc实际上是一种编程语言,它允许在命令行中输入浮点表达式,然后解释并计算该表达式,最后返回结果. bc能识别:
+ 数字,包括整数和浮点数
+ 变量,支持标量和数组
+ 注释,以 =#= 或 =/*...*/=
+ 表达式
+ 流程控制语句
+ 函数

bc浮点运算的的精度由内建变量 =scale= 来决定,其默认值为0.

#+BEGIN_SRC sh :exports both :results org
  echo $(echo "scale=4; 3.15 / 5" |bc)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
.6300
#+END_SRC

* seq
seq可以用来产生一个范围的数字列表. 它有三种用法:
#+BEGIN_SRC sh
  seq [OPTION]... LAST
  seq [OPTION]... FIRST LAST
  seq [OPTION]... FIRST INCREMENT LAST
#+END_SRC

其中常用的OPTION有:

+ -f / --format=FORMAT :: 使用printf风格的浮点式格式字符串
+ -s / --separator=STRING :: 使用STRING作为分隔符,默认为"\n"
+ -w / --equal-width :: 通过在前面添加0的方式,让每个数字等宽.

例如:
#+BEGIN_SRC shell :results org
  echo "results of seq 10 is:"
  echo $(seq 10)

  echo "results of seq 5 10 is:"
  echo $(seq 5 10)

  echo "results of seq 5 2 10 is:"
  echo $(seq 5 2 10)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
results of seq 10 is:
1 2 3 4 5 6 7 8 9 10
results of seq 5 10 is:
5 6 7 8 9 10
results of seq 5 2 10 is:
5 7 9
#+END_SRC

* 变量替换

+ ${var-default} :: 若var没有被 *声明*,则使用default值
+ ${var:-default} :: 若var没有被 *设置*,则使用default值

+ ${var=default} :: 若var没有被 *声明*,则设置var的值为default
+ ${var:=default} :: 若var没有被 *设置*,则设置var的值为default

+ ${var+default} :: 若var被 *声明* 了,则使用default值
+ ${var:+default} :: 若var被 *设置* 了,则使用default值

+ ${var?err_msg} :: 若var被 *声明* 了,则使用var的值,否则打印err_msg错误消息
+ ${var:?err_msg} :: 若var被 *设置* 了,则使用var的值,否则打印err_msg错误消息
