#+LINKS: http://zhuoqiang.me/python-urllib2-usage.html
* Proxy 的设置


urllib2 默认会使用环境变量 http_proxy 来设置 HTTP Proxy。如果想在程序中明确控制 Proxy 而不受环境变量的影响，可以使用下面的方式
#+BEGIN_SRC python
    import urllib2

    enable_proxy = True

    proxy_handler = urllib2.ProxyHandler({"http" : 'http://some-proxy.com:8080'})

    null_proxy_handler = urllib2.ProxyHandler({})

    if enable_proxy:

        opener = urllib2.build_opener(proxy_handler)

    else:

        opener = urllib2.build_opener(null_proxy_handler)

    urllib2.install_opener(opener) 
#+END_SRC

这里要注意的一个细节，使用 urllib2.install_opener() 会设置 urllib2 的全局 opener 。这样后面的使用会很方便，但不能做更细粒度的控制，比如想在程序中使用两个不同的 Proxy 设置等。比较好的做法是不使用 install_opener 去更改全局的设置，而只是直接调用 opener 的 open 方法代替全局的 urlopen 方法。


* Timeout 设置


在老版 Python 中，urllib2 的 API 并没有暴露 Timeout 的设置，要设置 Timeout 值，只能更改 Socket 的全局 Timeout 值。
#+BEGIN_SRC python
    import urllib2

    import socket

    socket.setdefaulttimeout(10) # 10 秒钟后超时

    urllib2.socket.setdefaulttimeout(10) # 另一种方式

#+END_SRC


在 Python 2.6 以后，超时可以通过 urllib2.urlopen() 的 timeout 参数直接设置。
#+BEGIN_SRC python
    import urllib2

    response = urllib2.urlopen('http://www.google.com', timeout=10)

#+END_SRC


* 在 HTTP Request 中加入特定的 Header

要加入 header，需要使用 Request 对象：
#+BEGIN_SRC python
    import urllib2

    request = urllib2.Request(uri)

    request.add_header('User-Agent', 'fake-client')

    response = urllib2.urlopen(request)

#+END_SRC


对有些 header 要特别留意，服务器会针对这些 header 做检查

+ User-Agent :: 有些服务器或 Proxy 会通过该值来判断是否是浏览器发出的请求

+ Content-Type :: 在使用 REST 接口时，服务器会检查该值，用来确定 HTTP Body 中的内容该怎样解析。常见的取值有：

+ application/xml :: 在 XML RPC，如 RESTful/SOAP 调用时使用

+ application/json :: 在 JSON RPC 调用时使用

+ application/x-www-form-urlencoded :: 浏览器提交 Web 表单时使用


在使用服务器提供的 RESTful 或 SOAP 服务时， Content-Type 设置错误会导致服务器拒绝服务


* Redirect

urllib2 默认情况下会针对 HTTP 3XX 返回码自动进行 redirect 动作，无需人工配置。要检测是否发生了 redirect 动作，只要检查一下 Response 的 URL 和 Request 的 URL 是否一致就可以了。
#+BEGIN_SRC python
    import urllib2

    response = urllib2.urlopen('http://www.google.cn')

    redirected = response.geturl() == 'http://www.google.cn'

#+END_SRC


如果不想自动 redirect，除了使用更低层次的 httplib 库之外，还可以自定义 HTTPRedirectHandler 类。
#+BEGIN_SRC python
    import urllib2

    class RedirectHandler(urllib2.HTTPRedirectHandler):

        def http_error_301(self, req, fp, code, msg, headers):

            pass

        def http_error_302(self, req, fp, code, msg, headers):

            pass

    opener = urllib2.build_opener(RedirectHandler)

    opener.open('http://www.google.cn')
#+END_SRC


* Cookie

urllib2 对 Cookie 的处理也是自动的。如果需要得到某个 Cookie 项的值，可以这么做：
#+BEGIN_SRC python
    import urllib2

    import cookielib

     

    cookie = cookielib.CookieJar()

    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))

    response = opener.open('http://www.google.com')

    for item in cookie:

        if item.name == 'some_cookie_item_name':

            print item.value
#+END_SRC


* 使用 HTTP 的 PUT 和 DELETE 方法

urllib2 只支持 HTTP 的 GET 和 POST 方法，如果要使用 HTTP PUT 和 DELETE ，只能使用比较低层的 httplib 库。虽然如此，我们还是能通过下面的方式，使 urllib2 能够发出 PUT 或 DELETE 的请求：
#+BEGIN_SRC python
    import urllib2

    request = urllib2.Request(uri, data=data)

    request.get_method = lambda: 'PUT' # or 'DELETE'

    response = urllib2.urlopen(request)
#+END_SRC



* 得到 HTTP 的返回码

对于 200 OK 来说，只要使用 urlopen 返回的 response 对象的 getcode() 方法就可以得到 HTTP 的返回码。但对其它返回码来说，urlopen 会抛出异常。这时候，就要检查异常对象的 code 属性了：
#+BEGIN_SRC python
    import urllib2

    try:

        response = urllib2.urlopen('http://restrict.web.com')

    except urllib2.HTTPError, e:

        print e.code
#+END_SRC



* Debug Log

使用 urllib2 时，可以通过下面的方法把 debug Log 打开，这样收发包的内容就会在屏幕上打印出来，方便调试，有时可以省去抓包的工作
#+BEGIN_SRC python
    import urllib2

    httpHandler = urllib2.HTTPHandler(debuglevel=1)

    httpsHandler = urllib2.HTTPSHandler(debuglevel=1)

    opener = urllib2.build_opener(httpHandler, httpsHandler)

     

    urllib2.install_opener(opener)

    response = urllib2.urlopen('http://www.google.com')

#+END_SRC


* 借助urllib2抓取网站生成RSS

首先需要安装PyRSS2Gen模块和BeautifulSoup模块,pip安装下就好了,我就不再赘述了.
#+BEGIN_SRC python
    # -*- coding: utf-8 -*-

    from bs4 import BeautifulSoup

    import urllib2

     

    import datetime

    import time

    import PyRSS2Gen

    from email.Utils import formatdate

    import re

    import sys

    import os

    reload(sys)

    sys.setdefaultencoding('utf-8')

     

    class RssSpider():

        def __init__(self):

            self.myrss = PyRSS2Gen.RSS2(title='OSChina',

                                        link='http://my.oschina.net',

                                        description=str(datetime.date.today()),

                                        pubDate=datetime.datetime.now(),

                                        lastBuildDate = datetime.datetime.now(),

                                        items=[]

                                        )

            self.xmlpath=r'/var/www/myrss/oschina.xml'

     

            self.baseurl="http://www.oschina.net/blog"

            #if os.path.isfile(self.xmlpath):

                #os.remove(self.xmlpath)

        def useragent(self,url):

            i_headers = {"User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) \

        AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36", \

        "Referer": 'http://baidu.com/'}

            req = urllib2.Request(url, headers=i_headers)

            html = urllib2.urlopen(req).read()

            return html

        def enterpage(self,url):

            pattern = re.compile(r'\d{4}\S\d{2}\S\d{2}\s\d{2}\S\d{2}')

            rsp=self.useragent(url)

            soup=BeautifulSoup(rsp)

            timespan=soup.find('div',{'class':'BlogStat'})

            timespan=str(timespan).strip().replace('\n','').decode('utf-8')

            match=re.search(r'\d{4}\S\d{2}\S\d{2}\s\d{2}\S\d{2}',timespan)

            timestr=str(datetime.date.today())

            if match:

                timestr=match.group()

                #print timestr

            ititle=soup.title.string

            div=soup.find('div',{'class':'BlogContent'})

            rss=PyRSS2Gen.RSSItem(

                                  title=ititle,

                                  link=url,

                                  description = str(div),

                                  pubDate = timestr

                                  )

     

            return rss

        def getcontent(self):

            rsp=self.useragent(self.baseurl)

            soup=BeautifulSoup(rsp)

            ul=soup.find('div',{'id':'RecentBlogs'})

            for li in ul.findAll('li'):

                div=li.find('div')

                if div is not None:

                    alink=div.find('a')

                    if alink is not None:

                        link=alink.get('href')

                        print link

                        html=self.enterpage(link)

                        self.myrss.items.append(html)

        def SaveRssFile(self,filename):

            finallxml=self.myrss.to_xml(encoding='utf-8')

            file=open(self.xmlpath,'w')

            file.writelines(finallxml)

            file.close()

     

    if __name__=='__main__':

        rssSpider=RssSpider()

        rssSpider.getcontent()

        rssSpider.SaveRssFile('oschina.xml')
#+END_SRC
