#+TITLE: 计算机编程基础补充
#+AUTHOR: lujun9972
#+OPTIONS: ^:{}

* 编程语言

就好像人与人之间需要使用语言来沟通一样,人与计算机之间的沟通,也需要使用语言来沟通,这种语言就是计算机编程语言. 

世间上的语言千奇百怪,有中文,英文,日文,法文,德文...各有各的语法规则. 类似的,编程语言也有好多种,常见的比如汇编,c++,java,ruby,python,lisp等,也是各有各的规则. 

所不同之处在于,人与人沟通的语言是在人们的长期协作使用中慢慢演化出来的,其中包含了大量的非严格遵守语法规则的习惯用法. 而编程语言是人工设计的,有严格的语法规范,而且由于计算机比较笨,我们在与计算机沟通时,必须严格按照它们的语法规范来说,任何一点小偏差,都会让其不明所以.

一般来说,在设计编程语言时都会预先定义一些关键字来作为表述语言规范的骨架,这些预先定义的关键字被称为 *保留字*. 因为这些单词有极其特殊的作用,我们不能随便乱用. 比如ruby语言规范中,`def'就是用来定义函数的,当计算机看到`def'时,它就认为你是想要定义一个函数. 你不能在除定义函数之外的场景中使用`def'这个单词.

* 顺序,选择和循环

在前面说到编程语言时,是说这是人与计算机沟通所使用的语言. 这里名曰"沟通",其实只不过是人单方面的告诉计算机应该如何行动. 即人需要描述一份行动方案给计算机,而计算机则严格按照这份行动方案来执行指令.

总结起来,人在描述一份行动方案时,一般使用以下三种结构就足够了.

** 顺序结构

顺序结构就是告诉计算机,第一步要做什么,第二步要做什么,第三步要做什么,依次类推下去. 在一般情况下,计算机会按照指令显示的顺序一条一条的执行每条指令,即它会先执行写在最前面的指令,执行完后再执行第二条指令,一直下去直至最后一条指令.

例如,下面这份ruby代码就是告诉计算机先输出"hello",再输出"you"
#+BEGIN_SRC ruby
  puts "hello"
  puts "you"
#+END_SRC

** 选择结构

在指定方案时,我们需要根据不同的情况来做出不同的应对措施,这时就要用到选择结构了.

例如,下面的ruby代码就是告诉计算机,如果变量a的值比0大 ,则显示"a是整数";如果a的值等于0,则显示"a为0";否则显示"a为负数"
#+BEGIN_SRC ruby
  a = 2
  if a > 0
    puts "a是正数"
  elsif a == 0
    puts "a为0"
  else
    puts "a为负数"
  end
#+END_SRC

** 循环结构

有时,我们需要告诉计算机重复执行某些动作,这时就需要用到循环结构了. 一般情况下,我们在使用循环结构时都会指定一个退出循环的条件,否则就会陷入死循环了.

例如下面的ruby代码告诉计算机输出1到10的数字
#+BEGIN_SRC ruby
  times = 1
  while times <= 10 do
    puts times
    times = times + 1
  end
#+END_SRC

值得一提的是,循环结构语法不是必须的,对于支持函数迭代的语言来说,可以使用迭代来模拟循环结构

例如下面的ruby代码告诉计算机输出10次"我卡了"
#+BEGIN_SRC ruby
  def puts_times(times,cont)
    if times > 0
      puts cont
      puts_times(times-1,cont)
    end
  end
  puts_times(10,"我卡了")
#+END_SRC

* 函数

上面提到,人类使用编程的目的就让计算机按照一定的行动方案去执行一个个动作. 

但是我们在实际沟通时,常常会把一系列的动作总结成一个抽象层次更高的动作来描述.

举个例子来说:我们想让别人给我做份蛋炒饭,我们不太可能跟别人说"你先把蛋打散,放入料酒和盐.然后放油用大火烧3分钟,再放如蛋和米饭翻炒5分钟,最后把锅里的那玩意拿来给我". 实际上你可能直接就说"给我来份蛋炒饭".
那么这个将"打蛋,放料,翻炒,上盘"的一系列动作总结成"做一份蛋炒饭"这一个动作的过程就是定义一个函数的过程. 其中,蛋,料,油,饭就是函数的输入,蛋炒饭就是这个函数的输出.

* 类与对象

前面说到,通过顺序,选择和循环结构,我们可以描述出我们想让计算机怎样做事情. 通过函数,我们可以将多个底层的步骤抽象成一个高级点的动作. 那么现在还有一个问题就是,我们如何向计算机描述现实中的物体呢?

现实中我们要描述一个东西,常常从两方面来描述:一,它有哪些组件?二,它能干什么. 我们描述一个种类的东西由哪些组件组成时,这些组件我们称为类属性. 我们描述一个种类的东西能干什么时,这些能干的事情我们称为类方法.

比如说,我们要向计算机描述电视是什么东西?我们可以说,这个东西有一个屏幕,一个遥控器,一个电源组成,它能够打开/关闭电视,能够换台,能够调音量. 只要满足这些条件的东西,我们就认为是电视.

那么描述什么东西是电视的过程,就是定义一个名为"电视"的类的过程. 比如用ruby定义一个tv类的代码可能为:
#+BEGIN_SRC ruby
  class TV
    def initialize(screen,controller,power)
      @screen,@controller,@power = screen,controller,power # 一个电视由屏幕,遥控器和电源组成
    end

    def turn_on()                 # 电视具有开机的能力
      puts "接通电源,屏幕开始显示东西"
    end

    def turn_off()                # 电视具有关机的能力
      puts "关闭电源,关闭屏幕显示"
    end

    def change_channel()          # 电视具有换台的能力
      puts "换一个台显示"
    end

    def adjast_volume()           # 电视可以调节音量
      puts "调节音量"
    end
  end
#+END_SRC

了解了类是某一类东西的说明,那么了解对象也就很简单了,所谓对象就是指的具体哪一个物体.

比如说,我们可以指定这是猫头的电视:
#+BEGIN_SRC ruby
  tv_belongs_to_cathead = TV.new("a screen","a controller","a power")
#+END_SRC
