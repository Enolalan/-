#+TITLE: javascript
#+AUTHOR: DarkSun
#+EMAIL: lujun9972@gmail.com
#+OPTIONS: H3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t

* arguments 
  1. 在函数执行时，有个arguments对象，保存所有的参数。此对象类似数组，可以用下标访问，并且有length属性
  2. arguments.callee,表示使用arguments对象的函数
* 函数
** 函数的属性
   1. 函数的length属性，表示函数定义的参数个数
   2. 函数的caller属性，表示调用该函数的函数，如果是最外层的函数，则返回null。
      一般与arguments.callee一起使用：arguments.callee.caller
** 函数闭包
   1. 只要遵循从内往外看的原则，所有看到的变量都能访问
   2. 闭包中所包含的值，为外部函数返回时局部变量的最终值，可以理解为闭包中的值为函数中局部变量值得一个引用。
   3. 每次调用闭包都会产生新的作用域。
   4. 
* 变量
  1. 所有全局变量都是window对象的属性
** 数组
*** 定义
    #+BEGIN_SRC javascript
      var a =[1,2,3];
      var a = new array(1,2,3);
    #+END_SRC
    字符串也是数组
    #+BEGIN_SRC js
      str = "123";
      alert(str[1])                   // 弹出2来
    #+END_SRC
*** 属性
    * length
      该属性既可以获取,也可以设置,设置的值少于原值时,则表示清除多余的数据
      #+BEGIN_SRC js
        var arr=[1,2,3,4,5,6];
        arr.length = 3;                 // 这时arr=[1,2,3]
      #+END_SRC
*** 方法
    * push($var)
      右部添加元素
    * pop()
      右部弹出元素
    * shift()
      左部弹出元素
    * unshift($var)
      左部添加元素
    * splice($start-position,$length[,$var1,$var2,...])
      从$start-position开始的$length个元素被[$var1,$var2...]所替代.
      当$length为0时,则为插入操作,[$var1,$var2...]为空时,则为删除操作.
    * concat($array)
      连接数组
    * join(连接符)
      用连接符连接数组内的内容,并返回字符串
    * sort([比较函数])
      数组排序,默认为按字符串排序,也可以传入比较函数来自定义排序规则.
* 字符串
** 方法
   * toLowerCase()
     转换为小写形式
   * search(子字符串)
     返回子字符串在原字符串中的位置,没有找到则返回-1
   * split(分隔符)
     依据分隔符将字符串分割为数组
* 定时器
  * $timer = setInterval(函数,时间)
    每隔时间个毫秒,执行一次函数,返回一个定时器对象
  * $timer = setTimeout(函数,时间)
    过了时间毫秒后,执行函数,且只执行一次
  * clearInterval($timer)
    关闭指定的定时器
  * clearTimeout($timer)
    关闭指定的定时器
  * ()方法
    定时器刚创建时,不会立刻执行绑定函数,除非显示调用定时器的()方法
    #+BEGIN_SRC js
      var timer = setInterval(xxx,1000);
      timer();                        // 立刻执行
    #+END_SRC
** 使用定时器实现运动框架
   #+BEGIN_SRC js
     startMovie(obj,attr,iTarget)
     {
         if(obj.timer)
         {
             clearInterval(obj.timer);
         }
         obj.timer = setInterval(function () {
             var cur = parseInt(getStyle(obj,attr));
             var speed = (iTarget - cur) /10;
             speed = speed >0?Math.ceil(speed):Math.floor(speed);
             if(cur = iTarget)
             {
                 clearInterval(obj.timer);
             }
             else
             {
                 obj.style[attr] = cur + speed + 'px';
             }
         },30);
     }
     
     // 链式运动框架
     startMovie(obj,attr,iTarget,fnEnd)
     {
         if(obj.timer)
         {
             clearInterval(obj.timer);
         }
         obj.timer = setInterval(function () {
             var cur = parseInt(getStyle(obj,attr));
             var speed = (iTarget - cur) /10;
             speed = speed >0?Math.ceil(speed):Math.floor(speed);
             if(cur = iTarget)
             {
                 clearInterval(obj.timer);
                 if(fnEnd)
                 {
                     fnEnd;
                 }
             }
             else
             {
                 obj.style[attr] = cur + speed + 'px';
             }
         },30);
     }
     
     // 完美运动框架
     startMovie(obj,json,fnEnd)
     {
         if(obj.timer)
         {
             clearInterval(obj.timer);
         }
         obj.timer = setInterval(function () {
             var bStop = true;
             for(var attr in json)
             {
                 var cur = parseInt(getStyle(obj,attr));
                 var speed = (iTarget - cur) /10;
                 speed = speed >0?Math.ceil(speed):Math.floor(speed);
                 if(cur != iTarget)
                 {
                     bStop = false;
                     if(attr == 'opacity')
                     {
                         obj.style.filter='alpha(opacity"'+(cur+speed)+')';
                         obj.style.opacity = (cur+speed)/100;
                     }
                     else
                     {
                         obj.style[attr] = cur + speed + 'px';
                     }
                 }
             }
             if(bStop)
             {
                 clearInterval(obj.timer);
                 if(fnEnd)
                 {
                     fnEnd;
                 }
             }
         },30);
     
   #+END_SRC
* 日期对象
** 创建对象
   #+BEGIN_SRC js
     var oDate = new Date();   
   #+END_SRC
** 属性
** 方法
   * getHours()
     返回小时
   * getMinutes()
     返回分钟数
   * getSeconds()
     返回秒钟数
   * getFullYear()
     返回四位的年份
   * getMonth()
     从0开始算月份
   * getDate()
     返回天数
   * getDay()
     从0开始算,表示周日

     #+BEGIN_SRC md
     

     #+END_SRC
* 元素的位置
  * offsetLeft
    返回元素离外盒最左边的距离,单位为像素,纯数字不带单位.
    它会综合考虑margin,left等属性算出实际的距离. 它也可以是负数
  * offsetRight
  * offsetWidth
  * offsetHeight
* DOM
** 属性
   * childNodes
     子节点,包括元素节点和文本节点
   * children
     只返回子元素节点
   * nodeType
     节点类型:3表示文本节点,1表示元素节点
   * parentNode
     父节点
   * offsetParent
     某元素用来定位的父节点,它根据哪个节点来进行定位.
   * firstChild 
     第一个子节点,可能包括文本节点
   * firstElementChild
     第一个元素节点
   * lastChild
     最后一个元素节点,可能包括文本节点
   * lastElementChild
     最后一个元素节点
   * nextSibling
   * nextElementSibling
   * previousSibling
   * previousElementSibling
   * className
     返回元素节点的class属性值
     #+BEGIN_SRC js
       function getByClass(oParent,sClass)
       {
           aResult = [];
           var aEle = oParent.getElementsByTagName('*'); // 使用*通配符
           for(var i = 0;i<aEle.length;i++)
           {
               if(aEle[i].className = sClass)
                   {
                       aResult.push(aEle[i]);
                       }
           }
       }
     #+END_SRC
   * innerHTML
     内部HTML
*** 表格操作
    * tBodies
      等于table.getElementsByTagName('tbody');
    * rows
      等于tbody.getElementsByTagName('tr');
    * cells
      等于tr.getElementsByTagName('td');
    * tHead
    * tFoot
** 方法
   * setAttribute($attr,$value)
   * getAttribute($attr)
   * removeAttribute($attr)
   * createElement(标签名)
     创建元素节点
   * appendChild(子节点)
     将节点插入子节点列表中,它会先把子节点从原父节点上移除掉!!
   * insertBefore(新子节点,原子节点)
     在原子节点前添加一个新的兄弟子节点
   * removeChild(子节点)
     删除子节点
   * document.oncontextmenu = function
     设置用户点击右键时执行的函数,在函数中用return false;语句来阻止默认行为的弹出右键菜单
     
* 表单
** 事件
   * onsubmit
   * onreset
   * onkeyup
   * onblur
     
* 事件
** event对象
   * 用来获取事件的信息,例如鼠标事件,键盘事件
   * 在IE低版本中,存在一个名为event的对象
     #+BEGIN_SRC js
       window.onload = function()
       {
           alert(event.clientX);
       }
     #+END_SRC
   * 而在FireFox中,event是作为一个参数自动传给事件函数的.
     #+BEGIN_SRC js
       window.onload = function(ev)
       {
           alert(ev.clientX);
       }
     #+END_SRC
   * 事件冒泡
     事件是不断往上级传递的.
** 鼠标事件
   * event.clientX
     鼠标点击位置相对的可视区横坐标
   * event.clientY
     鼠标点击位置相对的可视区纵坐标
     #+BEGIN_SRC js
       document.onmousemove = function(ev)
       {
           var oEvent = ev|event;
           var oDiv = document.getElementById('div1');
           var scrollTop = document.documentElement.scrollTop ||document.scrollTop;
           oDiv.style.left = oEvent.clientX+'px';
           oDiv.style.top = oEvent.clientY+scrollTop+'px';
       }
       
     #+END_SRC
** 键盘事件
   * event.keyCode
     键盘的按键编码
   * ctrlkey属性
     ctrl是否按下
   * shiftkey属性
     shift是否按下
   * altkey属性
     alt是或否按下
** 属性
   * cancelBubble
     true表示停止事件冒泡. False表示不阻止事件冒泡
** 默认行为
*** 何为默认行为
    就是浏览器自带的一些行为,比如按下键盘输入字符,点击右键弹出右键菜单等.
*** 如何阻止默认行为
    在函数中执行return false,即可阻止默认行为.
** 事件绑定
   使用绑定事件对事件多次绑定函数时,不会出现函数被覆盖的情况
*** IE方式
    * attachEvent(事件名,函数)
      #+BEGIN_SRC js
        oBtn.attachEvent('onclick',function(){
            alert('a');
        })
      #+END_SRC
    * detachEvent(事件名,函数)
*** DOM方式
    * addEventListener(不带on的事件名,函数,false)
      #+BEGIN_SRC js
        oBtn.addEventListener('click',function(){ // 注意,这里的事件不带on
            alert('a');
        },false)
              
      #+END_SRC
    * removeEventListener(不带on的事件名,函数,false)
* Ajax
** Ajax的实现
   #+BEGIN_SRC js
     function ajax(url,FnSucc,FnFail)
     {
         // 创建Ajax对象
         if(window.XMLHttpRequest)
         {
             var oAjax = new XMLHttpRequest(); // IE6不支持
         }
         else
         {
             var oAjax = new ActiveXObject("Microsoft.XMLHTTP"); // 只能在IE下用
         }
         // 连接到服务器
         // oAjax.open(方法(GET/POST),文件url,异步标志)
         oAjax.open('GET',url,true);
         // 发送请求
         oAjax.send();
         // 接收返回值
         oAjax.onreadystatechange=function() 
         {
             //oAjax.readyState      // 表明浏览器和服务器进行到哪一步了
             if(oAjax.readyState == "1") // 表明解析完成,客户端可以使用数据了
             {
                 if(oAjax.status == 200) // 表示成功
                 {
                     FnSucc(oAjax.responseText); // responseText属性中存储的是返回的数据
                 }
                 else
                 {
                     if(FnFail)      // 可以没有失败的处理函数
                     {
                         FnFail();
                     }
                 }
             }
         };
     }
   #+END_SRC
** Ajax的使用
   * 注意编码格式
   * 需要阻止缓存
     可以通过不断更改url的方式来解决,例如更改无关参数的值
   * ajax读取出来的文件内容,可以通过javascript的eval函数来执行产生数据,并借用DOM长生动态效果.
* 面向对象
** 工厂模式
   一般在构造函数中存放属性
   #+BEGIN_SRC js
     function CreatePerson(name)
     {
         var obj = new Object();
         obj.name = name;
         obj.say = function(word){
             alert(word);
         }
         return obj;
     }
     
     var p1 = CreatePerson('darksun');
     
     function CreatePerson(name)
     {
         this.name = name;
         this.say = function(word){
             alert(word);
         }
     }
     var p2 = new CreatePerson('darksun'); // 这里new会自动创建空白对象并返回该对象
   #+END_SRC
** prototype(原型,类似于类对象)
   一般用原型构造方法
   #+BEGIN_SRC js
     Array.prototype.say = function()          // 所有Array对象都具有该方法了
     {
         alert(this);
     }
     var a1= new Array(1,2,3);
     a1.say();
     
     
     function CreatePerson(name)
     {
         this.name = name;
     }
     CreatePerson.prototype.say = function(word){
             alert(word);
         }
     var p1= new CreatePerson('darksun');
     
   #+END_SRC
** Json的方式构建对象
   #+BEGIN_SRC js
     var p1 = {
         name:'darksun',
         say: function(words)
         {
             alert(words);
         }
     }
   #+END_SRC
** 继承
   * this方法
     this方法可以改变调用方法的this对象,可以使用这个特性来实现继承对象属性,使用prototype来继承方法
     #+BEGIN_SRC js
       function A(name)
       {
           this.name=name;
       }
       
       function B(name)
       {
           A.call(this,name);          // 调用A()方法,但是里面的this变成了B
       }
       B.prototype=A.prototype;         // 把A的类方法引用给B,注意这里是引用!!,改变B.prototype会同时改变A.prototype
       for(var i in A.prototype)        // 这样才是复制
       {
           B.prototype[i]=A.prototype[i];
       }
       var obj = new B();
     #+END_SRC
* BOM
  * window.open(url,target)
    弹出新页面
  * window.close()
    关闭新页面
  * document.write(htmlContent)
    先清空document,再写内容
  * window.navigator.userAgent属性
    浏览器属性,可以知道是哪个浏览器
  * window.localtion属性
    当前页面的url,当赋值了则会自动跳转到指定url
  * document.documentElement.clientWidth属性
    可视区的宽度
  * document.documentElement.clientHeight属性
    可视区的高度
  * document.body.scrollTop
    仅用于IE和火狐,返回滚动高度
  * document.documentElement.scrollTop
    仅用于chrome,返回滚动高度
  * window.onscroll事件
    移动滚动栏
  * window.onresize事件
    改变窗口大小时
** COOKIE
   * document.cookie
   * 给cookie设置值
     方法为直接为document.cookie设置值,格式为"变量=值[,expires=超期时间]"
     #+BEGIN_SRC js
       document.cookie="user1=darksun";
       document.cookie="user2=darksun"; // 不会覆盖上一条,而是再添加一条
     #+END_SRC
   * 设置cookie的超期事件
     #+BEGIN_SRC js
       var oDate = new Date();
       oDate.setDate(oDate.getDate()+4); // 4天之后过期
       document.cookie="user1=darksun;expires="+oDate;
     #+END_SRC
   * 取cookie的值
     #+BEGIN_SRC js
       function getCookie(name)
       {
           var arr=document.cookie.split(';');
           for(var i = 0 ;i<arr.length;i++)
           {
               var arr2 = arr[i].split['='];
               if(arr2[0] == name)
               {
                   return arr2[1];
               }
                
           }
           return '';
       }
     #+END_SRC
   * 删除cookie
     只要设置cookie中某条记录的过期时间为过去的时间即可
* 正则表达式
** 正则对象
   * JS风格的定义方法
     var reg = new RegExp(正则表达式字符串,标志字符串);
     #+BEGIN_SRC js
       var re = new RegExp('\d','i');
     #+END_SRC
   * Perl风格的定义方法
     var reg = /正则表达式/标志;
     #+BEGIN_SRC js
       var re = /\d/i;
     #+END_SRC
   * re.test(字符串)
     测试字符串是否符合正则的规则,返回true/false
   * str.match(正则对象);
     把所有匹配正则的东西匹配出来
   * str.search(正则对象);
     返回匹配正则的位置
   * str.replace(正则对象,字符串);
     正则替换
