#+TITLE: Google C++编程风格指南
#+AUTHOR: DarkSun
#+EMAIL: lujun9972@gmail.com
#+OPTIONS: H3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t

* 头文件
** #define保护
   1. #define <PROJECT>_<PATH>_<FILE>_H_
** 头文件依赖
   1. 使用前置声明以减少头文件中#include的数量
   2. 在头文件中如何做到使用类Foo而无需访问类的定义？
      * 将数据成员声明为Foo *或Foo&
      * 参数,返回值类型为Foo的函数只是声明但不定义实现
      * 静态数据成员的类型可以声明为Foo,因为静态数据成员的定义在类定义之外.
   3. 如果正在编写的类是Foo的子类,或者含有类型为Foo的非静态数据成员,则必须为之包含头文件.
   4. .cc文件无论如何都需要所使用类的定义部分,自然也就会包含若干头文件.
** 内敛函数
   1. 只有当函数少于等于10行时才会定义为内联函数.
   2. 对于析构函数应慎重对待,析构函数往往比表面看起来要长,因为有一些成员和基类析构函数被调用.
   3. 内联那些包含循环或switch语句的函数是得不偿失的,除非在绝大情况下,这些循环或switch语句从不执行
** -inl.h文件
   1. 复杂的内联函数的定义,应放在后缀为-inl.h的头文件中.
   2. -inl.h 文件还可用于函数模板的定义，从而使得模板定义可读性增强。
** 函数参数顺序
   1. 定义函数时，参数顺序为：输入参数在前，输出参数在后。
   2. 输入参数一般传值或 常数引用(const references),输出参数或输入/输出参数为非常数指针
** 包含文件的名称及次序
   
