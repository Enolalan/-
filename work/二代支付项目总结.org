* 前期选型
  * 不要做第一个试用者

	项目前选型时,一定要问清楚已经有了多少个成功上线的案例. 当第一个试用者往往很容易沦为实验品.

  * 便宜没好货

	价格压得太低的话,为了压低成本,公司很可能只会派一些刚毕业的毫无经验的新人过来开发. 这样子我们其实成为了他们培训新人的场所. 

	若刚好我们又是该产品的第一个试用者,那就麻烦了,你能指望由一堆毫无经验的新人开发出来的试验品能有多高的质量?

  * 优先选择架构简单的产品

	其实就我们所需要的功能来说,根本没有必要把架构设计的多么复杂. 复杂意味着坑多,还记得UNIX的设计原则么?设计要简洁，复杂度能低则低
	
	另外,有的公司很喜欢把产品分成几个模块,然后模块与模块直接通过通讯来实现交互. 模块化有它的好处,但是同时也带来一个问题,那就是模块与模块之间的接口数量增多. 为了处理接口间通讯的异常情况,那个代码可能就会膨胀的让人受不了.

  * 优先选择有开发平台的产品

	手工写代码的效率太慢,而且容易产生BUG. 相对的,选择带有开发平台的产品,则更容易对产品进行维护和功能扩展.

  * 能用多进程的就不要用多线程

	在大多数的情况下,用C++写多线程是个极为纠结的事情,因为它没有一个成熟的多线程库可供使用. 

	另外,有大量的posix函数其实是多线程不安全的([[http://darksun.blog.51cto.com/3874064/1432270][多线程不安全的posix函数 ]]),若一不小心用到了这些系统API,排查问题的时候就知道什么叫痛苦了.

	此外,有些UNIX实现对线程栈的大小有所限制,例如AIX的线程栈最大大小只能是256k. 若一不留神在函数中声明了一个大型的数组,则极易产生栈溢出.

	更不要提由于并发产生的各式各样的问题了,总之,多线程就一个坑,没有经验不要乱用.
* 开发过程
** 乙方人员管理
   * 权限从严

	 乙方人员初来咋到,经常会自觉不自觉地抵触甲方的一些规定. 比如各种复核操作,各种流程审批,对于乙方人员来说很可能因为不适应而直接跳过. 

	 这就要求甲方对乙方人员的权限分配遵守从严的原则. 比如只能给他们数据的查询权限而不能给修改权限.
	 
   * 尽早参与

	 乙方具有很强烈的报喜不报忧的冲动,只有尽早参与到项目中来,实现对项目的尽早控制,才能明白和掌控项目的实际进度.

   * 周期切勿太长

	 周期太长容易找出的一个问题就是中途换人. 不管是甲方还是乙方,若中途换人,则可能存在交接双方衔接不上的问题.

	 此外,周期太长也容易让人产生拖延的心理,丧失积极性.
	 
   * 人员素质是关键

	 一个好的程序员可以写出简洁优美的代码,方便后人维护和修改;一个差的程序员可以挖很多坑,让后人来填.

	 

** 开发规范
   * 指定统一的数据字典

	 对于同一个事务要指定唯一的一个名字,尤其在设计数据库时. 
	 
   * 指定统一的数据格式

	 数据格式混乱,在进行数据比较时很容易发生错误.

   * 测试优先

	 做系统,BUG的存在是无可避免的,而测试是找出BUG的最有效方法. 对于大系统来说,若由业务人员进行手工测试则太过无效率,因此有必要建立一套自动化的回归测试环境. 而科技部门也需要对业务部门提供测试上的帮助,例如帮助他们建立LoadRunner测试案例等等.
	 
   * 版本控制提交的粒度

	 遵照一个缺陷一个版本的提交粒度,方便进行缺陷管理

   * 版本控制注释的写法

	 版本控制的注释需要带有缺陷编号,方便进行缺陷跟踪

** 开发要点
   * 多线程并发问题
   * 数据库死锁问题
   * 超时问题
   * 异常安全问题
