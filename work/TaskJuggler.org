#+TITLE: TaskJuggler
#+AUTHOR: lujun9972
#+OPTIONS: ^:{}

* 基础说明

  Taskjuggler使用一些文本文件来描述一个项目. 这些文件由一个.tjp文件和多个tji文件组成. 其中tjp为主项目文件,在tjp文件中可以include多个tji文件.



* TJP文件的结构
 
  TJP文件为项目的主文件. 每个项目都必须以project header开头. 且project header只能在存在主项目文件中. 所有其他的元素则可以分散到各个tji文件中. 

  project header下面是任意个项目属性的描述,例如accounts,resource,tasks和reports. 且每个project只要要有一个task和一个report.
  
  各项目属性中间没有严格的前后关系,但具体某个属性之间还是有先后关系的,例如若想分配一个resource到某task上,则该resource必须先于该task定义. 因此,推荐的属性排列顺序为:

  1. macros
  2. flags
  3. accounts
  4. shifts
  5. vacations
  6. resources
  7. tasks
  8. accountreports
  9. resourcereports
  10. taskreports
  11. textreports
  12. exports

** project property
   每个TaskJuggler项目文件必须以project property开头. 该property包括项目名称和项目开始/结束日期. 该开始/结束日期不需要特别精确,但只要要能包括近项目中的所有任务. 
   TaskJuggler会使用开始/结束时间间的时间段来规划任务,因此这个时间段必须要能够包含进项目中的所有任务,但是也不要太大了,这样会比较消耗内存,增加规划计算的时间
   #+BEGIN_SRC taskjuggler
   project sms-bank "短信银行" 2015-03-01 +3m {
   }
   #+END_SRC

   所有的Taskjuggler property都有一个唯一的id,一个名称和一系列可选的attribute.  
   其中property的名称是必须有的,而id是可以省略的,TaskJuggler会自动产生一个唯一的id,但这样的话该属性就无法被引用了.
   attribute则被包含在大括号内. 当然,若一个property没有任何attribute,则大括号可以忽略.

   attribute的结构为`keyword argument1...argumentN'. 例如:

   默认TaskJuggler使用的时区是UTC,若向设置自己的时区,则可以使用`timezone' attribute
   #+BEGIN_SRC taskjuggler
   timezone "Europe/Pairs"
   #+END_SRC
   需要注意的是,项目头部的开始/结束时间是在重定义timezone之前设定的,因此这时project的开始/结束时间还是以UTC时区为准的. 但是你可以为项目重新设置一次开始/结束时间
   #+BEGIN_SRC taskjuggler
   project sms-bank "短信银行" 2015-03-01-0:00-+100
   #+END_SRC

   `currency' attribute指定了货币单位
   #+BEGIN_SRC taskjuggler
   currency "CNY"
   #+END_SRC

   `timeformat' attribute指定了报告中的日期格式(并不会影响项目文件中指定date的格式)
   `numberformat'指定了报告中显示数字的格式
   `currencyformat'指定了报告中显示金额的格式
   #+BEGIN_SRC taskjuggler
   timeformat "%Y-%m-%d"
   numberformat "-" "" "," "." 1
   currencyformat "(" ")" "," "." 0
   #+END_SRC
   
   `now' attribute用来设置规划器认为当前日期为另一个时间(默认为调用TaskJuggler的时间).
   还可以使用`now'产生指定日期的项目状态报告
   #+BEGIN_SRC taskjuggler
   now 2015-03-11-13:00
   #+END_SRC
*** scenario

	TaskJuggler可以使用多个场景来比较当某写条件发生变化时，会对我们的计划产生什么影响。
	
   	TaskJuggler中默认就有一个名为`plan'的场景,但我们也可以使用scenario property来创建新的场景. 不同的场景可以继承自同一个公共的场景,每个子场景之间只有些许的不同.
	*需要注意的是,每个场景必须具有相同的任务结构,只是任务的属性可以不同*

   	scenario可以嵌套入另一个scenario.这是子scenario共用父级scenario的属性值,除非子scenario的属性定义了自己的值.
	
	例如我们可以创建三个scenario,一个计划中的场景,一个实际的场景,还有一个用来测试用的场景
   	#+BEGIN_SRC taskjuggler
      project "Example" 2007-05-29 - 2007-07-01 {
        timezone "America/Denver"
        scenario plan "Planned Scenario" {
          scenario actual "Actual Scenario"
          scenario test "Test Scenario" {
            active no
          }
        }
      }
   	#+END_SRC
   	我们定义了三个场景:plan,actual和test. 其中actual和test场景都是plan场景的子场景. 
	这种情况下,所有没有指定所属scenario的attribute都默认属于plan场景. 若想要明确指定某个场景的attribute,则需要在attribute前加上前缀`<场景名>:' 例如:例如`delayed:effort 40d'表示实际项目消耗了40天

	若想临时不对某个场景作规划,可以在该场景中设置`active' attribute为`no',就像上面的"test"场景一样.

   	下面是一个完整的例子
   	#+BEGIN_SRC taskjuggler
   	project acso "Accounting Software"  2002-01-16 +4m {
   	# Set the default time zone for the project. If not specified, UTC
   	# is used.
   	timezone "Europe/Paris"
   	# Hide the clock time. Only show the date.
   	timeformat "%Y-%m-%d"
   	# Use US format for numbers
   	numberformat "-" "" "," "." 1
   	# Use US financial format for currency values. Don't show cents.
   	currencyformat "(" ")" "," "." 0
   	# Pick a day during the project that will be reported as 'today' in
   	# the project reports. If not specified, the current day will be
   	# used, but this will likely be outside of the project range, so it
   	# can't be seen in the reports.
   	now 2002-03-05-13:00
   	# The currency for all money values is the Euro.
   	currency "USD"
   	
   	# We want to compare the baseline scenario to one with a slightly
   	# delayed start.
   	scenario plan "Plan" {
     scenario delayed "Delayed"
     }
   	extend resource {
     text Phone "Phone"
     }
   	}
   	#+END_SRC

** Global Attributes

   TaskJuggler中的Property被设置为能够从外部作用域中继承attribute.

   在project property后,我们处于全局作用域范围内,这里设定的attribute会被接下来的所有property所继承.
   
   例如:
   `rate' attribute可以用来设置资源的每日成本.所有接下来定义的资源都会默认继承这个每日成本,当然也可以为某个特定的资源定义自己的成本价格.
   #+BEGIN_SRC taskjuggler
   rate 390.0
   #+END_SRC

   `leave' attribute可以用来设置全局的假日安排, 所有的资源在假日期间不安排工作. `leave' attribute可以有一个名称,而且必须有一个日期或时间段
   #+BEGIN_SRC taskjuggler
   leaves holiday "Good Friday" 2015-03-13
   #+END_SRC

** Macros

   宏是TaskJuggler用来减少输入工作来那个的一种机制. 类似C语言,TaskJuggler中的宏执行的也仅仅是文本替换

   宏总是带有宏名称和括号内的文本模式. 定义宏的格式为`macro macro-name [xxx]'
   #+BEGIN_SRC taskjuggler
   macro allocate_developers[
     allocate dev1
     allocate dev2
     allocate dev3
   ]
   #+END_SRC

   当要引用宏时,格式为`$(macro-name)'. TaskJuggler就会替代$(macro-name)为文本模式`xxx'
   #+BEGIN_SRC taskjuggler
   $(allocate_developers)
   #+END_SRC
*** 预定义宏
   	| 预定义的宏   | 说明                                                          |
   	|--------------+---------------------------------------------------------------|
   	| projectstart | project的开始日期                                             |
   	| projectend   | project的结束日期                                             |
   	| now          | 当前日期,可以用`now'关键字修改,`timeformat'不会影响到它的格式 |
   	| today        | 类似now,但会根据`timeformat'修改其格式                        |
   	|              |                                                               |
*** 环境变量扩展

	$(VAR)这种语法会扩展为环境变量VAR的实际值
** 定义Flags

   TaskJuggler常用特性之一就是flag. 一旦定义了一个flag,就可以将它与任何property相连(类似tag). 

   当你生成报表时,可以使用flag来过滤不希望展现的property

   定义flag的语法为
   #+BEGIN_SRC taskjuggler
   flags flag-name
   #+END_SRC

   所有的flag在使用前都需要预先定义. 否则会报找不到flag名称的错误

** 定义Account

   资源的使用会需要付出成本. 为了进行成本收益分析,我们需要设置账户记录下成本和收益.

   定义Account的格式为
   #+BEGIN_SRC taskjuggler
   account id name
   #+END_SRC
   这里id可以是由a-z,A-Z,_和0-9组成,其中数字0-9不能作为id的第一个字符. 
   
   例如:
   #+BEGIN_SRC taskjuggler
   account cost "Project Cost"{
     account dev "Development"
     account doc "Documentation"
   }
   account rev "Payments"
   #+END_SRC
   account可以嵌套入另一个account中.

   当你在项目中定义了account后,自少需要定义一个默认的balance, 该`balance' attribute指定了哪些account会被用于成本收益分析报告.
   #+BEGIN_SRC taskjuggler
   balance cost rev
   #+END_SRC

** 定义Resource

   任何一个项目都必须包含资源.

   resource的定义格式为
   #+BEGIN_SRC taskjuggler
     resource id name{
       其他attribute或resource
     }
   #+END_SRC

   例如:
   #+BEGIN_SRC taskjuggler
     resource boss "Paul Henry Bullock" {
       email "phb@crappysoftware.com"
       Phone "x100"
       rate 480
     }
     resource dev "Developers" {
       managers boss
       resource dev1 "Paul Smith" {
         email "paul@crappysoftware.com"
         Phone "x362"
         rate 350.0
       }
       resource dev2 "Sébastien Bono" {
         email "SBono@crappysoftware.com"
         Phone "x234"
       }
       resource dev3 "Klaus Müller" {
         email "Klaus.Mueller@crappysoftware.com"
         Phone "x490"
         leaves annual 2002-02-01 - 2002-02-05
       }
       flags team
     }
     resource misc "The Others" {
       managers boss
       resource test "Peter Murphy" {
         email "murphy@crappysoftware.com"
         Phone "x666"
         limits { dailymax 6.4h }
         rate 310.0
       }
       resource doc "Dim Sung" {
         email "sung@crappysoftware.com"
         Phone "x482"
         rate 300.0
         leaves annual 2002-03-11 - 2002-03-16
       }

       flags team
     }
   #+END_SRC

   类似account,resource也必须有一个id和名称, resource也能够嵌套入另一个resource中.

   通过设置`leaves' attribute,可以设定特定时间段内,指定资源不可用. 
   *需要注意的是* 子property中的leaves attribute并不会覆盖父propery的leaves attribute,相反他们是累加关系. 若想取消父property定义的leaves attribute,需要使用`purge' attribute
   leaves attribute后接一个时间段.

   通过设置`limits' attribute,可以现在资源每日的使用时间.

   *需要注意的是*,我们在定义了team resource的sub-resource后添加了`flags team'. 这种情况下,这些flag并不会对sub-resource所生效.
   
   但若在定义sub-resource之前就定义了flag,则该flag会对sub-resource也生效.

   可以为人力资源分配`email' attribute,当Taskjuggler需要发送email联系相关人员时,会通过该attribute中抽取出email地址
** 时间段说明
   TaskJuggler的时间段表示格式为
   #+BEGIN_SRC taskjuggler
     <date1> (- <date2> | + <duration> (min | h | d | w | m | y)) 
   #+END_SRC
   
   这里的date可以包括日期和时间,若省略时间则默认为0:0:0,且该时间段并不包括date2

** 定义task

   task的定义语法为
   #+BEGIN_SRC taskjuggler
     task id name{
         sub-task或其他属性
     }
   #+END_SRC

   例如
   #+BEGIN_SRC taskjuggler
     task sms-bank "短信银行" {
         task spec "Specification" {
             effort 20d
             ${allocate_developers}
             depends !deliveries.start
         }
         task software "Software Development" {
         }
         task test "Software testing" {
         }
         task manual "Manual" {
             journalentry 2002-02-28 "User manual completed" {
                 author boss
                 summary "The doc writers did a really great job to finish on time."
             }
         }
         task deliveries "Milestones" {
         }
     }

     task software "Software Development" {
         priority 1000
         task database "Database coupling" {
             journalentry 2002-02-03 "Problems with the SQL Libary" {
                 author dev1
                 alert yellow
                 summary -8<-
                 We ran into some compatibility problems with the SQL
                 Library.
                 ->8-
                 details -8<-
                 We have already contacted the vendor and are now waiting for
                 their advise.
                 ->8-
             }
         }
         task gui "Graphical User Interface" {
         }
         task backend "Back-End Functions" {
         }
     }

     task gui "Graphical User Interface" {
         effort 35d
         delayed:effort 40d
         depends !database, !backend
         allocate dev2, dev3
         # Resource dev2 should only work 6 hours per day on this task.
         limits {
             dailymax 6h {
                 resources dev2
             }
         }
     }

   #+END_SRC
   
   *不同TaskJuggler property都有各种的命名空间*. 因此resource和task使用同一个id是可行的.

   *task的id不同于其他property的id,它会自动继承父task的id作为前缀*. 因此"Software Development"的完整id应该为sms-bank.software.
   但taskid还可以写成相对id的形式: 相对id以一个或多个惊叹号开头. Each exclamation mark moves the scope to the next enclosing task. 因此这里`!deliveries.start'换成完整id就是`Acso.deliveries.start'
   
   `effor' attribute定义了要完成该task需要花费的人天数. 既然单位是人天数,就意味着我们必须为该任务分配人员. 
   若給该task分配的资源时间不够长,该任务无法完成.( The task won't finish before the resources could be allocated long enough to reach the specified effort)
   默认情况下,TaskJuggler认为一天工作8个小时,但是可以通过`dailyworkinghours'属性修改.

   除了`effort' attribute,`length' attribute和`duration' attribute也能用来表示该task需要花费的时间.
   `length'与`duration'的不同之处在于`length'表示任务的工作天数,而`duration'表示任务的日历天数(包括非工作日期).
   当使用`length'或`duration'时,就无需指定給该task所分配的资源.

   对任一task来说,只能使用`effor',`length'或`duration'其中之一来定义任务的时长. 
   *对于Container task来说,不应该分配时长* 它的时长应该根据它的sub-task来自动计算出来.

   `allocate' attribute用于为task分配资源,其格式为
   #+BEGIN_SRC taskjuggler
     allocate resource-id
   #+END_SRC

   `depends' attribute指定了两个task之间的关系. 其格式为
   #+BEGIN_SRC taskjuggler
     depends taskid1,taskid2...taskidN
   #+END_SRC
   这里taskid可以是完整的taskid或相对的taskid

   `priority' attribute用来标示task的重要程度. 重要程度的从不重要到最重要为1到1000. 
   若在task中,sub-task前定义了`priority' attribute,则所有的sub-task会继承该attribute

   gui task中的`limits' attribute说明资源dev2每天只花6个小时到gui这个task上.
   
   若不想像`limits'那样严格进行约束,可以使用`warn'代替,它不会严格约束资源的使用,但会提出警告

   gui task中的`delayed:effort 40d'说明虽然plan scenario中该task的effort为35d,但实际上delayed scenario中的task的effort为40d,即实际比原计划拖延了5天.

   `complete' attribute可以指定task的完成情况. 例如
   #+BEGIN_SRC taskjuggler
     task backend "Back-End Functions" {
         effort 30d
         complete 95
         depends !database
         allocate dev1, dev2
     }
   #+END_SRC
   
   实施一项task的花费需要记到某个account中,这时需要用到`chargeset' attribute. 其语法为:
   #+BEGIN_SRC taskjuggler
   chargeset account-id
   #+END_SRC
   
   若一项task的花费不仅仅包括资源成本,则还可以使用`charge' attribute修改task的花费. 例如
   #+BEGIN_SRC taskjuggler
     task AcSo "Accounting Software" {
         chargeset dev
         charge 170 perday
         task manual "Manual" {
             effort 10w
             depends !deliveries.start
             allocate doc, dev3
             purge chargeset         # 废除之前的chargeset安排
             chargeset doc
             journalentry 2002-02-28 "User manual completed" {
                 author boss
                 summary "The doc writers did a really great job to finish on time."
             }
         }
     }
   #+END_SRC
   其中,`charge' attribute的第二个参数`perday'表示每天的消耗, 可以用`onstart'表示一次性的固定消耗

** 定义milestone
   
   所谓milestone就是没有定义时长的task
   #+BEGIN_SRC taskjuggler
     task deliveries "Milestones" {
         purge chargeset
         chargeset rev

         task start "Project start" {
             start ${projectstart}
             delayed:start 2002-01-20
             charge 21000.0 onstart
         }

         task prev "Technology Preview" {
             depends !!software.backend
             charge 31000.0 onstart
             note "All '''major''' features should be usable."
         }

         task beta "Beta version" {
             depends !!test.alpha
             charge 13000.0 onstart
             note "Fully functional, may contain bugs."
         }

         task done "Ship Product to Customer" {
             # maxend 2002-04-17
             depends !!test.beta, !!manual
             charge 33000.0 onstart
             note "All priority 1 and 2 bugs must be fixed."
         }
     }
   #+END_SRC

   每个milestone必须要有一个dependency或一个固定的开始日期. 可以使用`depends' attribute来为milestone设定dependency,也可以使用`start' attribute为milestone设置一个固定的开始日期.

   `maxend' attribute定义了该任务最晚不能晚于指定的日期完成. 该属性在规划阶段没有作用,但可以用来检查是否照成计划延后. 由于task是可能晚于指定的日期的,因此最好使用该属性进行检查,若注释掉该属性会引发一个警告.

** 注释
   使用#来注释一行

** 定义report

   report的定义与task和resource的定义很类似. report也有继承机制.

   每个report定义,都是以report的类型开始的. 每钟类型的report都有其不同的关注点. `taskreport'列出项目中的task列表. `resourcereport'列出项目中的resource列表. 更一般的报表是`textreport'

   `textreport'不会像`taskreport'和`resourcereport'那样直接显示数据. 它实际上包含了很多个文本区块,这些文本区块是由Rich Text组成的. There can be a building block at the top and bottom, as well as three columns in the center. The column are called left, center and right.

   与其他propery类似,`textreport' property也会有一个名字,且改名字将会作用产生报表文件时的basename. 

   `formats' attribute定义了一个报表文件的导出格式,若没有设置该attribute,则不会导出该报表
   
   `column' attribute可以指定report中每行显示的那些内容
   #+BEGIN_SRC taskjuggler
     taskreport overview "" {
         columns bsi { title 'WBS' },
         name, start, end, effort, cost,
         revenue, chart { ${TaskTip} }
         }
   #+END_SRC

   `tooltip' attribute可以实现当鼠标放在列上时,显示更明细的说明. 

   `tooltip' attribute的第一个参数为决定tooltip是否激活的逻辑表达式. 报表中的每一行都会计算一次该逻辑表达式.
   可以定义多个tooltip,但只有第一个符合逻辑表达式的tooptip会显示.

   `tooltip' attribute的第二个参数为tooltip的内容模板,在该模板中可以使用"query generator"来引用task attribute(比如开始,结束日期).
   #+BEGIN_SRC taskjuggler
     macro TaskTip [
     tooltip istask() -8<-                     # istask()函数只有在处于task line时才为true
     '''Start: ''' <-query attribute='start'->
     '''End: ''' <-query attribute='end'->
     ----
     '''Resources:'''

     <-query attribute='resources'->
     ----
     '''Precursors: '''

     <-query attribute='precursors'->
     ----
     '''Followers: '''

     <-query attribute='followers'->
     ->8-
     ]
   #+END_SRC

   报表中的`timeformat'可以指定显示日期的格式:
   #+BEGIN_SRC taskjuggler
     timeformat "%a %Y-%m-%d"
   #+END_SRC

   报表中的`loadunit'可以指定任务消耗的单位
   #+BEGIN_SRC taskjuggler
     loadunit days
   #+END_SRC

   报表中的`caption'可以指定报表的标题

   `header' attribute,`center' attribute,`footer' attribute都是"Rich Text" attribute. 

   `navigator' property可以创建一个导航条:
   #+BEGIN_SRC taskjuggler
     navigator navbar {
         hidereport @none
     }
   #+END_SRC
   这里hidereport为一个过滤属性,后面的逻辑表达式决定了哪些report可以包含该导航条. "@none"表示不过滤

** Rich Text
   "Rich Text"的值可以是一个包含在单引号或双引号中的字符串,但若其内容需要包含多行内容或者包含有单引号或双引号,则需要转义,这样很麻烦. 
   可以使用"-8<-"和"->8-"(形状酷似剪刀,因此称为剪刀符)标记内容的开始和结束位置. 并且"-8<-"后,"->8-"前需要紧跟一个分行符. The indentation of the following line defines the indentation that will be ignored for all lines of the string
   #+BEGIN_SRC taskjuggler
	 header -8<-
		 === Project Overview ===

		 The project is structured into 3 phases.

		 # Specification
		 # <-reportlink id='frame.development'->
		 # Testing

		 === Original Project Plan ===
	 ->8-
   #+END_SRC

   Rich Text的语法很类似于MediaWiki markup的语法
*** Block Markup

	所有的块标记都是由空行分隔的. 块标记符号必须处于块的第一行的最开头的地方. 任何以空格开始的行都被认为是预先格式化好的文本,这时会保留该格式原封不动,也不会去解释其中的标记符号.

	块标记不能嵌套.

   	"Rich Text"中的章节标题用"== XXXX =="来表示,其中"=="表示一级章节,"==="表示二级章节,以此类推. 
   	#+BEGIN_SRC markdown
      == Headline Level 1 ==
      === Headline Level 2 ===
      ==== Headline Level 3 ====
   	#+END_SRC

   	"Rich Text"中"----"会生成一个水平分割线
   	#+BEGIN_SRC markdown
      ----
   	#+END_SRC

   	"Rich Text"中的章节,用空行来分隔.

   	"Rich Text"中的计数列表用"# xxx"来表示. 目前支持三个级别
   	#+BEGIN_SRC markdown 
      # Enumeration Level 1
      ## Enumeration Level 2
      ### Enumeration Level 3
   	#+END_SRC

   	"Rich Text"中的无计数列表用"* xxx"来表示. 目前支持三个级别
   	#+BEGIN_SRC markdown
      ,* Enumeration Level 1
      ,** Enumeration Level 2
      ,*** Enumeration Level 3
   	#+END_SRC
*** In-Line Markups
	与Block Markup不同,In-Line Markup不需要它一定出现在行头.
	#+BEGIN_SRC markdown
      This is an ''italic'' word.
      This is a '''bold''' word.
      This is a ''''monospaced'''' word.
      This is a '''''italic and bold''''' word.
	#+END_SRC
	
	可以使用<fcol:color>text</fcol>为text加上颜色. 目前支持的颜色有:black, maroon, green, olive, navy, purple, teal, silver, gray, red, lime, yellow, blue, fuchsia, aqua 和 white.
	#+BEGIN_SRC markdown
      This is a <fcol:green>green</fcol> word
	#+END_SRC
	也可以使用<fcol:#XXX>text</fcol>为text加上颜色. 例如
	#+BEGIN_SRC markdown
      This is a <fcol:#FFFF>green</fcol> word
	#+END_SRC
	
	可以使用[URL]或[URL Comment]这种格式来创建连接到外部文档的链接
	#+BEGIN_SRC markdown
      [http://www.taskjuggler.org]
      [http://www.taskjuggler.org The TaskJuggler Web Site]
	#+END_SRC

	使用=[[item]]=或=[[item|Comment]]=这种格式可以创建本地引用. 这时创建链接时,会自动在第一个参数后加上后缀".html"
	#+BEGIN_SRC markdown
      [[item]]
      [[item|An item]]
	#+END_SRC
	
   	若想引用其他report的内容,可以使用"=[[report-file-name]]="中,其中report-file-name不带文件后缀.
   	#+BEGIN_SRC taskjuggler
	  footer -8<-
	  === Staffing ===

	  All project phases are properly staffed. See [[ResourceGraph]] for
	  detailed resource allocations.

	  === Current Status ===

	  The project started off with a delay of 4 days. This slightly affected
	  the original schedule. See [[Deliveries]] for the impact on the
	  delivery dates.
	  ->8-
   	#+END_SRC

	添加图片的语法跟创建本地引用的语法很类似,但需要使用"alt=Comment"来标识Comment
	#+BEGIN_SRC markdown
      [[File:image.jpg]]
      [[File:image.jpg|alt=An image Comment]]
	#+END_SRC
	目前支持的图片格式有: .jpg, .gif, .png and .svg.

	甚至我们还可以设置图片的垂直位置：
	#+BEGIN_SRC markdown
      [[File:image.svg|text-bottom]]
	#+END_SRC
	这里text－bottom还可以是top，middle，bottom，baseline，sub，super，text-top

	若希望插入不解析的存文本，可以使用
	#+BEGIN_SRC markdown
      <nowiki> This is not '''bold''' text. </nowiki>
	#+END_SRC

	还可以在<html>...</html>中插入纯html代码
	
** Block and Inline Generator

   Generator是一个非常有用的功能，它允许你插入任意复杂的内容到Rich Text中。 Block generator会创建一个文本块,而inline generator产生一个可以插入文本段落中的元素.
*** Block generator
   	Block generator的语法为:
   	#+BEGIN_SRC markdown
      <[generator_name parameter1="value1" ... ]>
   	#+END_SRC
	其中generator_name为分辨generator的唯一标志.

	这里parameter的值根据不同类型的Block Generator而支持不同的参数
    | generator类型 | paramter | 说明                  |
    |---------------+----------+-----------------------|
    | navigator     | id       | 插入指定id的navigator |
    | report        | id       | 插入指定id的report    |
	   
	例如:

   	若想要在一个report中包含另一个report的内容
   	#+BEGIN_SRC taskjuggler
	 textreport frame "" {
		 textreport index "Overview" {
			 formats html
			 center '<[report id="overview"]>'  #block generator
		 }
   	#+END_SRC
   	
   	#+BEGIN_SRC taskjuggler
	  textreport frame "" {
		  header -8<-
		  == Accounting Software Project ==
		  <[navigator id="navbar"]>
		  ->8-
		  footer "----"
		  textreport index "Overview" {
			  formats html
			  center '<[report id="overview"]>'
		  }
	  }
   	#+END_SRC

*** Inline generator
   	Inline generator的语法为:
   	#+BEGIN_SRC markdown
      <-generator_name parameter1="value1" ... ->
   	#+END_SRC
	其中generator_name为分辨generator的唯一标志.
	
	这里parameter的值根据不同类型的Block Generator而支持不同的参数
    | generator类型 | paramter       | 说明                                                                                               |
    |---------------+----------------+----------------------------------------------------------------------------------------------------|
    | reportlink    | id             | 插入一条链接,连接到指定id的report处                                                                |
    | reportlink    | attributes     | 一个属性集合,会覆盖所引用report的相关属性. 该属性集合只有在使用tj3d web server时才生效             |
    | query         | family         | 指定一个task或resource是否可以被查询                                                               |
    | query         | property       | 被查询的task/resource的id                                                                          |
    | query         | scopeproperty  | scope property的id. 若property为task,则该值必须是个resource id,反之亦然                            |
    | query         | attribute      | attribute的id,支持的attribute包括copyright, currency, end, name, now, projectid, start and version |
    | query         | scenario       | scenario的id                                                                                       |
    | query         | start          | 当前report报告期间的开始日期                                                                       |
    | query         | end            | 当前report报告期间的结束日期                                                                       |
    | query         | loadunit       | The loadunit that should be used in case the requested attribute is an effort or duration value.   |
    | query         | timeformat     | 指定日期类型attribute的格式                                                                        |
    | query         | numberformat   | 指定数字类型attribute的格式                                                                        |
    | query         | currencyformat | 指定货币类型attribute的格式                                                                             |

	例如:
	#+BEGIN_SRC taskjuggler
      taskreport "All" {
          formats html
          columns name { 
              celltext 1 -8<-
              <-query attribute="name"-> <-reportlink id="taskRep"
              attributes="hidetask plan.id != \"<-id->\""->
              ->8-
          }, start, end
      }
      taskreport taskRep "Task" {
          formats html
      } 
	#+END_SRC


* TaskJuggler的命令

  TaskJuggler是一个命令行程序，它的所有功能都通过在shell下敲命令来实现。

** tj3
   tj3读取项目文件的内容,并做出规划,生成报表.

   tj3至少要接一个tjp文件作为参数:
   #+BEGIN_SRC sh
     tj3 tutorial.tjp
   #+END_SRC
   若想在项目文件中指定其他文件路径,最好使用`/'作为目录分隔符. 这样该项目文件在所有的操作系统下都能够兼容.

   想项目已经发生的过程是不能被更改的,若要保证这些已发生的部分不被修改,则可以使用`freeze'参数:
   #+BEGIN_SRC sh
     tj3 --freeze yourproject.tjp --freezedate YYYY-MM-DD
   #+END_SRC
   This will generate two files, yourproject-header.tji and yourproject-bookings.tji. 
   The header files contains the date of the freeze as a now attribute. You must include this file at the end of your project header section.
   The bookings file contains the resource assignment data. It usually contains many booking entries that look similar to this:
   #+BEGIN_EXAMPLE
     supplement task t {
       booking r 2010-02-19-09:00-+0000 + 3.0h,
               2010-02-19-13:00-+0000 + 5.0h,
               2010-02-22-09:00-+0000 + 3.0h,
               2010-02-22-13:00-+0000 + 5.0h,
     }
   #+END_EXAMPLE
   The booking file must be included at the end of your main project file.


   tj3还有许多运行时选项,可以使用--help选项获取明细说明:
   #+BEGIN_SRC sh
     tj3 --help
   #+END_SRC

** tj3man

   tj3man提供一个快速查看语法引用的途径. 

   当不带参数运行tj3man时,会列出一个包含所有语法关键字的列表.

   有时,同一个关键字在不同的上下文环境中代表着不同的意义,这些关键字会以`keyword.context'的格式显示. 例如
   #+BEGIN_EXAMPLE
     全局环境,resource环境,task环境和timesheet环境中有shift关键字,这时会列出下面这些shift关键字:

     shift
     shift.resource
     shift.task
     shift.timesheet
   #+END_EXAMPLE

   若只想查看某个关键字的意义,可以将该关键字作为参数传递給tj3man
   #+BEGIN_SRC sh
     tj3man shift.task
   #+END_SRC

   tj3man还支持使用html格式查看帮助,语法为:
   #+BEGIN_SRC sh
     tj3man --html <keyword>
   #+END_SRC

   默认情况下,tj3man使用firefox显示html格式的帮助信息.

   要想获得更多关于tj3man的用法,可以使用--help选项
   #+BEGIN_SRC sh
     tj3man --help
   #+END_SRC

** tj3d

   tj3d为TaskJuggler的守护进程. 出于安全的考虑,它只接收本地链接的服务请求,且每个客户端都必须有一个认证key.

   在使用tj3d之前,需要先准备一个名为`.taskjuglerrc'或`taskjuggler.rc'的配置文件. 该配置文件的必须跟你的project file放在同一个目录下

   该配置文件格式为`YAML'. 所有的设置以章节的方式组织,每个章节的名称必须以`_'开头:
   #+BEGIN_EXAMPLE
     global:
       emailDeliveryMethod: smtp
       smtpServer: smtp.your_company.com
       authKey: topsecret
       scmCommand: "svn add %f ; svn commit -m '%m' %f"
       projectId: prj
     _timesheets:
       senderEmail: 'TaskJuggler <timesheets@taskjuggler.your_company.com>'
       _sender:
         hideResource: '~isleaf()'
       _summary:
         sheetRecipients:
           - team@your_company.com
         digestRecipients:
           - managers@your_company.com
     _statussheets:
       projectId: prj
       _sender:
         senderEmail: 'TaskJuggler <statussheets@taskjuggler.amd.com>'
         hideResource: '~(isleaf()  & manager)'
       _log:
         logLevel: 3
         outputLevel: 3
   #+END_EXAMPLE
   上面这段配置中:
   
   * "authKey: topsecret"为所有的TaskJuggler组件设置了一个认证key:`topsecret'. 当然,可以把`topsecret'设置为任意的字符序列

   * "emailDeliveryMethod"定义了email的投送方法为stmp

   * "smtpServer"定义了SMTP服务器的地址

   * "scmCommand"定义了新增/提交项目文件到版本控制系统的命令

   * "projectId"指定了是哪个项目(TaskJuggler可以同时为多了项目提供支持)

   * 章节"_timesheets"中的senderEmail为派发timesheet模板时所使用的邮件地址.
     项目相关人员填好timesheet后,也需要将timesheet发回到该地址. 这种通过timesheet来了解项目的实际进度的方案,是TaskJuggler所推荐的.

   * "hideResource"配置项类似定义报表时的`hideresource' attribute. 它指定了哪些资源不要列入timesheet模板中跟踪.

   * "sheetReceipients"配置了一堆email地址. 这些email地址会收到提交timesheet的副本. 
	 每个email地址必须以"- "开头

   配置文件中的`_log'节决定了输出哪些日志. tj3d的日志信息存在一个名为`tj3d.log'的日志文件中. 

   出于调试的目的,可以使用`-d'选项让tj3d输出日志到屏幕上,这时可以指定日志的输出级别:
   | outputLevel | 说明               |
   |-------------+--------------------|
   |           0 | 无日志输出         |
   |           1 | 只输出致命错误     |
   |           2 | 致命错误和普通错误 |
   |           3 | 2+information信息    |
   |           4 | 3+调试信息             |
   
   默认情况下`tj3d'会在当前目录,当前用户的homg目录和/etc目录下搜索配置文件. 但你也可以使用`-c'选项来指定配置文件的路径

   更详细的关于tj3d的帮助,使用命令`tj3d --help'

** tj3client

   需要使用`tj3client'来对TaskJuggler服务进行操作,比如添加/删除项目,查看项目的当前状态,查看某个项目的report等.

   `tj3client'必须提供正确的认证key才能连接上`tj3d'

   要想添加一个项目到`tj3d'中,则可以:
   #+BEGIN_SRC sh
     tj3client add yourproject.tjp
   #+END_SRC
   
   想显示目前`tj3d'的状态,可以
   #+BEGIN_SRC sh
     tj3client status
   #+END_SRC
   
   要查看某个项目的所有报表列表,可以
   #+BEGIN_SRC sh
     tj3client list-reports <project_id>
   #+END_SRC
   
   要查看具体某个项目的某个报表,可以
   #+BEGIN_SRC sh
     tj3client report <project_id> <report_id>
   #+END_SRC
   
   要停止`tj3d'继续提供服务,可以
   #+BEGIN_SRC sh
     tj3client terminate
   #+END_SRC

   使用`tj3client --help'可以看到`tj3client'所支持的所有命令.

** tj3web

   这是一个web服务器,用来以HTML的格式来展示项目报表. tj3web需要`tj3d'运行在同一台机器上才能正常的服务.

   默认情况下该web服务器监听8080端口,但可以在配置文件的`_global'节中通过配置`webServerPort'的值来实现:
   #+BEGIN_EXAMPLE
     _global:
       authKey: topsecret
       webServerPort: 8080
   #+END_EXAMPLE

   使用web浏览器查看`http://localhost:8080/taskjuggler' 就能看到一个所有加载入`tj3d'的项目列表,点击项目名称就能看到该项目中的所有报表列表.

** tj3ts_sender

   该命令用于发送timesheet模板給个项目干系人,让他们填写实际进度. 

   使用`-e'参数,`tj3_sender'会发送本周的timesheet模板,默认情况下一周是从周一开始算得.

   调用`tj3_sender'时,会在当前目录下搜索tj3d的配置文件,当然也可以使用`-c'选项指定配置文件的具体路径,在后一种情况下,常常需要使用`-d'参数来更改输出目录到真正的项目目录中

   参数`--dryrun'会只是测试tj3_sender命令的执行情况,而不会真正的发送email

   若你多次运行该命令,若之前运行的命令已经生成过timesheet模板了,则后面再运行该命令也不会再重新产生一次模板,这时可以使用参数`-f'强制命令重新生成timesheet模板

   tj3ts_sender needs to generate a number of files and directories. A copy of the generated templates will be stored in TimeSheetTemplates/<date>/ under <resource_id> -date.tji. <date> is replaced with the end date of the reporting interval and <resoruce_id> is the ID of the resource.
	
   The tj3ts_sender command will also add the reporting interval to a file called TimeSheetTemplates/ acceptable_invervals.

** tj3ts_recvier

   项目干系人填完timesheet模板后,发回的timesheet会被转发給tj3ts_recvier处理.

   tj3ts_receiver will only accept time sheets for the time periods listed in TimeSheetTemplates/acceptable_intervals.

  
** tj3ts_summary
   
   tj3ts_summary用来发送timesheet的汇总情况报告.

** tj3ss_sender

   用于发送state sheet模板
