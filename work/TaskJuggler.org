#+TITLE: TaskJuggler
#+AUTHOR: lujun9972
#+OPTIONS: ^:{}

* 基础说明

  Taskjuggler使用一些文本文件来描述一个项目. 这些文件由一个.tjp文件和多个tji文件组成. 其中tjp为主项目文件,在tjp文件中可以include多个tji文件.

* 命令

** tj3

   tj3是TaskJuggler的命令行版的命令,它类似一个编译器一样,接受项目源文件,然后根据其中的内容产生输出文件. 输出的文件存在当前目录下.
   #+BEGIN_SRC sh
     tj3 AcSo.tjp
   #+END_SRC

   若想在项目文件中指定其他文件路径,最好使用`/'作为目录分隔符. 这样该项目文件在所有的操作系统下都能够兼容.

* TJP文件的结构
 
  TJP文件为项目的主文件. 每个项目都必须以project header开头. 且project header只能在存在主项目文件中. 所有其他的元素则可以分散到各个tji文件中. 

  project header下面是任意个项目属性的描述,例如accounts,resource,tasks和reports. 且每个project只要要有一个task和一个report.
  
  各项目属性中间没有严格的前后关系,但具体某个属性之间还是有先后关系的,例如若想分配一个resource到某task上,则该resource必须先于该task定义. 因此,推荐的属性排列顺序为:

  1. macros
  2. flags
  3. accounts
  4. shifts
  5. vacations
  6. resources
  7. tasks
  8. accountreports
  9. resourcereports
  10. taskreports
  11. textreports
  12. exports

** project property
   每个TaskJuggler项目文件必须以project property开头. 该property包括项目名称和项目开始/结束日期. 该开始/结束日期不需要特别精确,但只要要能包括近项目中的所有任务. 
   TaskJuggler会使用开始/结束时间间的时间段来规划任务,因此这个时间段必须要能够包含进项目中的所有任务,但是也不要太大了,这样会比较消耗内存,增加规划计算的时间
   #+BEGIN_SRC taskjuggler
   project sms-bank "短信银行" 2015-03-01 +3m {
   }
   #+END_SRC

   所有的Taskjuggler property都有一个唯一的id,一个名称和一系列可选的attribute.  
   其中property的名称是必须有的,而id是可以省略的,TaskJuggler会自动产生一个唯一的id,但这样的话该属性就无法被引用了.
   attribute则被包含在大括号内. 当然,若一个property没有任何attribute,则大括号可以忽略.

   attribute的结构为`keyword argument1...argumentN'. 例如:

   默认TaskJuggler使用的时区是UTC,若向设置自己的时区,则可以使用`timezone' attribute
   #+BEGIN_SRC taskjuggler
   timezone "Europe/Pairs"
   #+END_SRC
   需要注意的是,项目头部的开始/结束时间是在重定义timezone之前设定的,因此这时project的开始/结束时间还是以UTC时区为准的. 但是你可以为项目重新设置一次开始/结束时间
   #+BEGIN_SRC taskjuggler
   project sms-bank "短信银行" 2015-03-01-0:00-+100
   #+END_SRC

   `currency' attribute指定了货币单位
   #+BEGIN_SRC taskjuggler
   currency "CNY"
   #+END_SRC

   `timeformat' attribute指定了报告中的日期格式(并不会影响项目文件中指定date的格式)
   `numberformat'指定了报告中显示数字的格式
   `currencyformat'指定了报告中显示金额的格式
   #+BEGIN_SRC taskjuggler
   timeformat "%Y-%m-%d"
   numberformat "-" "" "," "." 1
   currencyformat "(" ")" "," "." 0
   #+END_SRC
   
   `now' attribute用来设置规划器认为当前日期为另一个时间(默认为调用TaskJuggler的时间).
   还可以使用`now'产生指定日期的项目状态报告
   #+BEGIN_SRC taskjuggler
   now 2015-03-11-13:00
   #+END_SRC

   scenario attribute可以用来创建场景.

   可以创建两个scenario,一个计划中的scenario,一个实际的scenario来进行对比. 两个scenario的任务结构和任务依赖关系需要一样才行.
  
   scenario可以嵌套入另一个scenario.这是子scenario共用父级scenario的属性值,除非子scenario的属性定义了自己的值.
   #+BEGIN_SRC taskjuggler
   scenario plan "Plan"{
	 scenario delayed "Delayed"
   }
   #+END_SRC
   我们定义了两个scenario,第一个是plan scenario,第二个是delayed scenario. 这种情况下,所有没有指定所属scenario的attribute都默认属于plan scenario. 
   要明确指定delayed scenario的attribute,需要在attribute前加前缀`delayed:',例如`delayed:effort 40d'标示实际项目消耗了40天

   下面是一个完整的例子
   #+BEGIN_SRC taskjuggler
   project acso "Accounting Software"  2002-01-16 +4m {
   # Set the default time zone for the project. If not specified, UTC
   # is used.
   timezone "Europe/Paris"
   # Hide the clock time. Only show the date.
   timeformat "%Y-%m-%d"
   # Use US format for numbers
   numberformat "-" "" "," "." 1
   # Use US financial format for currency values. Don't show cents.
   currencyformat "(" ")" "," "." 0
   # Pick a day during the project that will be reported as 'today' in
   # the project reports. If not specified, the current day will be
   # used, but this will likely be outside of the project range, so it
   # can't be seen in the reports.
   now 2002-03-05-13:00
   # The currency for all money values is the Euro.
   currency "USD"
   
   # We want to compare the baseline scenario to one with a slightly
   # delayed start.
   scenario plan "Plan" {
    scenario delayed "Delayed"
    }
   extend resource {
    text Phone "Phone"
    }
   }
   #+END_SRC

** Global Attributes

   TaskJuggler中的Property被设置为能够从外部作用域中继承attribute.

   在project property后,我们处于全局作用域范围内,这里设定的attribute会被接下来的所有property所继承.
   
   例如:
   `rate' attribute可以用来设置资源的每日成本.所有接下来定义的资源都会默认继承这个每日成本,当然也可以为某个特定的资源定义自己的成本价格.
   #+BEGIN_SRC taskjuggler
   rate 390.0
   #+END_SRC

   `leave' attribute可以用来设置全局的假日安排, 所有的资源在假日期间不安排工作. `leave' attribute可以有一个名称,而且必须有一个日期或时间段
   #+BEGIN_SRC taskjuggler
   leaves holiday "Good Friday" 2015-03-13
   #+END_SRC

** Macros

   宏是TaskJuggler用来减少输入工作来那个的一种机制. 类似C语言,TaskJuggler中的宏执行的也仅仅是文本替换

   宏总是带有宏名称和括号内的文本模式. 定义宏的格式为`macro macro-name [xxx]'
   #+BEGIN_SRC taskjuggler
   macro allocate_developers[
     allocate dev1
     allocate dev2
     allocate dev3
   ]
   #+END_SRC

   当要引用宏时,格式为`$(macro-name)'. TaskJuggler就会替代$(macro-name)为文本模式`xxx'
   #+BEGIN_SRC taskjuggler
   $(allocate_developers)
   #+END_SRC
*** 预定义宏
   	| 预定义的宏   | 说明                                                          |
   	|--------------+---------------------------------------------------------------|
   	| projectstart | project的开始日期                                             |
   	| projectend   | project的结束日期                                             |
   	| now          | 当前日期,可以用`now'关键字修改,`timeformat'不会影响到它的格式 |
   	| today        | 类似now,但会根据`timeformat'修改其格式                        |
   	|              |                                                               |
*** 环境变量扩展

	$(VAR)这种语法会扩展为环境变量VAR的实际值
** 定义Flags

   TaskJuggler常用特性之一就是flag. 一旦定义了一个flag,就可以将它与任何property相连(类似tag). 

   当你生成报表时,可以使用flag来过滤不希望展现的property

   定义flag的语法为
   #+BEGIN_SRC taskjuggler
   flags flag-name
   #+END_SRC

   所有的flag在使用前都需要预先定义. 否则会报找不到flag名称的错误

** 定义Account

   资源的使用会需要付出成本. 为了进行成本收益分析,我们需要设置账户记录下成本和收益.

   定义Account的格式为
   #+BEGIN_SRC taskjuggler
   account id name
   #+END_SRC
   这里id可以是由a-z,A-Z,_和0-9组成,其中数字0-9不能作为id的第一个字符. 
   
   例如:
   #+BEGIN_SRC taskjuggler
   account cost "Project Cost"{
     account dev "Development"
     account doc "Documentation"
   }
   account rev "Payments"
   #+END_SRC
   account可以嵌套入另一个account中.

   当你在项目中定义了account后,自少需要定义一个默认的balance, 该`balance' attribute指定了哪些account会被用于成本收益分析报告.
   #+BEGIN_SRC taskjuggler
   balance cost rev
   #+END_SRC

** 定义Resource

   任何一个项目都必须包含资源.

   resource的定义格式为
   #+BEGIN_SRC taskjuggler
     resource id name{
       其他attribute或resource
     }
   #+END_SRC

   例如:
   #+BEGIN_SRC taskjuggler
     resource boss "Paul Henry Bullock" {
       email "phb@crappysoftware.com"
       Phone "x100"
       rate 480
     }
     resource dev "Developers" {
       managers boss
       resource dev1 "Paul Smith" {
         email "paul@crappysoftware.com"
         Phone "x362"
         rate 350.0
       }
       resource dev2 "Sébastien Bono" {
         email "SBono@crappysoftware.com"
         Phone "x234"
       }
       resource dev3 "Klaus Müller" {
         email "Klaus.Mueller@crappysoftware.com"
         Phone "x490"
         leaves annual 2002-02-01 - 2002-02-05
       }
       flags team
     }
     resource misc "The Others" {
       managers boss
       resource test "Peter Murphy" {
         email "murphy@crappysoftware.com"
         Phone "x666"
         limits { dailymax 6.4h }
         rate 310.0
       }
       resource doc "Dim Sung" {
         email "sung@crappysoftware.com"
         Phone "x482"
         rate 300.0
         leaves annual 2002-03-11 - 2002-03-16
       }

       flags team
     }
   #+END_SRC

   类似account,resource也必须有一个id和名称, resource也能够嵌套入另一个resource中.

   通过设置`leaves' attribute,可以设定特定时间段内,指定资源不可用. 
   *需要注意的是* 子property中的leaves attribute并不会覆盖父propery的leaves attribute,相反他们是累加关系. 若想取消父property定义的leaves attribute,需要使用`purge' attribute
   leaves attribute后接一个时间段.

   通过设置`limits' attribute,可以现在资源每日的使用时间.

   *需要注意的是*,我们在定义了team resource的sub-resource后添加了`flags team'. 这种情况下,这些flag并不会对sub-resource所生效.
   
   但若在定义sub-resource之前就定义了flag,则该flag会对sub-resource也生效.
** 时间段说明
   TaskJuggler的时间段表示格式为
   #+BEGIN_SRC taskjuggler
     <date1> (- <date2> | + <duration> (min | h | d | w | m | y)) 
   #+END_SRC
   
   这里的date可以包括日期和时间,若省略时间则默认为0:0:0,且该时间段并不包括date2

** 定义task

   task的定义语法为
   #+BEGIN_SRC taskjuggler
     task id name{
         sub-task或其他属性
     }
   #+END_SRC

   例如
   #+BEGIN_SRC taskjuggler
     task sms-bank "短信银行" {
         task spec "Specification" {
             effort 20d
             ${allocate_developers}
             depends !deliveries.start
         }
         task software "Software Development" {
         }
         task test "Software testing" {
         }
         task manual "Manual" {
             journalentry 2002-02-28 "User manual completed" {
                 author boss
                 summary "The doc writers did a really great job to finish on time."
             }
         }
         task deliveries "Milestones" {
         }
     }

     task software "Software Development" {
         priority 1000
         task database "Database coupling" {
             journalentry 2002-02-03 "Problems with the SQL Libary" {
                 author dev1
                 alert yellow
                 summary -8<-
                 We ran into some compatibility problems with the SQL
                 Library.
                 ->8-
                 details -8<-
                 We have already contacted the vendor and are now waiting for
                 their advise.
                 ->8-
             }
         }
         task gui "Graphical User Interface" {
         }
         task backend "Back-End Functions" {
         }
     }

     task gui "Graphical User Interface" {
         effort 35d
         delayed:effort 40d
         depends !database, !backend
         allocate dev2, dev3
         # Resource dev2 should only work 6 hours per day on this task.
         limits {
             dailymax 6h {
                 resources dev2
             }
         }
     }

   #+END_SRC
   
   *不同TaskJuggler property都有各种的命名空间*. 因此resource和task使用同一个id是可行的.

   *task的id不同于其他property的id,它会自动继承父task的id作为前缀*. 因此"Software Development"的完整id应该为sms-bank.software.
   但taskid还可以写成相对id的形式: 相对id以一个或多个惊叹号开头. Each exclamation mark moves the scope to the next enclosing task. 因此这里`!deliveries.start'换成完整id就是`Acso.deliveries.start'
   
   `effor' attribute定义了要完成该task需要花费的人天数. 既然单位是人天数,就意味着我们必须为该任务分配人员. 
   若給该task分配的资源时间不够长,该任务无法完成.( The task won't finish before the resources could be allocated long enough to reach the specified effort)
   默认情况下,TaskJuggler认为一天工作8个小时,但是可以通过`dailyworkinghours'属性修改.

   除了`effort' attribute,`length' attribute和`duration' attribute也能用来表示该task需要花费的时间.
   `length'与`duration'的不同之处在于`length'表示任务的工作天数,而`duration'表示任务的日历天数(包括非工作日期).
   当使用`length'或`duration'时,就无需指定給该task所分配的资源.

   对任一task来说,只能使用`effor',`length'或`duration'其中之一来定义任务的时长. 
   *对于Container task来说,不应该分配时长* 它的时长应该根据它的sub-task来自动计算出来.

   `allocate' attribute用于为task分配资源,其格式为
   #+BEGIN_SRC taskjuggler
     allocate resource-id
   #+END_SRC

   `depends' attribute指定了两个task之间的关系. 其格式为
   #+BEGIN_SRC taskjuggler
     depends taskid1,taskid2...taskidN
   #+END_SRC
   这里taskid可以是完整的taskid或相对的taskid

   `priority' attribute用来标示task的重要程度. 重要程度的从不重要到最重要为1到1000. 
   若在task中,sub-task前定义了`priority' attribute,则所有的sub-task会继承该attribute

   gui task中的`limit' attribute说明资源dev2每天只花6个小时到gui这个task上.
   
   gui task中的`delayed:effort 40d'说明虽然plan scenario中该task的effort为35d,但实际上delayed scenario中的task的effort为40d,即实际比原计划拖延了5天.

   `complete' attribute可以指定task的完成情况. 例如
   #+BEGIN_SRC taskjuggler
     task backend "Back-End Functions" {
         effort 30d
         complete 95
         depends !database
         allocate dev1, dev2
     }
   #+END_SRC
   
   实施一项task的花费需要记到某个account中,这时需要用到`chargeset' attribute. 其语法为:
   #+BEGIN_SRC taskjuggler
   chargeset account-id
   #+END_SRC
   
   若一项task的花费不仅仅包括资源成本,则还可以使用`charge' attribute修改task的花费. 例如
   #+BEGIN_SRC taskjuggler
     task AcSo "Accounting Software" {
         chargeset dev
         charge 170 perday
         task manual "Manual" {
             effort 10w
             depends !deliveries.start
             allocate doc, dev3
             purge chargeset         # 废除之前的chargeset安排
             chargeset doc
             journalentry 2002-02-28 "User manual completed" {
                 author boss
                 summary "The doc writers did a really great job to finish on time."
             }
         }
     }
   #+END_SRC
   其中,`charge' attribute的第二个参数`perday'表示每天的消耗, 可以用`onstart'表示一次性的固定消耗

** 定义milestone
   
   所谓milestone就是没有定义时长的task
   #+BEGIN_SRC taskjuggler
     task deliveries "Milestones" {
         purge chargeset
         chargeset rev

         task start "Project start" {
             start ${projectstart}
             delayed:start 2002-01-20
             charge 21000.0 onstart
         }

         task prev "Technology Preview" {
             depends !!software.backend
             charge 31000.0 onstart
             note "All '''major''' features should be usable."
         }

         task beta "Beta version" {
             depends !!test.alpha
             charge 13000.0 onstart
             note "Fully functional, may contain bugs."
         }

         task done "Ship Product to Customer" {
             # maxend 2002-04-17
             depends !!test.beta, !!manual
             charge 33000.0 onstart
             note "All priority 1 and 2 bugs must be fixed."
         }
     }
   #+END_SRC

   每个milestone必须要有一个dependency或一个固定的开始日期. 可以使用`depends' attribute来为milestone设定dependency,也可以使用`start' attribute为milestone设置一个固定的开始日期.

   `maxend' attribute定义了该任务最晚不能晚于指定的日期完成. 该属性在规划阶段没有作用,但可以用来检查是否照成计划延后. 由于task是可能晚于指定的日期的,因此最好使用该属性进行检查,若注释掉该属性会引发一个警告.

** 注释
   使用#来注释一行

** 定义report

   report的定义与task和resource的定义很类似. report也有继承机制.

   每个report定义,都是以report的类型开始的. 每钟类型的report都有其不同的关注点. `taskreport'列出项目中的task列表. `resourcereport'列出项目中的resource列表. 更一般的报表是`textreport'

   `textreport'不会像`taskreport'和`resourcereport'那样直接显示数据. 它实际上包含了很多个文本区块,这些文本区块是由Rich Text组成的. There can be a building block at the top and bottom, as well as three columns in the center. The column are called left, center and right.

   与其他propery类似,`textreport' property也会有一个名字,且改名字将会作用产生报表文件时的basename. 

   `formats' attribute定义了一个报表文件的导出格式,若没有设置该attribute,则不会导出该报表
   
   `column' attribute可以指定report中每行显示的那些内容
   #+BEGIN_SRC taskjuggler
     taskreport overview "" {
         columns bsi { title 'WBS' },
         name, start, end, effort, cost,
         revenue, chart { ${TaskTip} }
         }
   #+END_SRC

   `tooltip' attribute可以实现当鼠标放在列上时,显示更明细的说明. 

   `tooltip' attribute的第一个参数为决定tooltip是否激活的逻辑表达式. 报表中的每一行都会计算一次该逻辑表达式.
   可以定义多个tooltip,但只有第一个符合逻辑表达式的tooptip会显示.

   `tooltip' attribute的第二个参数为tooltip的内容模板,在该模板中可以使用"query generator"来引用task attribute(比如开始,结束日期).
   #+BEGIN_SRC taskjuggler
     macro TaskTip [
     tooltip istask() -8<-                     # istask()函数只有在处于task line时才为true
     '''Start: ''' <-query attribute='start'->
     '''End: ''' <-query attribute='end'->
     ----
     '''Resources:'''

     <-query attribute='resources'->
     ----
     '''Precursors: '''

     <-query attribute='precursors'->
     ----
     '''Followers: '''

     <-query attribute='followers'->
     ->8-
     ]
   #+END_SRC

   报表中的`timeformat'可以指定显示日期的格式:
   #+BEGIN_SRC taskjuggler
     timeformat "%a %Y-%m-%d"
   #+END_SRC

   报表中的`loadunit'可以指定任务消耗的单位
   #+BEGIN_SRC taskjuggler
     loadunit days
   #+END_SRC

   报表中的`caption'可以指定报表的标题

   `header' attribute,`center' attribute,`footer' attribute都是"Rich Text" attribute. 

   `navigator' property可以创建一个导航条:
   #+BEGIN_SRC taskjuggler
     navigator navbar {
         hidereport @none
     }
   #+END_SRC
   这里hidereport为一个过滤属性,后面的逻辑表达式决定了哪些report可以包含该导航条. "@none"表示不过滤

** Rich Text
   "Rich Text"的值可以是一个包含在单引号或双引号中的字符串,但若其内容需要包含多行内容或者包含有单引号或双引号,则需要转义,这样很麻烦. 
   可以使用"-8<-"和"->8-"(形状酷似剪刀,因此称为剪刀符)标记内容的开始和结束位置. 并且"-8<-"后,"->8-"前需要紧跟一个分行符. The indentation of the following line defines the indentation that will be ignored for all lines of the string
   #+BEGIN_SRC taskjuggler
	 header -8<-
		 === Project Overview ===

		 The project is structured into 3 phases.

		 # Specification
		 # <-reportlink id='frame.development'->
		 # Testing

		 === Original Project Plan ===
	 ->8-
   #+END_SRC

   Rich Text的语法很类似于MediaWiki markup的语法
*** Block Markup

	所有的块标记都是由空行分隔的. 块标记符号必须处于块的第一行的最开头的地方. 任何以空格开始的行都被认为是预先格式化好的文本,这时会保留该格式原封不动,也不会去解释其中的标记符号.

	块标记不能嵌套.

   	"Rich Text"中的章节标题用"== XXXX =="来表示,其中"=="表示一级章节,"==="表示二级章节,以此类推. 
   	#+BEGIN_SRC markdown
      == Headline Level 1 ==
      === Headline Level 2 ===
      ==== Headline Level 3 ====
   	#+END_SRC

   	"Rich Text"中"----"会生成一个水平分割线
   	#+BEGIN_SRC markdown
      ----
   	#+END_SRC

   	"Rich Text"中的章节,用空行来分隔.

   	"Rich Text"中的计数列表用"# xxx"来表示. 目前支持三个级别
   	#+BEGIN_SRC markdown 
      # Enumeration Level 1
      ## Enumeration Level 2
      ### Enumeration Level 3
   	#+END_SRC

   	"Rich Text"中的无计数列表用"* xxx"来表示. 目前支持三个级别
   	#+BEGIN_SRC markdown
      ,* Enumeration Level 1
      ,** Enumeration Level 2
      ,*** Enumeration Level 3
   	#+END_SRC
*** In-Line Markups
	与Block Markup不同,In-Line Markup不需要它一定出现在行头.
	#+BEGIN_SRC markdown
      This is an ''italic'' word.
      This is a '''bold''' word.
      This is a ''''monospaced'''' word.
      This is a '''''italic and bold''''' word.
	#+END_SRC
	
	可以使用<fcol:color>text</fcol>为text加上颜色. 目前支持的颜色有:black, maroon, green, olive, navy, purple, teal, silver, gray, red, lime, yellow, blue, fuchsia, aqua 和 white.
	#+BEGIN_SRC markdown
      This is a <fcol:green>green</fcol> word
	#+END_SRC
	也可以使用<fcol:#XXX>text</fcol>为text加上颜色. 例如
	#+BEGIN_SRC markdown
      This is a <fcol:#FFFF>green</fcol> word
	#+END_SRC
	
	可以使用[URL]或[URL Comment]这种格式来创建连接到外部文档的链接
	#+BEGIN_SRC markdown
      [http://www.taskjuggler.org]
      [http://www.taskjuggler.org The TaskJuggler Web Site]
	#+END_SRC

	使用=[[item]]=或=[[item|Comment]]=这种格式可以创建本地引用. 这时创建链接时,会自动在第一个参数后加上后缀".html"
	#+BEGIN_SRC markdown
      [[item]]
      [[item|An item]]
	#+END_SRC
	
   	若想引用其他report的内容,可以使用"=[[report-file-name]]="中,其中report-file-name不带文件后缀.
   	#+BEGIN_SRC taskjuggler
	  footer -8<-
	  === Staffing ===

	  All project phases are properly staffed. See [[ResourceGraph]] for
	  detailed resource allocations.

	  === Current Status ===

	  The project started off with a delay of 4 days. This slightly affected
	  the original schedule. See [[Deliveries]] for the impact on the
	  delivery dates.
	  ->8-
   	#+END_SRC

	添加图片的语法跟创建本地引用的语法很类似,但需要使用"alt=Comment"来标识Comment
	#+BEGIN_SRC markdown
      [[File:image.jpg]]
      [[File:image.jpg|alt=An image Comment]]
	#+END_SRC
	目前支持的图片格式有: .jpg, .gif, .png and .svg.

	甚至我们还可以设置图片的垂直位置：
	#+BEGIN_SRC markdown
      [[File:image.svg|text-bottom]]
	#+END_SRC
	这里text－bottom还可以是top，middle，bottom，baseline，sub，super，text-top

	若希望插入不解析的存文本，可以使用
	#+BEGIN_SRC markdown
      <nowiki> This is not '''bold''' text. </nowiki>
	#+END_SRC

	还可以在<html>...</html>中插入纯html代码
	
** Block and Inline Generator

   Generator是一个非常有用的功能，它允许你插入任意复杂的内容到Rich Text中。 Block generator会创建一个文本块,而inline generator产生一个可以插入文本段落中的元素.
*** Block generator
   	Block generator的语法为:
   	#+BEGIN_SRC markdown
      <[generator_name parameter1="value1" ... ]>
   	#+END_SRC
	其中generator_name为分辨generator的唯一标志.

	这里parameter的值根据不同类型的Block Generator而支持不同的参数
    | generator类型 | paramter | 说明                  |
    |---------------+----------+-----------------------|
    | navigator     | id       | 插入指定id的navigator |
    | report        | id       | 插入指定id的report    |
	   
	例如:

   	若想要在一个report中包含另一个report的内容
   	#+BEGIN_SRC taskjuggler
	 textreport frame "" {
		 textreport index "Overview" {
			 formats html
			 center '<[report id="overview"]>'  #block generator
		 }
   	#+END_SRC
   	
   	#+BEGIN_SRC taskjuggler
	  textreport frame "" {
		  header -8<-
		  == Accounting Software Project ==
		  <[navigator id="navbar"]>
		  ->8-
		  footer "----"
		  textreport index "Overview" {
			  formats html
			  center '<[report id="overview"]>'
		  }
	  }
   	#+END_SRC

*** Inline generator
   	Inline generator的语法为:
   	#+BEGIN_SRC markdown
      <-generator_name parameter1="value1" ... ->
   	#+END_SRC
	其中generator_name为分辨generator的唯一标志.
	
	这里parameter的值根据不同类型的Block Generator而支持不同的参数
    | generator类型 | paramter       | 说明                                                                                               |
    |---------------+----------------+----------------------------------------------------------------------------------------------------|
    | reportlink    | id             | 插入一条链接,连接到指定id的report处                                                                |
    | reportlink    | attributes     | 一个属性集合,会覆盖所引用report的相关属性. 该属性集合只有在使用tj3d web server时才生效             |
    | query         | family         | 指定一个task或resource是否可以被查询                                                               |
    | query         | property       | 被查询的task/resource的id                                                                          |
    | query         | scopeproperty  | scope property的id. 若property为task,则该值必须是个resource id,反之亦然                            |
    | query         | attribute      | attribute的id,支持的attribute包括copyright, currency, end, name, now, projectid, start and version |
    | query         | scenario       | scenario的id                                                                                       |
    | query         | start          | 当前report报告期间的开始日期                                                                       |
    | query         | end            | 当前report报告期间的结束日期                                                                       |
    | query         | loadunit       | The loadunit that should be used in case the requested attribute is an effort or duration value.   |
    | query         | timeformat     | 指定日期类型attribute的格式                                                                        |
    | query         | numberformat   | 指定数字类型attribute的格式                                                                        |
    | query         | currencyformat | 指定货币类型attribute的格式                                                                             |

	例如:
	#+BEGIN_SRC taskjuggler
      taskreport "All" {
          formats html
          columns name { 
              celltext 1 -8<-
              <-query attribute="name"-> <-reportlink id="taskRep"
              attributes="hidetask plan.id != \"<-id->\""->
              ->8-
          }, start, end
      }
      taskreport taskRep "Task" {
          formats html
      } 
	#+END_SRC


* TaskJuggler的语法

  
