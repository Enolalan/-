#+TITLE: x-window
#+AUTHOR: DarkSun
#+EMAIL: lujun9972@gmail.com
#+OPTIONS: H3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t

* X的组成
** 系统程序
+ X显示服务器 :: 这个软件控制了你的工作站的键盘、鼠标和屏幕。这是X的心脏
+ Xinit :: 初始化程序，启动系统和设定服务器执行方式。
+ Xdm :: X显示管理器，它可以灵活地启动系统，使系统启动成符合个别需求的环境。 它可以和Xinit两者之间选择一个使用。
+ Uwm :: X窗口管理器。此程序决定如何管理你的桌面、移动窗口、重定窗口大小等等， 你可以利用菜单，结合鼠标的按钮或键盘完成窗口操作

** 窗口系统中的实用程序
+ xterm :: X终端模拟器
+ xhost :: 让你控制网络上那些可以存取你的显示屏幕的其他主机。
+ xkill :: 终止不希望运行的应用程序的工具
+ xwd :: 将窗口内的图像存储到文件中
+ xpr :: 打印出xwd存储的图像
+ xdpr :: 结合了xwd与xpr
+ xmag :: 将屏幕上选中的一部分图像加以放大
+ xwud :: 将先前xwd所抓取的窗口图像重新显示于屏幕上.
+ x10tox11 :: 将能在第10版x执行的程序转换成可在第11版上执行的工具
+ xfresh :: 更新显示
+ xclock :: 一个时钟
+ xcalc :: 一个计算机
+ xload :: 用累计图来显示机器的负载分布
+ xbiff :: x版的biff,邮件通知工具

** 一般的应用程序和工具程序
+ xedit :: 文字编辑器
+ xman :: 一个man文档的浏览器
+ xmh :: 邮件管理程序

** 显示信息和状态的程序
+ xfd :: 在窗口中显示一个X中的字体,且可以选择提供更多有关此字体的信息
+ xlsfonts :: X字体的目录程序,告诉你一个显示器上有多少个字体可供选择
+ showsnf :: 显示服务器上原有的格式有关某一种字体的细节
+ xwininfo :: 列出某个特定窗口的信息,如大小,位置及其他特征
+ xlswins :: 列出系统内所有的窗口,并可以选择地列出每个窗口的细节
+ xpro :: 显示窗口的属性与字体
+ xdpyinfo :: 提供你的显示器及控制它的服务器的细节
+ xev :: 输出与窗口有关的所有X事件的系统.

** 用来定制适合你的系统的工具程序
+ xset :: 允许依照你的喜好设定显示特性。你可以设定一个键使它有效或无效，调整警告铃的音量，指定字体从何处获取等
+ xsetroot :: 你可以选择显示屏幕背景的外观，当你的鼠标指针不在任何应用窗口内时，你可以改变屏幕背景的颜色或图案以及光标形状和颜色
+ xmodmap :: 显示键盘的对应关系，也就是按什么键对应什么字符。利用此程序可以修改成适合你的对应关系
+ bitmap :: 让你建立和编辑图形的程序
+ xrdb :: 让你在数据库中显示或改变你喜爱的颜色或字体等等
+ bdftosnf :: 将一种字体从BDF格式转成你的服务器原有格式
     
* 最终用户的x-window
** X中窗口的层次
所有在X中的窗口都可视为一个树状结构层次的一部分，树的根部便是根窗口，涵盖了整个屏幕，应用窗口都是根窗口的子代，上层的窗口可以拥有它自己的子窗口

子窗口的位置和大小并不受父窗口的限制，子窗口可大可小，可以大过父窗口或只占父窗口的一部分，但是它会被父窗口剪裁，也就是说，子窗口所有超出父窗口的部分将会消失不见


** x-application的几个通用参数
+ -name "$name"
  设置应用的名称,会以这个名字来从.Xresource中读取资源.

+ -geometry $widthx$height+$xoff$yoff

  $xoff和$yoff为正数时,分别是对屏幕左边和上边的偏移. 

  $xoff和$yoff为负数时,分别是对屏幕右边和下边的便宜.
  
  也可以只指定大小或只指定位置，程序对未指定的部分会使用缺省值，或给你一些提示，视实际在系统中执行的状况而定

+ -bw $width
  设置框架边框的宽度,以像素为单位,可能无法用于所有的客户.

+ -fg $color /-bg $color
  设置前景/背景色

+ -font/-fn
  设置字体

+ -iconic
  以图标方式启动应用

+ -rv / -reverse
  交换前景和背景色
  
+ -title
  设置标题

+ -display $RemoteMachine:$DisplayName.$ScreenName
  在远程机器上显示.$DisplayName和$ScreenName是可选的,默认为0.0
  #+BEGIN_SRC sh
    # 在远程机器alma上显示xterm
    xterm -display alma:0.0 &
  #+END_SRC
     
** 定制资源
*** 文件.Xresources / .Xdefauls
X在启动时会读取配置文件中对资源的配置

+ 资源文件的格式为

  客户端程序名.构建层级.属性:属性值.

  这里构建层次可以为 =父构建.子构建层级= 这样的层级表达,也可以用 =*= 号代替 =.= 来表示任意的层级关系.
  #+BEGIN_QUOTE
  XTerm*foreground:white
  Xterm*scrollbar:true
  myWorld.mainForm.PushButton:blue
  #+END_QUOTE

  此外,!为注释符
  #+BEGIN_QUOTE
  !This is a comment
  #+END_QUOTE

+ 资源文件的预处理

  由于xrdb缺省将它的输入行传到C预处理器,因此还能使用CPP预处理器的伪指令#if,#ifdef,#else和#endif.

  xrdb本身会预定义很多符号,常用的有:

  + X_RESOLUTION :: 每公尺长屏幕有多少像素.
  + COLOR :: 只有屏幕支持彩色才被定义.
  + WIDTH,HEIGHT :: 屏幕的宽度和高度,单位为像素.
       
  由于本身UNIX/LINUX会定义大量的符号,若这些符号与你的配置冲突,你可以用xrdb的 =-nocpp= 选项停止它的预处理功能

+ 当你在特征中不论何处用到一个应用程序名称、限制或属性名称，你均可用类名称来代替它.
  传统上，所有的类名称以一个大写的字母开头，其后则为小写字母

+ 多种资源规范对应的优先规则

  我们现在有一个非常灵活性的方法来指定应用程序的资源，但正因为它太灵活，以致当一个应用程序查询资源数据库时常常有数种规范与之对应，如何解决呢？

  简单地说，如果同时有超过一个规范对应，则使用最具体的一个，资源管理器有一组优先规则用来决定是否一个规范较另一个具体。

  - 使用句号作为分隔符较使用星号更为具体，例如： =*Command.Foreground= 较 =*Command*Foreground= 更为具体。
  - 实例名称较类名称更具体，例如: =*foreground= 较 =*Foreground= 更具体。
  - 指定一个元素较省略它更具体，例如: =xmh*command*foreground= 较 =xmh*foreground= 更具体。
  - 元素靠近规范左边的星号较靠近右边的更具体，例如: =xmh*foreground= 较 =*command*foreground= 更具体

*** xrdb
为了简单起见,我们假设所有资源说明都是存在一个"数据库"中的,那么使用xrdb可以有如下功能:

+ 设定新的数据库
  
  #+BEGIN_SRC sh
    xrdb filename
    # 或者
    xrdb < filename
  #+END_SRC

+ 看目前有那些资源在数据库中
  
  #+BEGIN_SRC sh
    xrdb -query                     #xrdb将以纯文本格式输出数据库的内容
  #+END_SRC

+ 在现存的数据库加入一个新的资源
  
  在改变.Xresource文件后,不会立刻看到修改的结果,必须使用xrd命令来通知所有的服务有关修改.
  #+BEGIN_SRC sh
    xrdb -load .Xresources 
  #+END_SRC
  如果想保留以前的设置不改变,则使用-merge参数
  #+BEGIN_SRC sh
    xrdb -merge .myOwnResources      
  #+END_SRC

+ 完全去除数据库

  #+BEGIN_SRC sh
    xrdb -remove
  #+END_SRC

*** 常见错误说明
+ 如果你未设定一个应用程序的名称和类,确定在你的资源规范之前加一个星号.(如果你省略这个星号，将没有任何东西会对应这个规范)
+ 并非所有的应用程序均使用工具箱,非工具箱的程序不使用类名称,且它们的属性名称也可能不同
+ 你可能在规范中用了错误的属性或Widget的名称,特别是容易把类名称和实例名称搞混.
+ 如果你设定height和width 二者之一,你必须也设定另外一个.
** 定制X的工具
*** xprop
xprop能列出指定窗口的属性.

有几种方式可以指定要探测属性的窗口:

+ xprop启动时,光标会编程十字样式,移动光标到你想要探测属性的窗口并按下任何按钮就能探测该窗口的属性了.

+ 能用 =-root= 来指定探测根窗口

+ 用 =-id ${win-id}= 来指定探测id为${win-id}的窗口

对于每个属性都有一个属性名称,在其后面用小括号括住的为属性的类型或格式,最后是属性的值. 

比较常见的属性有:

+ WM_COMMAND :: 启动这个应用程序的命令行
+ WM_CLINET_MACHINE :: 执行这个客户端程序的机器名称
+ WM_CLASS :: 该程序的instant name和class name, instant name可以由命令行中的 =-name= 选项指定
+ WM_ICON_NAME :: 应用程序的图标所要显示出来的名称.
+ WM_NAME :: 这是由命令行中 =-title= 选项指定的窗口标题名称, *而不是应用程序的名称*
*** xev
事件或多或少驱动着整个窗口系统. 所有的输入,不论是鼠标或键盘,均由事件来掌握. 事件也被用来驱动窗口的重新配置和显示.

xev程序让你看到当不同的动作发生时,会产生什么事件,以及和事件有关的信息. 

执行xev,将鼠标指针移到窗口内,按下你所需的键,则键的名称会出现在括号内字符串keysym和一个十六进位数之后.

*** xsetroot
该工具定制root窗口的特征,一些可使用的选项有
+ -cursor $cursorfile $maskfile :: 把光标改为一个显示的值.这里光标文件是指一个用工具bmtoa将位图转换后的ASCII文件.
     其中,maskbitmap决定了cursorbitmap的哪些像素真正被显示出来,光标像素中只有对应到遮盖像素为黑的部分才会用到,而不会显示光标其他的像素. 总的来说,遮盖决定了光标的外形. 反之,光标图形则决定了外形的颜色. 遮盖和光标的图形必须大小相同.
+ -fg color foregrond :: 设置root窗口的前景色
+ -bg color background :: 设置root窗口的背景色
+ -rv :: 交换前景色和背景色
+ -solid color :: 把root窗口设置为单一的颜色.
+ -mod x y :: 设定格子图案,x和y为1到16的整数
+ -bitmap 图形文件 :: 指定图形来当作屏幕的背景
+ -def :: 回复缺省的光标和背景

*** xset
xset命令设置X环境的基本选项.
+ xset -b on /off
  打开/关闭PC扬声器,产生bell声音
+ xset -s seconds /off
  激活屏幕保护,off表示关闭屏幕保护
+ xset -q
  查询x的配置信息
+ xset fp
  设置字体信息
*** xdpyinfo
列出X服务器的信息和预设的参数
*** xmodmap
改变X下键盘和鼠标中,物理按键与按钮代码的映射关系

每一个键,有一个单独的码映射它,称之为键码. 键和键码之间的关系是绝对固定的!

连接到每一个键码(或键)的是一个keysym的列表. 一个keysym是一个代表印在键盘符号上的数字常数. 在缺省的情况,大多数的键只有一个keysym与之映射,但也有两个keysym的键,例如 =7= 和 =&=.

对一个键附属的keysym列表中,第一个keysym是未按下修饰键的状况下的键. 第二个keysym是指当Shift(或Lock)已被同时按下时的键. 如果在列表中只有一项,且为字母,则系统自动假设第二项为相对的大写字母. 
超过两项的keysym并没有特别的意义,键盘和keysym之间的关系被称之为键盘映射.

X提供八个修饰键:Shift、Lock(caps-lock)、Control、Mod1到Mod5. 习惯上, Mod1被解释为Meta, Mod5为Win.

最后,对鼠标按钮有一个类似的鼠标指针的映射. 对每一个实际的按钮,你可以对它们指定一个相关的逻辑按钮数字.

+ 查看现有的映射

  #+BEGIN_SRC sh
    xmodmap                         # 列出现有修饰键的映射
    xmodmap -pm                     # 列出现有修饰键的映射
    xmodmap -pp                     # 列出现有鼠标指针(按钮)的映射
    xmodmap -pk                     # 列出现有键的映射
    xmodmap -pm -pk -pp             # 将所有映射键一起输出
  #+END_SRC

+ 用xmodmap用来改变或设定映射.

  #+BEGIN_SRC sh
    # 从myfile中读取设置
    xmodmap myfile
    xmodmap - <myfile

    # 执行设置
    xmodmap -e expression
    xmodmap -e expression-1  -e expression-2
  #+END_SRC

+ 普通键映射

  每一个表达式的语法并不相同,但一般性的格式为:
  #+BEGIN_EXAMPLE
    keyword target = value(s)    (等号的两边均需为空白)
  #+END_EXAMPLE
    
  有两种主要的表达式
  #+BEGIN_EXAMPLE
    keycode $keycode = $keysym-1 [$keysym-2...]
  #+END_EXAMPLE
  与
  #+BEGIN_EXAMPLE
    keysm $target-keysym = $keysym-1 [$keysym-2...]
  #+END_EXAMPLE
    
  例如,假设你要将F6键重定义当没有修饰键按下时为“9”，当Shift按下时为“(”,则你可以用
  #+BEGIN_SRC sh
    xmodmap -e "keycode 21 = 9 parenleft"
  #+END_SRC
  或者
  #+BEGIN_SRC sh
    xmodmap -e "keysym F6 = 9 parenleft"
  #+END_SRC

+ 修饰键映射

  每个修饰键对应一个列表. 在列表中包含了所有当此修饰键被按下时会有意义的键(键码).

  xmodmap允许你在一个表中增加项目，去除项目，或完全清除一个表。对此三个操作的格式为：
  #+BEGIN_EXAMPLE
    add $modifier = $list-of-keysyms
    remove $modifier = $list-of-keysyms
    clear $modifier
  #+END_EXAMPLE
    
  例如,我要将右边的Meta键映射成Control,那么可以这样:
  #+BEGIN_SRC sh
    remove Mod1 = Meta_r
    add Control = Meta_r
    keysym Meta_r = Control_r
  #+END_SRC
    

  keysym 和keycode 表达式对修饰键映射绝对没有影响.
  一个常见的错误是执行下面这个命令:
  #+BEGIN_SRC sh
    xmodmap -e "keysym F1 = Contrl_R"
  #+END_SRC
  并期望F1键能像一个control键般作用,但它不会. 因为你相当于告诉系统“我已经把这个符号印在F1键上面”而已。
  
  你应该这样作:
  #+BEGIN_SRC sh
    xmodmap -e "add Control = F1"
  #+END_SRC


*** xlsfonts
列出系统中的字体,格式为
-foundary-family-wt-sl-wd-p-pts-hr-vr-sp-ave-charset-style

其中:

+ foundary :: 字体的制造厂商
+ faimily :: 字型家族,如times,courier,helvetica,new century schollbook
+ wt :: 粗字体,可选值为bold,light,medimum
+ sl :: 字体,可选值为r(roman),i(italic),o(oblique)
+ p :: 字符的高度,单位为像素
+ pts :: 字体的磅尺寸,为磅的10倍(12磅字体则为120)
+ hr :: 字体在显示设备上水平分辨率
+ vr :: 字体在显示设备上垂直分辨率
+ sp :: 字与字之间的间隙,p表示proportional(成比例),m表示monospaced(固定宽度)
     

在指定字体时,可以使用通配符, ~*~ 表示0多多个字符, ~?~ 表示任意单一字符.

当由于使用通配符照成设定对应一种以上的可用字体时,服务器程序会随便挑选一种字体来用.
** 定义应用程序的缺省选项--Resources

** 工具箱标准选项-xrm
大多数一般的资源均能被命令行选项明确地设定，例如你可以用 =-bg colour= 设定窗口背景颜色.但无论如何,有一些资源并没有符合的选项.
为了克服这点,工具箱提供一个“捕捉遗漏”的选项 =-xrm= (X 资源管理器的缩写).
=-xrm= 以一个参数当做资源规范,就如同你在XResource文件中输入的一样. 

例如:
#+BEGIN_SRC sh
  xclock -xrm "*update:30"
#+END_SRC
等价于
#+BEGIN_SRC sh
  xclock -update 30
#+END_SRC

在同一命令行你可以使用数次 =-xrm=,但每一次只能包含一个资源规范, 例如:
#+BEGIN_SRC sh
  xclock -xrm "*update:30" -xrm "*chime:on"
#+END_SRC

请记住, =-xrm= 只有在程序有用到工具箱才可应用
