#+TITLE: 图解性能优化
#+AUTHOR: lujun9972
#+TAGS: linux
#+DATE: [2017-07-27 四 17:25]
#+LANGUAGE:  zh-CN
#+OPTIONS:  H:6 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:nil

#+INTERLEAVE_PDF: /home/lujun9972/电子书/linux书籍/图解性能优化.pdf
* 性能信息的三中类型
:PROPERTIES:
:interleave_page_note: 65
:END:

** 概要形式
像sar和vmstat这样的工具，以汇总或者平均值的形式来展示一段时间的信息。

概要形式适合用来追溯调查过去的概念，可以将其作为一个着手点来调查之前发生了什么。

但概要形式不适合用来调查问题的原因。
** 事件记录形式
如网络抓包或系统调用记录，逐个记录每个事件。

不过由于性能数据量很大，对生产的压力就很大，因此大部分事件记录形式的工具并不适合经常地在生产环境中使用。
一般在确定了某个范围后才使用该工具来详细调查。

** 快照形式
像ps和top命令，记录瞬间的信息。

一般采用定期连续抓拍的形式,适用于调查问题的原因。

* 等待队列理论
:PROPERTIES:
:interleave_page_note: 72
:END:

等待队列模型假设：
+ 客户的到来遵守泊松分布
+ 客户的服务时间遵守指数分布
+ 只有单个进程提供服务

那么，可以使用以下公式来计算平均等待时间：

#+BEGIN_QUOTE
平均使用率p = (处理时间×处理条数)/单位时间
等待时间/处理时间 = p/(1-p)

比如，假设处理时间是1秒，每小时的处理条数是3000条(每小时来3000个请求)那么
p = 3000/3600 = 0.83
等待时间 / 1秒 = 0.83 / （1-0.83） = 4.88
那么，响应时间 = 4.88（等待时间）+1（处理时间）
#+END_QUOTE

等待队列有以下几个特点：
1. 由于请求到达的时间不平均，因此即使平均使用率没达到100%也会出现等待时间
2. 随着使用率接近100%（p上升），等待时间会呈指数级增加

* 推荐获取的性能信息
:PROPERTIES:
:interleave_page_note: 77
:END:

| 对象     | 性能信息                             |
|----------+--------------------------------------|
| OS信息   | vmstat                               |
|          | iostat                               |
|          | ps /top                              |
|----------+--------------------------------------|
| AP服务器 | 访问日志                             |
|          | AP服务器的处理等待队列信息  连续     |
|          | AP服务器的线程使用情况信息  连续     |
|          | AP夫u武器的DB使用情况信息  连续      |
|          | Java的GC日志  连续                   |
|          | Java的低负载的详细事件记录日志  连续 |
|----------+--------------------------------------|
| DB服务器 | 连接接受信息                         |
|          | DBMS的概要信息                       |
|          | DB绘画的快照                         |

** OS命令
:PROPERTIES:
:interleave_page_note: 78
:END:

*** sar
:PROPERTIES:
:interleave_page_note: 79
:END:
sar只能查看CPU使用率和空闲率、读写I/O的量、内存的概况等信息，常与top等获取快照信息的命令结合使用。

直接使用sar命令的效果差强人意，它的信息输出项目比较少，因此有时需要使用专门的命令（vmstat/iostat）来获取更详细的信息。

通过 =-f= 参数能够从已经自动记录的文件中把过去的数据显示出来
#+BEGIN_SRC shell
  sar -f
#+END_SRC

*** vmstat
:PROPERTIES:
:interleave_page_note: 81
:END:

获取等待执行的平均进程数、等待的平均进程数、CPU使用率、对Swap空间的I/O、通常的I/O、上下文切换次数等。

由于获取的也是概要形式，因此也常与top等获取快照信息的命令一起使用。

比起CPU使用率，等待执行的平均进程数（r列）和被阻塞的进程数（b列）更值得关注。

特别要留意wa列，它一般会被作为I/O等待的指标。
#+BEGIN_SRC shell :results raw
  vmstat 
#+END_SRC

#+RESULTS:
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b 交换 空闲 缓冲 缓存   si   so    bi    bo   in   cs us sy id wa st
 0  0      0 1220856  49820 764048    0    0    18    24  928  927  3  2 94  0  0


一般认为r列的值不应高于CPU核数的2倍或4倍。

*** ps
:PROPERTIES:
:interleave_page_note: 83
:END:
获取某个瞬间存在哪些进程，这些进程的状态(执行中/休眠等)、各进程CPU累计时间。

在使用ps命令特定到具体的进程后，有时候会通过对进程的栈或对进程的追踪来进行详细的调查。

注意： 由于该命令负载较大，因此不能在短时间内重复执行。
若需要在短时间内重复执行，则一般使用top命令代替。

*** netstat
:PROPERTIES:
:interleave_page_note: 85
:END:

使用 =-a= 参数可以获取套接字的瞬时快照，
#+BEGIN_SRC shell :dir /ssh:root@wulin:~/ :results raw
netstat -a |head
#+END_SRC

#+RESULTS:
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 0.0.0.0:mysql           0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:29100           0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:29712           0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:29300           0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:29301           0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:29400           0.0.0.0:*               LISTEN     
tcp        0      0 0.0.0.0:29401           0.0.0.0:*               LISTEN     

使用 =-r= 参数可以获取路由的瞬时快照，
#+BEGIN_SRC shell :dir /ssh:root@wulin:~/ :results raw
netstat -r
#+END_SRC

#+RESULTS:
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
default         gateway         0.0.0.0         UG        0 0          0 eth0
link-local      0.0.0.0         255.255.0.0     U         0 0          0 eth0
169.254.169.254 gateway         255.255.255.255 UGH       0 0          0 eth0
192.168.0.0     0.0.0.0         255.255.255.0   U         0 0          0 eth0

使用 =i= 参数可以获取各个接口的统计信息。
#+BEGIN_SRC shell :dir /ssh:root@wulin:~/ :results raw
netstat -i
#+END_SRC

#+RESULTS:
Kernel Interface table
Iface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg
eth0      1500   521207      0      0 0        285050      0      0      0 BMRU
lo       65536  1776618      0      0 0       1776618      0      0      0 LRU

当感觉网络性能异常时，应该查看使用这个网络通信的应用程序的性能日志，或者使用网络抓包获取事件形式的日志。

*** iostat
:PROPERTIES:
:interleave_page_note: 87
:END:
获取磁盘的繁忙程度，通过使用 =-x= 参数能获取响应时间和各种队列的长度。

一般推荐使用 =-t= (t表示显示时间) 和 =-x= (-x表示详细信息)参数.
通过检查队列的长度，就能知道有多少IO请求已经被发送或者有多少正在等待。

但要注意：无能通过OS层面的繁忙度来判断磁盘是否真的已经接近临界值，因为很多时候存储方面已经进行了虚拟化或分割，OS看到的磁盘信息与实际情况会有偏差。

*另外，第一次显示的值是从系统启动到现在为止的平均值，一般会跳过不做参考*

**** 关于active和wait的概念说明：

active指的是从OS的角度来看已经向磁盘发送完，wait指的是尚未发送。

active和wait都有队列长度和平均时间。 当存储接近临界值时，首先active的队列长度会增加，响应会变慢，接着wait的队列长度也会增加，响应开始变慢。

+ svctm :: 表示磁盘的服务时间(单位是毫秒)
+ await :: 表示每一个IO请求的处理的平均时间（单位是毫秒）。这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了。这个时间包括了等待时间和服务时间，也就是说，一般情况下，await大于svctm，它们的差值越小，则说明队列时间越短，反之差值越大，队列时间越长，说明系统出了问题。
+ %util :: 表示磁盘使用率，为重点关注对象。
*** top
:PROPERTIES:
:interleave_page_note: 90
:END:

最适合用来实时掌握OS整体的情况。

top可以整理出活跃的进程，并显示这些进程的信息，一般常与pstack命令配合获取调用栈的信息。
*** wireshark/tcpdump
:PROPERTIES:
:interleave_page_note: 91
:END:
详细记录正在进行什么通讯。

注意： 这个工具只能通过root用户执行，如果在OS上捕获数据包转储，会对系统性能产生很大的影响。
*** pstack
:PROPERTIES:
:interleave_page_note: 93
:END:

获取某个进程在某个瞬间执行了什么样的处理的快照信息。

由于获取的是快照信息，因此需要多次执行来获取信息，如果程序在等待什么，那么多次执行pstack命令应该也是在同一个调用栈等待。

#+BEGIN_SRC shell
  pstack $pid
#+END_SRC
*** strace
:PROPERTIES:
:interleave_page_note: 95
:END:
strace可以获取某个进程的系统调用信息，一般与top命令结合使用。
首先使用top命令确定哪个进程值得怀疑，然后再调用strace命令寻找卡在哪个系统调用上，再通过pstack输出调用栈信息。

*strace负载很高，请谨慎使用*
*** profiler(gprof)
:PROPERTIES:
:interleave_page_note: 97
:END:
得到哪个函数被调用多少次以及时间耗费在哪个函数上的信息。

通过连续执行pstack能够模拟部分profiler的功能，比如10此连续执行pstack可能能发现某个函数出现4次，那么这个函数可能就是一个关键节点。
*** Windows下的性能工具
:PROPERTIES:
:interleave_page_note: 99
:END:

+ 任务管理器
+ 性能监视器（perfmon）
+ 资源监视器
* 优化技巧
:PROPERTIES:
:interleave_page_note: 143
:END:
** 将访问频率高的数据存入键值表或散列表中
** 将访问频率高的数据放在尽可能接近用户的地方
比如对于频繁请求的DB中的内容，在读取一次后，可以换存在AP服务器上。
** 把同步变成异步
** 带宽控制与负载均衡
** 细化锁的粒度
** 使用巨帧和高速网络
** 写时复制
** 压缩
** 乐观锁
乐观锁只只用于更新不频繁的情况,否则会导致很多回滚。

实现乐观锁的方法主要有时间戳、版本统计、状态比较等。
** 列式数据库
列式数据库的优势在于对表的列方向的统计和扫描速度很快。
