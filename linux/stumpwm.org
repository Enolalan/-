#+TITLE: stumpwm
#+AUTHOR: DarkSun
#+OPTIONS: ^:{}

* 基础用法
  * C-t e
	
	打开emacs

  * C-t c

	打开terminal

  * C-t w

	查看window列表

  * C-t ;

	运行command

  * C-t C-t

	在两个window间切换

  * C-t s

	垂直分割frame

  * C-t TAB

	在frame间跳转

  * C-t window编号

	将指定编号的window显示在当前frame上

  * C-t !

	执行shell命令

  * C-t Q

	删除其他frame

* 快捷键说明
  StumpWm的快捷键默认与GNU Screen的快捷键很接近.
** Frame间跳转

   * C-t / C-t TAB (fnext)

	 选中当前group的下一个frame

   * C-t  M-TAB (fother)

	 跳转到上次选中的frame

   * C-t f (fselect)

	 显示每个frame的编号,然后输入编号就能直接选中指定的frame

   * C-t 方向键 (move-focus)

	 选中方向键所毗邻的frame

   * (sibling)

	 若将一个frame分割成A和B两个frame,则A,B互为sibling. 用该命令则会将focus从A跳转到B或从B跳转到B

** Window操作
*** 切换当前frame所拥有的window

    * C-t C-M-n (next-in-frame)

	  切换当前frame中的下一个window

	* C-t C-M-p (prev-in-frame)

	  切换当前frame中的上一个window

	* C-t M-t (other-in-frame)

	  切换当前frame中的两个window

	* (frame-windowlist)

	  显示当前frame所属的window列表. 并且可以选中列表中的window

	* (frame-windows)

	  仅仅显示当前frame所属的window列表,而不提供选中功能.

*** 切换当前group所有用的window
	
	有一类命令,在切换各window时,会将focus移动到window所在的frame处. 这类命令有:

	* C-t M-n (next)

	  切换到当前group中的下一个window

	* C-t M-p (prev)

	  切换到当前group中的上一个window

	* (other) / (other-window)

	  在当前group中的两个window间相互切换

	* C-t C-u (next-urgent)

	  切换到当前group中下一个带urgent标记的window

	* C-t ' (select) / (select-window)

	  该命令提示你输入某个window的title,并跳转到那个window. 输入title时支持部分补全.

	* (select-window-by-name)

	  该命令提示你输入某个window的title,并跳转到那个window. 该命令要求输入的title与window的实际title完全一样

	* C-t window编号 (select-window-by-number)

	  根据编号选中window

	* C-t " (windowlist)
	  
	  悬赏当前group的window列表菜单,并且可以通过该菜单直接选中window

    还有一类命令保持focus在一个frame不动,它将指定的window从原frame拉到当前frame中,该类操作命名为pull:
	
	* C-t C-window编号 (pull) / (pull-window-by-number)

	  将指定编号的window拉到当前frame

	* C-t n /C-t SPC (pull-hidden-next)

	  将没有显示出来的下一个window拉到当前frame中显示

	* C-t p (pull-hidden-previous)

	  将没有显示出来的上一个window拉到当前frame中显示

	* C-t C-t (pull-hidden-other)

	  将没有显示的windows中查找最近捕获到focus的window,拉到当前frame中显示

    下面的命令,将当前window连带focus也一起移动到其他的frame中

	* C-t M-方向键 (move-window)

	  将当前window连带focus一起移动到方向键所指的frame中

	* exchange-direction

	  提示输入一个方向, 然后将当前window与最远方向的frame的window进行互换.

*** 其他操作

	* C-t k / C-t C-k

	  退出程序

	* C-t K

	  强制杀死程序

	* C-t -

	  隐藏所有frame

	* C-t Q

	  移除所有其他的frame,并最大化当前frame

	* C-t +

	  平均分铺frame
	
** 帮助

   * C-t h k

	 捷键说明

   * C-t h f

	 函数说明

   * C-t h v

	 变量说明

   * C-t h w

	 列出指定命令的快捷键

   * C-t h c

	 命令说明

** Group操作
   * C-t G

	 显示所有的group及其所含的window

   * C-t g 编号

	 切换到第n个group

   * C-t Fn

	 切换到第n个group

   * C-t g g

	 显示group列表

   * C-t g c

	 创建新group

   * C-t g n / C-g g C-n /C-g g SPC /C-t g C-SPC

	 切换到下一个group

   * C-t g N

	 切换到下一个group,并将当前的window也一起带到下一个group中

   * C-t g p / C-t g C-p

	 切换到上一个group

   * C-t g P
	 
	 切换到上一个group,并将当前的window也一起带到上一个group中

   * C-t g '

	 根据名字/编号选中group

   * C-t g "

	 从group list中选择group

   * C-t g m

	 将当前window移动到指定的group

   * C-t g k

	 删除当前group,所有该group所拥有的window归并到下一个group中

   * C-t g r / C-t g r

	 更改当前group的名称

* 配置
** 自定义快捷键

   * (define-key map key command)

	 为command分配key作为快捷键

	 #+BEGIN_SRC lisp
       (stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-z") "echo Zzzzz...")
	 #+END_SRC
	 
	 若command为nil表示删除已有的快捷键

   * (undefine-key map key)

	 删除已有的快捷键

   * (kbd keys)

	 这里keys为表示快捷键的字符串. kbd将keys字符串转换为key structure,一般用于`define-key`,`undefine-key`,`set-prefix-key`这类函数中

   * (set-prefix-key key)

	 设置stumpwm的prefix-key,默认为(C-t)
	 
	 #+BEGIN_SRC lisp
       (stumpwm:set-prefix-key (stumpwm:kbd "C-M-H-s-z"))
	 #+END_SRC

   * (make-sparse-keymap)

	 创建新的空keymap.

	 #+BEGIN_SRC lisp
       (defvar *my-frame-bindings*
         (let ((m (stumpwm:make-sparse-keymap)))
           (stumpwm:define-key m (stumpwm:kbd "f") "curframe")
           (stumpwm:define-key m (stumpwm:kbd "M-b") "move-focus left")
           m ; NOTE: this is important
           ))
       (stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-f") ’*my-frame-bindings*)
	 #+END_SRC

	 stumpwm默认自带的keymap有:

	 * 变量*root-map*

	   默认快捷键为prefix-key,即C-t

	 * 变量*top-map*

	   无快捷键

	 * 变量*groups-map*

	   默认快捷键为prefix-key g

	 * 变量*exchange-window-map*

	   默认快捷键为prefix-key x

	 * 变量*input-map*

	   This is the keymap containing all input editing key bindings.

   * (bind key command)

	 Hang a key binding off the escape key
	   
** 自定义command

   使用defcommand来定义command,语法为:

   #+BEGIN_SRC lisp
     (defcommand cmd(arg1 arg2...)
       ((arg1-type arg1-prompt)
        (arg2-type arg2-prompt)
        ...)

       bodys)
   #+END_SRC
   下面是一个例子:
   #+BEGIN_SRC lisp
     (defcommand now-we-are-six (name age)
       ((:string "Enter your name: ")
        (:number "Enter your age: "))
       (message "~a, in six years you will be ~a" name (+ 6 age)))
   #+END_SRC

   其中cmd为命令名称,它也可以是(cmd scope)这样的格式,表示所定义的函数只在scope内生效. 
   目前scope的值有两个: 'tile-group和'float-group. 分别表示函数只在tile-group/float-group中生效.
   例如:
   #+BEGIN_SRC lisp
     (defcommand (next tile-group) ...)
   #+END_SRC

   arg-prompt表示提示用户输入参数时所显示的message.
   arg-prompt可以为nil或省略,则该参数认为是可选参数
   
   arg-type可以为:
   | 类型             | 说明                                                                            |
   |------------------+---------------------------------------------------------------------------------|
   | :y-or-n          | A yes or no question returning T or NIL.                                        |
   | :variable        | A lisp variable                                                                 |
   | :function        | A lisp function                                                                 |
   | :command         | A stumpwm command as a string.                                                  |
   | :key-seq         | A key sequence starting from *TOP-MAP*                                          |
   | :window-number   | An existing window number                                                       |
   | :number          | An integer number                                                               |
   | :string          | A string                                                                        |
   | :key             | A single key chord                                                              |
   | :window-name     | An existing window’s name                                                      |
   | :direction       | A direction symbol. One of :UP :DOWN :LEFT :RIGHT                               |
   | :gravity         | A gravity symbol. One of :center :top :right :bottom :left :top-right :top-left |
   | :bottom-right    | :bottom-left                                                                    |
   | :group           | An existing group                                                               |
   | :frame           | A frame                                                                         |
   | :shell           | A shell command                                                                 |
   | :rest            | The rest of the input yes to be parsed.                                         |
   | :module          | An existing stumpwm module                                                      |
   | 其他自定义的类型 | 使用define-stumpwm-type自定义的类型                                             |

   使用defin-stumpwm-type定义类型的作用类似于emacs中的"(interactive (list . . . ))". 它的语法为:

   (define-stumpwm-type :type-name (input prompt) body)
   #+BEGIN_SRC lisp
     (define-stumpwm-type :smart-direction (input prompt)
       (let ((valid-dirs
              (loop ; gather all the directions in which there’s a neighbouring frame
               with values = ’(("up" :up)
                                ("down" :down)
                                ("left" :left)
                                ("right" :right))
               with frame-set =
               (group-frames (window-group (current-window)))
               for dir in values
               for neighbour = (neighbour
                                (second dir)
                                (window-frame (current-window)) frame-set)
               if (and neighbour (frame-window neighbour))
               collect dir))
             (arg (argument-pop input))) ; store a possible argument
         (cond ((null valid-dirs) ; no directions, bail out
                (throw ’error "No valid directions"))
               (arg ; an arg was bound, but is it valid?
                (or (second (assoc arg valid-dirs :test #’string=))
                    (throw ’error "Not a valid direction")))
               ((= 1 (length valid-dirs)) ; only one valid direction
                (second (car valid-dirs)))
               (t ; multiple possibilities, prompt for direction
                (second (assoc (completing-read input prompt valid-dirs
                                                :require-match t)
                               valid-dirs :test #’string=))))))
     (defcommand smarty (dir) ((:smart-direction "Pick a direction: "))
       ;; ‘dir’ is a keyword here
       (message "You’re going ~a" (string-downcase dir)))
     (define-key *root-map* (kbd "R") "smarty right")
   #+END_SRC
   
   这里input和prompt皆为参数,其中input参数的值为提供给command的argument line. prompt参数的值为defcommand中定义的prompt.

   stumpwm为input参数提供了许多处理函数:

   * (argument-pop input)

	 从argument-line中pop出一个参数(参数之间以空格为分隔符)

   * (argument-pop-rest input)

	 将argument-line中的剩余值作为单个的字符串参数pop出来

   * (argument-pop-or-read input prompt &optional completions) 
   
	 类似argument-pop,但若pop的值为空,则提示用户输入参数值

   * (argument-pop-rest-or-read input prompt &optional completions)
	 
	 类似argument-pop-rest,但若pop的值为空,则提示用户输入参数值

* Message and Input Bar
  * (echo string)

	在message bar中显示string

  * (message fmt &optional args)

	在message bar中显示格式化后的信息

  * (copy-last-message)

	拷贝在X中最后显示的那条信息

  * (colon &optional init-input)

	从用户处读取command

  * (read-one-line screen prompt &key (initial-input ) require-match password)

  * (read-one-char screen)

  * (completing-read screen prompt completions &key (initial-input ) require-match)

  * (input-insert-string input string)

  * (input-insert-char input char)

* Windows
  * (next)

	切换到window列表中的下一个window

  * (pull-hidden-next)

	把下一个未显示的window,拉到当前frame

  * (prev)

	切换到window列表中的上一个window

  * (pull-hidden-previous)
	
	把上一个未显示的window,拉到当前frame

  * (delete-window &optional (window (current-window)))

	关闭指定window

  * (kill-window &optional (window (current-window)))
	
	强制关闭指定window

  * (echo-windows &optional(fmt *window-format*) (group (current-group)) (windows (group-windows group)) )
	
	根据fmt的格式显示指定group中的指定windows信息

  * (other-window&optional(group(current-group)))
	
	切换到上次选中的window

  * (pull-hidden-other)

	在未显示的window中将最后一次选中的window拉到当前frame

  * (renumber n &optional (group (curent-group)))

	将group中的当前window重新分配编号为n, 若n已经有其他window占用了,则两者相互交换编号

  * (meta key)

	发送虚假按键信息到当前window. key一般为stumpWM的key,例如C-M-o

  * (select-window query)

	切换到以query开头的第一个window

  * (select-window-by-number num &optional (group (current-group)))

	查找指定编号的window,并让它显示在它所属的frame中

  * (title new-title)

	设定当前window的title

  * (windowlist &optional (fmt *window-format*))

	使用fmt格式列出window列表,并允许用户选择哪个window

  * (fullscreen)

	最大化当前window

  * (info &optional (fmt *window-info-format*))

	显示当前window的信息

  * 命令(list-window-properties)

	列出当前window的所有属性及其值,类似xprop的功能.

  * (refresh)

	刷新当前window,而不更改window的大小

  * (redisplay)

	刷新当前window,会让该window占用整个frame大小?

  * 变量*window-format*

    | 占位符 | 说明                                                                       |
    |--------+----------------------------------------------------------------------------|
    | %n     | 根据*window-number-map*转换后的windows编号                                 |
    | %s     | 用符号显示window status. *表示当前window,+表示最后的window,-表示其他window |
    | %t     | window的名称                                                               |
    | %c     | window的class                                                              |
    | %i     | window的resouce ID                                                        |
    | %m     | 若window为marked,则显示为#                                                 |

	可以使用前缀的数字来表示长度,例如%20t表示将window的title扩展为20个字节

  * 变量*window-name-source*

	该变量决定了使用什么作为window的名称. 默认为:title

    | 值             | 说明                      |
    |----------------+---------------------------|
    | :title         | 使用window的title         |
    | :class         | 使用window的resource class |
    | :resource-name | 使用window的resource name    |

  * 变量*new-window-prefered-frame*

	
** Window Marks
   可以为某些window打上标记. 打上标记的window在window列表上显示时会有#标记. 有些命令,只对带标记的window生效

   * (mark)

	 切换当前window的标记

   * (clear-window-marks &optional (group (curent-group)) (windows (group-windows group)))

	 清除指定group中所有window的mark标记

   * (pull-maked)

	 将所有带标记的window拉到当前frame来,并清除掉这些mark

** 控制Raise和Map请求

   A map request occurs when a new or withdrawn window requests to be mapped for the first time.

   A raise request occurs when a client asks the window manager to give an existing window focus.
   
   * 变量*deny-map-request*

	 该变量是一个由window properties组成的list. 匹配其中window properties的window的map request会被拒绝
	 #+BEGIN_SRC lisp
       ;; Deny all map requests
       (setf stumpwm:*deny-map-request* t)    
       ;; Deny transient raise requests
       (push ’(:transient) stumpwm:*deny-map-request*)
	 #+END_SRC

   * 变量*deny-raise-request*

	 该变量是一个由window properties组成的list. 匹配其中window properties的window的raise request会被拒绝
	 #+BEGIN_SRC lisp
       ;; Deny the firefox window from taking focus when clicked upon.
       (push ’(:class "gecko") stumpwm:*deny-raise-request*)
       ;; Deny the all windows in the xterm class from taking focus.
       (push ’(:class "Xterm") stumpwm:*deny-raise-request*)
	 #+END_SRC

   * 变量*suppress-deny-messages*

	 设置为T会屏蔽raise/map的静止消息
	
** Programming With Windows
   * 宏(define-window-slot attr)

	 创建新的window属性,和对应的set/get函数

   * 函数(window-send-string string &optional (window(current-window))
	 
	 发送string表示的字符到指定window,就好像用键盘输入一样

   * 变量*default-window-name*

	 若window没有自己的名字,则使用这个变量为自己的名字.

** Rule Based Window Placement
   可以指定一个规则,让匹配规则的window自动放在指定的group和frame中.

   * 宏(define-frame-preference target-group &rest frame-rules)

	 指定一个规则,让匹配规则的window自动放在指定的group和frame中.
	 
	 每个frame-rule为一个lambda list:

	 (frame-number raise lock &key create restore dump-name class instance type role title)

	 * frame-number

	   将匹配的window放到该编号的frame中

	 * raise

	   若值为非nil,则raise and focus the window in its frame

	 * lock

	   若值为nil,则该规则只有在当前group为参数target-group时才有用.

	   若值为非nil,则不管当前group为何,该规则都会将匹配的window送到target-group中.

	 * create

	   若create为非nil,且它的值为*DATA-DIR*目录下的某个group-dump文件名称.则该group会自动重新加载并创建出来

	 * restore

	   若restore为非nil,且它的值为*DATA-DIR*目录下的某个group-dump文件名称.则即使该group已经存在,也会自动重新加载并还原.

	 * class

	   window的class的匹配条件

	 * instance

	   window的instance/resource name的匹配条件

	 * type

	   window的type匹配条件

	 * role

	   window的role匹配条件

	 * title

	   window的title匹配条件

   * 函数(clear-window-placement-rules)

	 清空所有window的placement rules

   * (remember lock title)

	 记住当前window的所属的位置,即为当前window创建一条placement rule

   * (forget)

	 忘记当前window的所属位置

   * (dump-window-placement-rules file)

	 将*window-placement-rules*保存到文件中

   * (restore-window-placement-rules file)

	 加载保存到file中的*window-placement-rules*

* Frames
  * (pull-window-by-number window-id &optional(group(current-group)))
	
	从指定group抽取指定编号为window-id的window到当前group,并focus到这个window上

  * (hsplit &optional (ratio 1/2))

	按比例竖着一分为二

  * (vsplit &optional (ratio 1/2))

	按比例,横着一分为二

  * (remove-split &optional (group(current-group)) (frame (tile-group-current-frame group)))
	
	移除指定group的指定frame(默认为当前group的当前frame). frame中的windows会合并到下一个frame中

  * (only)

	移除所有的非当前frame,并最大化当前frame

  * (curframe)

	Display a window indicating which frame is focused.

  * (fnext)

	循环遍历frame tree中的下一个frame

  * (sibling)

	 若将一个frame分割成A和B两个frame,则A,B互为sibling. 用该命令则会将focus从A跳转到B或从B跳转到B

  * (fother)
	
	 跳转到上次选中的frame

  * (fselect frame-number)

	显示每个frame的编号,然后输入编号就能直接选中指定的frame

  * (resize width height)

	调整当前frame到width * height个像素大小

  * (fclear)
	
	clear当前frame

  * (move-focus direction)
	
	 选中方向所毗邻的frame. 方向可以为up/down/left/right

  * (move-window direction)

	类似move-focus, 只是当前window会连着一起pull过去

  * (next-in-frame)

	切换当前frame中的下一个window

  * (prev-in-frame)
	
	切换当前frame中的上一个window

  * (other-in-frame)
	
	切换当前frame中的两个window

  * (echo-frame-windows &optional (fmt *window-format*))
	
	显示当前frame中的所有windows列表

  * (exchange-direction direction &optinal (win (current-window)))

	提示输入一个方向, 然后将当前window与最远方向的frame的window进行互换.

  * 变量*min-frame-width*

  * 变量*min-frame-height*

  * 变量*new-frame-action*

	当一个创建了一个frame后,该变量控制会往该新frame中放些什么东西.

	:empty表示保留该frame为空

	:last-window 表示frame中没有显示的最后一次focus的window. 为默认值
	
** 交互式更改Frame的大小

   进入iresize mode可以是你交互式的更改当前frame的大小. 使用iresize或C-t r进入resize mode
   
   * (iresize)

	 进入iresize-mode. 在该mode下可以使用如下命令交互地更改当前frame的大小

	 * C-p / Up / k

	   减少当前frame的高度

	 * C-n / Down / j 

	   增加当前frame的高度

	 * C-f / Right / l

	   增加当前frame的长度

	 * C-b / Left / h 

	   减少当前frame的长度

	 * C-g / ESC

	   取消调整(还未实现)

	 * RET
	   
	   确定调整

   * (abort-iresize)

	 退出interactive resize mode.

   * (exit-iresize)

	 退出interactive resize mode.

   * 变量*resize-increment*

	 当调整frame大小时,每次调整多少像素
	
** Frame Dumping

   frame和group的配置信息可以使用如下命令保存/还原

   * (dump-desktop-to-file file)

	 保存所有screen的所有group的frames信息

   * (dump-group-to-file file)

	 保存当前screen的当前group的frames信息

   * (dump-screen-to-file file)

	 保存当前screen的所有group的frames信息

   * (restore-from-file file)

	 还原file中的screen,group和frames信息

   * (place-existing-windows)

	 根据placement rules重新排布windows的位置
* mode-line
  * 命令mode-line

	切换是否显示mode-line

  * (toggle-mode-line screen head &optiional (format (quote *screen-mode-line-format*)))
	
	切换特定screen中的mode-line是否显示

  * 变量*screen-mode-line-format*

	该变量为一个由string,symbol和list组成的list.

	其中,若元素为symbol,则mode-line显示它的值.

	若元素为(:eval FORM)这样的list,则FORM的计算结果为显示的值

	若元素为string,则该string为一个fmt,会将string中的转义字符转义后显示.

    | 转义字符 | 说明                                                                                                                                |
    |----------+-------------------------------------------------------------------------------------------------------------------------------------|
    | %h       | 显示当前mode-line所属的head编号                                                                                                     |
    | %w       | 列出当前group包含的所有window,格式根据*window-format*来定                                                                           |
    | %W       | 列出当前group的当前head所包含的所有window,格式根据*window-format*来定                                                               |
    | %g       | 列出所有group,格式根据*group-format*来决定                                                                                          |
    | %n       | 当前group的名称                                                                                                                     |
    | %u       | 根据*window-foramt*列出urgent windows                                                                                               |
    | %v       | 列出所有的window列表,格式根据*window-format*来定. 其中当前的window由fmt-highlight来高亮,不可见的window由*hidden-window-color*来标色 |
    | %d       | 根据*time-modeline-string*来输出当前时间                                                                                                    |
    |          |                                                                                                                                     |

  * 变量*mode-line-postion*

	可选值为:top或:buttom

  * 变量*mode-line-border-width*

  * 变量*mode-line-pad-x*

  * 变量*mode-line-pad-y*

  * 变量*mode-line-background-color*

  * 变量*mode-line-foreground-color*

  * 变量*mode-line-border-color*

  * 变量*mode-line-timeout*

	mode-line会在每次命令执行后自动更新. 但若一直不执行命令,则会每隔*mode-line-timeout*秒后更新.

	更改该值之后,需要重新执行mode-line命令才能生效.

* groups
  stumpwm中的group,类似其他wm中的virtual desktop或workspace
** group相关命令
   * 命令(gnew name)

	 创建名为name的新group,并切换到该group

	 若name以`.`开头,则表示该group为隐藏group. 隐藏group的编号小于1,并且对命令gnext,gprev不可见

   * 命令(gnew-float name)

	 创建名为name的浮动float,并切换到该float

   * 命令(gnewbg name)

	 类似gnew,但不切换到该group

   * 命令(gnewbg-float name)

	 类似gnew-float,但不切换到该group

   * 命令(gnext)/(gprev)

	 切换到下一个/上一个group

   * 命令(gnext-with-window) / (gprev-with-window)

	 连带着当前的window一起切换到上一个/下一个group

   * 命令(gother)

	 在两个group间相互切换

   * 命令(gmerge from-group-id)
	 
	 将from-group中的window拉到当前group中

   * 命令(groups &optional (fmt *group-format*))
	 
	 以格式fmt显示groups列表

   * 命令(grouplist &optional (fmt *group-format*))
	 
	 类似groups,但同时还让用户看可以选择切换到哪个group

   * 命令(vgroups &optional gfmt wfmt)
	 
	 类似groups,但同时还显示每个group的window

   * 命令(gselect to-group)

	 跳转到to-group,to-group可以为group-id,也可以为字符串,表示匹配该字符串的group

   * 命令(gmove to-group)

	 移动当前window到to-group中

   * 命令(gkill)

	 删除当前group,当前group所拥有的window会merge到下一个group

   * 命令(grename new-group-name)

	 重命名当前group
** 自定义group
   * 变量*group-formatters*

	 它为一个(字符 . 格式化函数)组成的alist. 这里定义的字符可以作为*group-format*中的转义字符来用. 

	 当在*group-format*中出现某转移字符时,会在*group-formatters*中查找相应的格式化函数,并以group作为参数调用该格式化函数. 将返回结果作为输出的字符串.

	 若格式化函数的返回结果不是string,则会自动调用prin1-to-string转换.

   * 变量*group-format*

	 显示group list时的格式说明.
     | 转移字符 | 说明                                       |
     |----------+--------------------------------------------|
     | %n       | 根据变量*group-number-map*转换group number |
     | %s       | group的状态,类似window的状态               |
     | %t       | group的名称                               |

   * 函数(current-group &optional (screen (current-screen)))
	 
	 返回指定screen显示的当前group
* Screen
  Stumpwm支持多screen
** 相关命令
   * snext

	 切换到下一个screen

   * sprev

	 切换到上一个screen

   * sother

	 在两个screen中相互切换

   * refresh-head &optional (screen (current-screen))
	 
	 若自定的screen连接到monitor上了,则刷新指定screen.

	 Stumpwm中的head就是monitor的意思.
** 自定义screen

   * 函数(current-screen)

	 获取当前screen

   * 函数(screen-current-window screen)

	 获取指定screen中的当前window

   * 函数(current-window)

	 获取当前screen中的当前window

   * 变量*screen-list*

	 stumpwm维护的screen列表
* 与UNIX/X11交互
  * 命令(run-shell-command cmd &optional collect-output-p)
	
	运行cmd命令,若collect-output-p为T,则stumpwm会等待cmd运行结束,并返回cmd的输出.

  * 命令(emacs)

	若emacs没有运行,则运行emacs

  * 函数(programs-in-path &optional full-path-p (path (split-string (getenv PATH) :)))
	
	返回path中的所有程序list. 若参数full-path-p为T,则返回程序的全路径,否则之返回程序的文件名

  * 函数(pathname-is-executable-p pathname)
	
	pathname所表示的文件是否可执行

  * 变量*shell-program*

	命令run-shell-command会使用该变量所表示的shell来运行cmd

  * 函数(getenv var)
	
	获取var的环境变量值

  * 函数(setf (getenv var) val)

	设置环境变量

  * 命令(window-send-string string &optional (window (current-window)))
	
	发送string到指定的window,就好像用键盘在window上敲string一样.

  * 命令(ratclick &optional (button 1))

	模拟鼠标在当前位置点击. Note: 只有在X server和CLX实现同时支持XTEST时才有效

  * 命令(getsel)

	echo选中的内容

  * 命令(putsel string)

	Stuff the string string into the X selection.

  * 函数(set-x-selection text &optional (selection primary))
	
	Set the X11 selection string to string

  * 函数(get-x-selection &optional timeout (selection primary)) 
	
	Return the x selection no matter what client own it.
* stumpwm系统相关
  * 命令(reload)

	使用asdf重载stumpwm

  * 命令(loadrc)

	重加载~/stumpwmrc配置文件

  * 命令(quit) / (keyboard-quit)

	退出stumpwm

  * 命令(restart-hard) / (restart-soft)

	重启stumpwm

  * 命令(commands)

	列出所用的命令

  * 函数(run-commands &rest commands)

	按顺序以此执行stumpwm的command

  * 

  * 命令(copy-unhandled-error)

	拷贝未捕获的错误,并将错误信息拷贝到X11 selection中

  * 命令(lastmsg)

	显示最后出现的message

  * 命令(eval-line cmd)

	计算S表达式,并显示结果
* Timer

  Stumpwm也有定时器

  * 函数(run-with-timer delay-secs repeat-secs function &rest args)
	
	在delay-secs之后,开始每隔repeat-secs就执行一次function, args为传递给function的参数

  * 函数(cancel-time timer)

	取消timer

  * 函数(timer-p timer)

	判断timer是否为定时器.
* 帮助相关命令
  * 命令(describe-key key)

	快捷键所绑定的命令

  * 命令(describe-variable var)

	变量说明

  * 命令(describe-function fn)

	函数说明

  * 命令(describe-command command)

	命令说明

  * 命令(where-is cm)

	获取命令的快捷键

  * 命令(modifiers)

	List the modi￿ers stumpwm recognizes and what MOD-X it thinks they’re on.
